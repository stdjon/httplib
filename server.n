using System;
using System.Collections.Specialized;
using System.IO;
using System.Net;
using System.Text.Encoding;

using Nemerle.IO;
using Nemerle.Utility;


namespace httplib {

//------------------------------------------------------------------------------
// Request

public class Request {

    [Accessor] query_string: NameValueCollection;
    [Accessor] url: Uri;
    [Accessor] raw_url: string;

    public this(req: HttpListenerRequest) {
        query_string = req.QueryString;
        url = req.Url;
        raw_url = req.RawUrl;
    }
}


//------------------------------------------------------------------------------
// Response

public class Response {

    [Accessor(flags = WantSetter)]
    mutable output_stream: Stream;

    [Accessor(flags = WantSetter)]
    mutable content_length: long;

    public this(res: HttpListenerResponse) {
        output_stream = res.OutputStream;
        content_length = res.ContentLength64;
    }

    public appendV(params data: array[string]): void {
        append(data);
    }

    public append(data: array[string]): void {
        foreach(d in data) {
            def buffer = UTF8.GetBytes(d);
            ContentLength += buffer.Length;
            OutputStream.Write(buffer, 0, buffer.Length);
        }
    }
}


//------------------------------------------------------------------------------
// Server

public abstract class Server: IDisposable {

    [System.Flags]
    public enum State {
        | Neutral = 0x00
        | Running = 0x01
    }


    [Accessor(Flags, flags = Protected)]
    [FlagAccessor(Running, flags = Protected | WantSetter)]
    mutable state: State = State.Neutral;

    [Accessor(flags = Protected)]
    listener: HttpListener = HttpListener();

    public this() {
        mutable prefixes = Listener.Prefixes;

        prefixes.Add("http://localhost:8080/");
        Listener.Start();
    }

    public Dispose(): void {

        Listener.Close();
        Running = false;
    }

    public update(): void {
        Running = true;
        def _ = Listener.BeginGetContext(
            AsyncCallback(listenerCallback), this);
    }

    protected abstract callback(request: Request, response: Response): void;

    static listenerCallback(result: IAsyncResult): void {

        def server = result.AsyncState :> Server;
        def context = server.Listener.EndGetContext(result);
        def request = Request(context.Request);
        mutable response = Response(context.Response);

        server.callback(request, response);
        response.OutputStream.Close();
    }
}

} // namespace httplib
