# Usage:
#    awk -f font_data.awk -j font_map.in */*.css > font_data.js
#    awk -f font_data.awk -y font_map.in */*.css > font_data.yml

BEGIN {
    if("-j" == ARGV[1]) { js = 1; ARGV[1] = ""; }
    if("-y" == ARGV[1]) { yaml = 1; ARGV[1] = ""; }
}


/^#.*/ {
    next; # comment
}


/[a-z0-9_-]+ -> [a-z0-9_-]+( [a-z0-9_-]+)?/ {
    split($0, arr);
    class = arr[1];
    p = arr[3];
    h = arr[4];
    sub("\r", "", p);
    sub("\n", "", p);
    sub("\r", "", h);
    sub("\n", "", h);

    map[class] = 1;
    if(p) {
        mapdata[class "-p"] = p
    }
    if(h) {
        mapdata[class "-h"] = h
    }
}

/font-family: '[a-zA-Z_0-9]+'/ {

    split($0, arr, "'");
    font = arr[2];
    class = font;
    style = font;

    sub(/(_?bold|_?italic|_?bold_?italic|_?regular|_?black|_?black_?italic|_?semi)/, "", class);

    gsub(/_/, "", style)
    sub(/bold_?italic/, "ASDF", style);
    sub(/black_?italic/, "ASDF", style);
    sub(/.*regular/, "regular", style);
    sub(/.*light/, "regular", style);
    sub(/.*medium/, "regular", style);
    sub(/black/, "bold", style)
    sub(/.*bold/, "bold", style);
    sub(/.*italic/, "italic", style);
    sub(/semi/, "", style);
    sub(/.*ASDF/, "bolditalic", style);

    fonts[class] = 1
    output[class "-" style] = font
    import[class] = FILENAME;
}


function print_js() {
    print "// Autogenerated by font_data.awk"
    print "var _font_map = {"
    for(m in map) {
        print "  " m ": {"
        h = mapdata[m "-h"]
        if(h) {
            print "    h: '" h "',"
        }
        p = mapdata[m "-p"]
        if(p) {
            print "    p: '" p "',"
        }
        print "  },"
    }
    print "};"
    print "var _font_data = {"
    for(class in fonts) {

        print "  " class ": {";
        print "    import: '" import[class] "',";

        for(style in styles) {

            if(output[class "-" style] != "") {

                print "    " style ": '" output[class "-" style] "',"
            }
        }
        print "  },"
    }
    print "};"
}


function print_yaml() {
    print "# Autogenerated by font_data.awk"
    print "---"
    print "Map:"

    for(m in map) {
        print "  " m ":"
        h = mapdata[m "-h"]
        if(h) {
            print "    h: " h;
        }
        p = mapdata[m "-p"]
        if(p) {
            print "    p: " p;
        }
    }

    print "Fonts:"
    for(class in fonts) {

        print "  " class ":";
        print "    import: " import[class];

        for(style in styles) {

            if(output[class "-" style] != "") {

                print "    " style ": " output[class "-" style] ""
            }
        }
    }
    print "..."
}


END {
    styles["bold"] = 1;
    styles["bolditalic"] = 1;
    styles["italic"] = 1;
    styles["regular"] = 1;

    if(js) {
        print_js();
    }
    if(yaml) {
        print_yaml();
    }
}

