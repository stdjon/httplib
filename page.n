using System;
using System.Collections.Generic;
using System.IO;

using Nemerle.IO;

using Nustache.Core;
using YamlDotNet.Serialization;


namespace httplib {

//------------------------------------------------------------------------------
// Page

[Record]
public class Page {

    type PartialsType = Dictionary[string, string];
    type ObjectsType = Dictionary[string, object];

    static yaml_deserializer = Deserializer();

    public Path: string { get; set; }
    public Title: string { get; set; }
    public Stylesheet: string { get; set; }
    public Content: string { get; set; }
    public Partials: PartialsType { get; set; }
    public Objects: ObjectsType { get; set; }

    public this() {}

    public static load(path: string): Page {
        mutable result = yaml_deserializer.Deserialize.[Page](StreamReader(path));
        result.Path = path;
        result;
    }

    public static load(stream: Stream): Page {
        yaml_deserializer.Deserialize.[Page](StreamReader(stream));
    }

    public render(data: ObjectsType = null, parts: PartialsType = null): string {
        def objects = data ?? Objects;
        def content = Render.StringToString(Content, objects, templateLocator(_, parts));
        def title =
            if(!String.IsNullOrEmpty(Title)) {
                $"<title>$Title</title>";
            } else {
                "";
            }
        def stylesheet =
            if(!String.IsNullOrEmpty(Stylesheet)) {
                $"<link href='$(Stylesheet)' rel='stylesheet'>"
            } else {
                "";
            }

        $"<html><head>$title$stylesheet</head><body>$content</body></html>";
    }

    templateLocator(template: string, parts: PartialsType = null): Template {
        mutable result: Template = null;
        mutable partial_to_use: string = null;

        when(Partials.ContainsKey(template)) {
            partial_to_use = Partials[template];
        }

        when( parts != null &&
            parts.ContainsKey(template) ) {

            partial_to_use = parts[template];
        }

        when(partial_to_use != null) {
            result = Template(template);
            using(def reader = StringReader(partial_to_use)) {
                result.Load(reader);
            }
        }

        result;
    }
}


} // namespace httplib
