using System;
using System.Collections.Generic;

using Nemerle.Extensions;


namespace forum {

/** We don't currently store the order of posts in individual threads, so to
 *  avoid hitting the database constantly for this info, we maintain a cache of
 *  post ids per thread, so we can move from post id to post # in thread quickly.
 *  If any posts are moved, we'd expect to invalidate() both threads involved.
 */
public class ThreadPosts {

    type PostIdList = List[uint];
    type PostNumMap = Dictionary[uint, int];

    PostIdLists: Dictionary[uint, PostIdList] { get; set; }
    PostNumMaps: Dictionary[uint, PostNumMap] { get; set; }
    ThreadLocks: Dictionary[uint, object] { get; set; }

    GeneralLock: object { get; set; }

    public Server: ForumServer { get; private set; }

    public Item[thread_id: uint]: PostIdList {
        get { getPostIds(thread_id); }
    }

    public this(server: ForumServer) {
        Server = server;
        GeneralLock = Object();
        lock(GeneralLock) {
            invalidate();
        }
    }

    public invalidate(): void {
        lock(GeneralLock) {
            PostIdLists = Dictionary();
            PostNumMaps = Dictionary();
            ThreadLocks = Dictionary();
        }
    }

    public invalidate(thread_id: uint): void {
        lock(GeneralLock) {
            _ = PostIdLists.Remove(thread_id);
            _ = PostNumMaps.Remove(thread_id);
            _ = ThreadLocks.Remove(thread_id);
        }
    }

    initialize(thread_id: uint): void {
        // expect GeneralLock is locked
        invalidate(thread_id);
        ThreadLocks[thread_id] = Object();

        def postList = List();
        def postMap = Dictionary();
        using(fdb = Server.openForumDatabase()) {
            fdb.forEachPostInThread(thread_id, (j, post_id) => {
                postList.Add(post_id);
                postMap[post_id] = j + 1;
            });
        }
        PostIdLists[thread_id] = postList;
        PostNumMaps[thread_id] = postMap;
    }

    public getPostNum(thread_id: uint, post_id: uint): int {
        getPostNums(thread_id)[post_id];
    }

    public getPostId(thread_id: uint, post_num: int): uint {
        getPostIds(thread_id)[post_num - 1];
    }

    public getPostIds(thread_id: uint): PostIdList {
        ensureDataExists(thread_id);
        lock(ThreadLocks[thread_id]) {
            PostIdLists[thread_id];
        }
    }

    public getPostNums(thread_id: uint): PostNumMap {
        ensureDataExists(thread_id);
        lock(ThreadLocks[thread_id]) {
            PostNumMaps[thread_id];
        }
    }

    public addPost(thread_id: uint, post_id: uint): int {
        ensureDataExists(thread_id);
        lock(ThreadLocks[thread_id]) {
            def list_ = getPostIds(thread_id);
            def map = getPostNums(thread_id);
            list_.Add(post_id);
            def n = list_.Count;
            map[post_id] = n;
            n;
        }
    }

    ensureDataExists(thread_id: uint): void {
        lock(GeneralLock) {
            when(!ThreadLocks.ContainsKey(thread_id)) {
                initialize(thread_id);
            }
        }
    }
}


}
