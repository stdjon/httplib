using System;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;

using Nemerle.Extensions;

using httplib;


namespace forum {

public class ForumServer: Server {

    public TimeStarted: long { get; private set; }

    public new Configuration: ForumServerConfiguration {
        get { base.Configuration :> ForumServerConfiguration }
    }

    public this(path: string) {
        def config = loadConfiguration.[ForumServerConfiguration](path);
        this(config);
    }

    public this(config: ForumServerConfiguration) {
        base(config);

        TimeStarted = Date.NowTicks;

        route([ (HTTP.GET, "/"),
                (HTTP.GET, "/index") ], IndexHandler.Factory("index.nyml"));

        route(HTTP.GET, "/nav-{{action}}", NavHandler.Factory(HTTP.GET));
        route(HTTP.POST, "/nav-{{action}}", NavHandler.Factory(HTTP.POST));
        route(HTTP.POST, "/tok-{{action}}", TokenHandler.Factory(HTTP.POST));

        route(HTTP.GET, "/signup", SignupHandler.Factory(false));
        route(HTTP.POST, "/signup-submit", SignupHandler.Factory(true));

        route(HTTP.GET, "/is-user", isUserResponse);

        route([ (HTTP.GET, "/u"),
                (HTTP.GET, "/u/{{num:[0-9]+}}") ], usersRedirectPageResponse);
        route(HTTP.GET, "/u/{{from:[0-9]+}}-{{to:[0-9]+}}",
            UsersHandler.Factory("users.nyml", true));
        route(HTTP.GET, "/u/{{user:[A-Za-z_].*}}",
            UsersHandler.Factory("user.nyml", false));

        route(HTTP.POST, "/prefs", updatePrefsResponse);
        route(HTTP.POST, "/categories", categoryListResponse);

        route(HTTP.POST, "/recover", RecoveryInitiateHandler.Factory());
        route(HTTP.GET, "/recover/{{token:.*}}",
            RecoveryConfirmHandler.Factory("recover.nyml"));
        route(HTTP.POST, "/recover-submit", RecoverySubmitHandler.Factory());

        route(HTTP.GET, "/p/{{num:[0-9]+}}", PostHandler.Factory("post.nyml"));

        route([ (HTTP.GET, "/th/new"),
                (HTTP.POST, "/th/new") ],
            NewThreadHandler.Factory("newthread.nyml"));

        route(HTTP.POST, "/createthread", CreateThreadHandler.Factory());

        route([ (HTTP.GET, "/th/{{id:[0-9]+}}"),
                (HTTP.GET, "/th/{{id:[0-9]+}}/{{from:[0-9]+}}-{{to:[0-9]+}}") ],
            ThreadHandler.Factory("thread.nyml"));

        route(HTTP.GET, "/tg/{{tag:.*}}", TagHandler.Factory("tag.nyml"));

        route([ (HTTP.GET, "/c/new"),
                (HTTP.POST, "/c/new") ],
            NewCategoryHandler.Factory("newcat.nyml"));

        route(HTTP.POST, "/createcategory", createCategoryResponse);

        route([ (HTTP.GET, "/c"),
                (HTTP.GET, "/c/{{from:[0-9]+}}-{{to:[0-9]+}}") ],
            CategoryListHandler.Factory("cats.nyml"));

        route(HTTP.GET, "/c/{{id:[0-9]+}}", CategoryHandler.Factory("cat.nyml"));

        route(HTTP.POST, "/preview-post", previewPostResponse);
        route(HTTP.POST, "/createpost", createPostResponse);
        route(HTTP.POST, "/update-post", updatePostResponse);
        route(HTTP.POST, "/get-post", getPostDataResponse);

        route([ (HTTP.POST, "/window"),
                (HTTP.GET, "/window")], // for testing only?
            FragmentHandler.Factory("editwindow.nyml"));

        route(HTTP.GET, "/filter", filterTestResponse);

        route(HTTP.GET, "/custom-styles.css",
            CssHandler.Factory("custom-styles.nyml", "font_data.yml"));

        route(HTTP.POST, "/upload-avatar", UploadAvatarHandler.Factory());
        route(HTTP.GET,
            "/avatar/{{size:[0-9]+}}/{{user:.*}}", AvatarImageHandler.Factory());

        route(HTTP.POST, "/thumb", thumbPostResponse);
        route(HTTP.POST, "/star", starPostResponse);

        route(HTTP.GET, "/admin", AdminHandler.Factory("admin.nyml"));
        route(HTTP.POST, "/admin-update", AdminUpdateHandler.Factory());
    }

    public isUserResponse(
        _context: Context, request: Request, response: Response): void {

        def u = request.QueryString["u"];
        def e = request.QueryString["e"];
        mutable ok = null;
        using(db = openDatabase()) {
            if(!String.IsNullOrEmpty(u)) {
                mutable command = db.createCommand(
                    "SELECT Name FROM Users WHERE Name = @Name") <- [
                        "@Name" = u,
                    ];
                ok = command.executeScalar() :> string;
            }
            else when(!String.IsNullOrEmpty(e)) {
                mutable command = db.createCommand(
                    "SELECT Email FROM Auth WHERE Email = @Email") <- [
                        "@Email" = e,
                    ];
                ok = command.executeScalar() :> string;
            }
        }
        response.Status = ok ? (200, "OK") : (404, "Not Found");
    }

    public usersRedirectPageResponse(
        context: Context, request: Request, response: Response): void {

        def num = context.Vars["num"];
        def from = !String.IsNullOrEmpty(num) ? Int32.Parse(num) : 1;
        def to = from + 24; //TODO: configurable?

        response["Location"] = $"$(getDefaultPrefix(request))/u/$from-$to";
        response.Status = (303, "See Other");
    }

    public createCategoryResponse(
        context: Context, request: Request, response: Response): void {

        def name = context.Vars["name"];
        def colour = context.Vars["colour"];
        mutable ok = false;
        mutable catid = 0U;

        using(fdb = openForumDatabase()) {
            def db = fdb.Database;
            def uid = fdb.getUserIdFromCookie(request, STOK.INSECURE);
            def command = db.createCommand(
                "INSERT INTO Categories(Name, UserId, CreateDate, Colour) "
                    "VALUES(@Name, @UserId, @CreateDate, @Colour)") <- [
                "@Name" = name,
                "@UserId" = uid,
                "@CreateDate" = Date.NowTicks,
                "@Colour" = colour,
            ];
            def result = command.executeNonQuery();
            ok = (result > 0);

            when(ok) {
                def command2 = db.createCommand(
                    "SELECT Id FROM Categories WHERE Name = @Name") <- [
                        "@Name" = name,
                    ];
                def result2 = command2.executeScalar() :> uint?;

                if(result2 != null) {
                    catid = result2 :> uint;
                } else {
                    ok = false;
                }
            }
        }

        if(ok) {
            response["Location"] = $"$(getDefaultPrefix(request))/c/$catid";
            response.Status = (303, "See Other");
        } else {
            internalServerErrorResponse(context, request, response);
        }
    }

    public previewPostResponse(
        context: Context, request: Request, response: Response): void {

        def r = context.Vars["r"];
        def t = context.Vars["t"];
        def (ok, result) = renderPost(r, t);

        if(ok) {
            response.append(result);
            response.Status = (200, "OK");
        } else {
            internalServerErrorResponse(context, request, response);
        }
    }

    public createPostResponse(
        context: Context, request: Request, response: Response): void {

        mutable ok = false;
        mutable output = "";
        mutable post_id, thid;
        mutable utc_now;
        using(fdb = openForumDatabase()) {
            def userid = fdb.getUserIdFromCookie(request, STOK.INSECURE);

            when(userid != 0) {
                def reply_to = UInt32.Parse(context.Vars["p"]);
                thid = UInt32.Parse(context.Vars["th"]);
                def transform = context.Vars["r"];
                def content = context.Vars["t"];
                def tags = context.Vars["tg"];

                (post_id, output, utc_now) =
                    fdb.createPost(userid, thid, reply_to, transform, content, tags);
                ok = (post_id > 0);
            }
        }

        if(ok) {
            def json = JsonObject() <- [
                "p" = post_id,
                "o" = output,
                "t" = Date.FromTicks(utc_now),
            ];
            response.append(json.toString());
            response.Status = (200, "OK");
        } else {
            internalServerErrorResponse(context, request, response);
        }
    }

    public updatePostResponse(
        context: Context, request: Request, response: Response): void {

        mutable ok = false;
        mutable output = "";
        mutable tags;
        mutable post_id;
        using(fdb = openForumDatabase()) {
            def database = fdb.Database;
            def userid = fdb.getUserIdFromCookie(request, STOK.INSECURE);

            when(userid != 0) {
                post_id = UInt32.Parse(context.Vars["p"]);
                def transform = context.Vars["r"];
                def content = context.Vars["t"];
                (ok, output) = renderPost(transform, content);

                when(ok) {
                    database.withTransaction(db => {
                        def commmand = db.createCommand(
                            "UPDATE Posts SET InputContent=@InputContent, "
                                "OutputContent=@OutputContent, Transform=@Transform WHERE "
                                "Id=@Id") <- [
                            "@InputContent" = content,
                            "@OutputContent" = output,
                            "@Transform" = transform,
                            "@Id" = post_id,
                        ];

                        def result2 = commmand.executeNonQuery();
                        when(result2 <= 0) {
                            ok = false;
                        }

                        when(ok) {
                            def tg = context.Vars["tg"];
                            tags = tagsFromTagString(tg);
                            fdb.deleteExistingPostTags(post_id);
                            def ids = fdb.getTagIds(tags);
                            _ = fdb.insertPostTags(post_id, ids);
                        }
                    }, ex => {
                        internalServerError(ex);
                    });
                }
            }
        }

        if(ok) {
            def json = JsonObject() <- [
                "p" = post_id,
                "o" = output,
            ];
            when(tags != null) {
                json["tg"] = encodeTags(tags);
            }
            response.append(json.toString());
            response.Status = (200, "OK");
        } else {
            internalServerErrorResponse(context, request, response);
        }
    }

    public getPostDataResponse(
        context: Context, request: Request, response: Response): void {

        mutable ok = false;
        mutable input = "", output = "", transform = "";
        mutable post_id;
        mutable tags = null;
        using(fdb = openForumDatabase()) {
            def db = fdb.Database;
            def userid = fdb.getUserIdFromCookie(request, STOK.INSECURE);

            when(userid != 0) {
                post_id = UInt32.Parse(context.Vars["p"]);
                def commmand = db.createCommand(
                    "SELECT InputContent, OutputContent, Transform FROM Posts WHERE "
                        "Id=@Id") <- [
                    "@Id" = post_id,
                ];

                commmand.execute(reader => {
                    input = reader.getValue("InputContent");
                    output = reader.getValue("OutputContent");
                    transform = reader.getValue("Transform");
                });

                tags = fdb.getPostTags(post_id);

                ok = true;
            }
        }

        if(ok) {
            def json = JsonObject() <- [
                "p" = post_id,
                "o" = output,
                "i" = input,
                "t" = transform,
            ];
            when(tags != null) {
                json["tg"] = encodeTags(tags);
            }
            response.append(json.toString());
            response.Status = (200, "OK");
        } else {
            internalServerErrorResponse(context, request, response);
        }
    }

    public renderPost(method: string, text: string): bool * string {
        def bbc = getModuleInterface.[ITextTransform]("BbCode");
        def txt = getModuleInterface.[ITextTransform]("Textile");
        def htm = getModuleInterface.[ITextTransform]("HtmlSanitizer");
        def oem = getModuleInterface.[ITextTransform]("OEmbed");
        mutable ok = true;
        mutable pipeline = htm.transform >> oem.transform;

        match(method) {
            | "bbcode" => pipeline = bbc.transform >> pipeline;
            | "textile" => pipeline = txt.transform >> pipeline;
            | "htmlsan" => ()
            | _ => ok = false;
        }

        def output = ok ? pipeline(text) : "";

        (ok, output);
    }

    public validatePassword(pw: string): bool {
        def a = pw.Length >= 8;
        def b = pw.Length <= 60;
        def c = Regex("[a-z]").IsMatch(pw);
        def d = Regex("[A-Z]").IsMatch(pw);
        def e = Regex("[0-9]").IsMatch(pw);
        def f = Regex(<#[ !"#$%&'()*+,-./:;<=>?@\[\\\]^_`{|}~]#>).IsMatch(pw);
        def result = a && b && c && d && e && f;
        def p(x) { x ? "T" : "F" }
        Log.d("validatePassword(): l{0} L{1} a{2} A{3} 9{4} %{5} -> {6}",
            p(a), p(b), p(c), p(d), p(e), p(f), result);
        result;
    }

    public filterTestResponse(
        context: Context, request: Request, response: Response): void {

        def filter = getModuleInterface.[ITextTransform]("Filter");
        if(filter != null) {
            def i = request.QueryString["input"];
            def input = i ? i : ("Use ?input=xyz on "
                "the query string to test a different phrase!");
            def output = input ? filter.transform(input) : "";

            response.append("<html><body><h1>Filter Test</h1>"
                $"<p>Input: $input</p><p>Output: $output</p>"
                "</body></html>");
            response.Status = (200, "OK");
        } else {
            internalServerErrorResponse(context, request, response);
        }
    }

    public updatePrefsResponse(
        context: Context, request: Request, response: Response): void {

        def m = context.Vars["m"];
        def l = context.Vars["l"];
        def c = context.Vars["c"];
        def r = context.Vars["r"];
        def f = context.Vars["f"];
        mutable ok = false;
        using(fdb = openForumDatabase()) {
            def db = fdb.Database;
            def userid = fdb.getUserIdFromCookie(request, STOK.INSECURE);

            when(userid != 0) {
                def command = db.createCommand(
                    "UPDATE Users SET Location=@Location, Motto=@Motto, "
                        "Colour=@Colour, Transform=@Transform, Font=@Font WHERE "
                        "Id=@Id") <- [
                    "@Location" = l,
                    "@Motto" = m,
                    "@Colour" = c,
                    "@Transform" = r,
                    "@Font" = f,
                    "@Id" = userid,
                ];
                def x = command.executeNonQuery();
                ok = (1 == x);
            }
        }

        if(ok) {
            response.Status = (200, "OK");
        } else {
            internalServerErrorResponse(context, request, response);
        }
    }

    public categoryListResponse(
        _context: Context, _request: Request, response: Response): void {

        using(db = openDatabase()) {
            def command = db.createCommand("SELECT Name FROM Categories");
            def cats = List();
            command.execute(reader => {
                def c = reader.getValue("Name");
                when(!String.IsNullOrEmpty(c)) {
                    cats.Add(c);
                }
            });
            def json = JsonObject() <- [ "categories" = cats ];
            response.append(json.toString());
        }
    }

    public thumbPostResponse(
        context: Context, request: Request, response: Response): void {

        def on = !String.IsNullOrEmpty(context.Vars["on"]);
        def pid = UInt32.Parse(context.Vars["p"]);

        using(fdb = openForumDatabase()) {
            def uid = fdb.getUserIdFromCookie(request, STOK.INSECURE);
            fdb.thumbPost(pid, uid, on);
        }
        response.Status = (200, "OK");
    }

    public starPostResponse(
        context: Context, request: Request, response: Response): void {

        def on = !String.IsNullOrEmpty(context.Vars["on"]);
        def pid = UInt32.Parse(context.Vars["p"]);

        using(fdb = openForumDatabase()) {
            def uid = fdb.getUserIdFromCookie(request, STOK.INSECURE);

            fdb.starPost(pid, uid, on);
        }
        response.Status = (200, "OK");
    }

    public override internalServerError(ex: Exception): void {
        Log.e("INTERNAL SERVER ERROR!\n{0}\n{1}",
            ex.Message, ex.GetExtendedStackTrace());
    }

    public getDefaultPrefix(request: Request): string {
        if(request.IsSecure) {
            DefaultSecurePrefix
        } else {
            DefaultInsecurePrefix
        }
    }

    public tagsFromTagString(tag_string: string): array[string] {
        def tag_input = tag_string ?
            tag_string.Split(array['\0'], 5,
                StringSplitOptions.RemoveEmptyEntries) : array(0);

        mutable tags = array(5);
        mutable i = 0;

        foreach(t in tag_input) {
            mutable u = t.Split(array['\0'], 2)[0];
            u = Uri.UnescapeDataString(u);
            when(u.Length > 30) {
                u = u.Substring(0, 30);
            }
            tags[i] = u.Trim();
            i++;
        }

        Array.Resize(ref tags, i);
        tags;
    }

    public encodeTags(tags: array[string]): string {
        mutable esc = array(5);
        when(tags != null) {
            mutable i = 0;
            foreach(t in tags) {
                when(!String.IsNullOrEmpty(t)) {
                    esc[i] = Uri.EscapeDataString(t);
                    i++;
                }
            }
            Array.Resize(ref esc, i);
        }
        match(esc.Length) {
            | 0 => null
            | _ => Uri.EscapeDataString(String.Join("\0", esc))
        }
    }

    public sendEmail(
        from: string, to: list[string], path: string, data: PageData): void {

        def smtp = getModuleInterface.[ISmtp]("Smtp");
        def email = smtp.makeEmail();

        // Maybe abuse of the 'page' concept, but renderTitle()
        // and renderContent() will provide what we need here...
        def ext = Path.GetExtension(path).Substring(1);
        def renderer = Renderers[ext];
        def stream = openLocalFile(path);
        def text = renderer.loadPage(path, stream);

        when(text != null) {
            email.To = to;
            email.From = from;
            email.Subject = text.renderTitle(data);
            email.Html = true;
            email.Body = text.renderContent(data);
            email.send();
        }
    }

    public openForumDatabase(name = "default"): ForumDatabase {
        ForumDatabase(this, name);
    }
}


} // namespace forum
