using System;
using System.Collections.Generic;
using System.IO;
using System.Math;
using System.Text;

using Nemerle.Extensions;

using httplib;


namespace forum {

[YamlRecord]
public class ForumServerConfiguration: ServerConfiguration {

    public SiteName: string { get; set; }
    public DefaultAvatarImage: string { get; set; }
};


public class ForumServer: Server {

    SessionToken: SessionToken { get; private set; }

    public new Configuration: ForumServerConfiguration {
        get { base.Configuration :> ForumServerConfiguration }
    }

    public this(path: string) {
        def config = loadConfiguration.[ForumServerConfiguration](path);
        this(config);
    }

    public this(config: ForumServerConfiguration) {
        base(config);

        SessionToken = SessionToken(this);

        route([ (HTTP.GET, "/"),
            (HTTP.GET, "/index") ], IndexHandler.Factory("index.nyml"));

        route(HTTP.GET, "/nav-{{action}}", NavHandler.Factory(HTTP.GET));
        route(HTTP.POST, "/nav-{{action}}", NavHandler.Factory(HTTP.POST));
        route(HTTP.POST, "/tok-{{action}}", TokenHandler.Factory(HTTP.POST));

        route(HTTP.GET, "/signup", SignupHandler.Factory(false));
        route(HTTP.POST, "/signup-submit", SignupHandler.Factory(true));

        route(HTTP.GET, "/is-user", isUserResponse);

        route([ (HTTP.GET, "/u"),
            (HTTP.GET, "/u/{{num:[0-9]+}}") ], usersRedirectPageResponse);
        route(HTTP.GET, "/u/{{from:[0-9]+}}-{{to:[0-9]+}}",
            UsersHandler.Factory("users.nyml", true));
        route(HTTP.GET, "/u/{{user:[A-Za-z_].*}}",
            UsersHandler.Factory("user.nyml", false));

        route(HTTP.POST, "/prefs", updatePrefsResponse);

        route(HTTP.GET, "/p/{{num:[0-9]+}}", PostHandler.Factory("post.nyml"));

        route(HTTP.POST, "/th/new",
            NewThreadHandler.Factory("newthread.nyml"));

        route(HTTP.POST, "/createthread", CreateThreadHandler.Factory());

        route([ (HTTP.GET, "/th/{{id:[0-9]+}}"),
                (HTTP.GET, "/th/{{id:[0-9]+}}/{{from:[0-9]+}}-{{to:[0-9]+}}") ],
            ThreadHandler.Factory("thread.nyml"));

        route(HTTP.GET, "/tg/{{tag:.*}}", TagHandler.Factory("tag.nyml"));

        route(HTTP.GET, "/c/{{id:[0-9]+}}", CategoryHandler.Factory("cat.nyml"));

        route(HTTP.POST, "/preview-post", previewPostResponse);
        route(HTTP.POST, "/createpost", createPostResponse);
        route(HTTP.POST, "/update-post", updatePostResponse);
        route(HTTP.POST, "/get-post", getPostDataResponse);

        route([(HTTP.POST, "/window"),
            (HTTP.GET, "/window")], // for testing only?
            FragmentHandler.Factory("editwindow.nyml"));

        route(HTTP.GET, "/filter", filterTestResponse);

        route(HTTP.GET, "/custom-styles.css",
            CssHandler.Factory("custom-styles.nyml", "font_data.yml"));

        route(HTTP.POST, "/upload-avatar", UploadAvatarHandler.Factory());
        route(HTTP.GET,
            "/avatar/{{size:[0-9]+}}/{{user:.*}}", AvatarImageHandler.Factory());

        route(HTTP.POST, "/thumb", thumbPostResponse);
        route(HTTP.POST, "/star", starPostResponse);
    }

    public isUserResponse(
        _context: Context, request: Request, response: Response): void {

        def u = request.QueryString["u"];
        def e = request.QueryString["e"];
        mutable ok = null;
        if(!String.IsNullOrEmpty(u)) {
            mutable command = Database.createCommand(
                "SELECT Name FROM Users WHERE Name = @Name") <- [
                    "@Name" = u,
                ];
            ok = command.executeScalar() :> string;
        }
        else when(!String.IsNullOrEmpty(e)) {
            mutable command = Database.createCommand(
                "SELECT Email FROM Auth WHERE Email = @Email") <- [
                    "@Email" = e,
                ];
            ok = command.executeScalar() :> string;
        }
        response.Status = ok ? (200, "OK") : (404, "Not Found");
    }

    public usersRedirectPageResponse(
        context: Context, request: Request, response: Response): void {

        def num = context.Vars["num"];
        def from = !String.IsNullOrEmpty(num) ? Int32.Parse(num) : 1;
        def to = from + 24; //TODO: configurable?

        response["Location"] = $"$(getDefaultPrefix(request))/u/$from-$to";
        response.Status = (303, "See Other");
    }

    public previewPostResponse(
        context: Context, request: Request, response: Response): void {

        def r = context.Vars["r"];
        def t = context.Vars["t"];
        def (ok, result) = renderPost(r, t);

        if(ok) {
            response.append(result);
            response.Status = (200, "OK");
        } else {
            internalServerErrorResponse(context, request, response);
        }
    }

    public createPostResponse(
        context: Context, request: Request, response: Response): void {

        mutable ok = false;
        mutable output = "";
        mutable post_id, thid;
        mutable utc_now;
        def userid = getUserIdFromCookie(request, STOK.INSECURE);

        when(userid != 0) {
            def reply_to = UInt32.Parse(context.Vars["p"]);
            thid = UInt32.Parse(context.Vars["th"]);
            def transform = context.Vars["r"];
            def content = context.Vars["t"];
            def tags = context.Vars["tg"];

            (post_id, output, utc_now) =
                createPost(userid, thid, reply_to, transform, content, tags);
            ok = (post_id > 0);
        }

        if(ok) {
            def json = JsonObject() <- [
                "p" = post_id,
                "o" = output,
                "t" = Date.FromTicks(utc_now),
            ];
            response.append(json.toString());
            response.Status = (200, "OK");
        } else {
            internalServerErrorResponse(context, request, response);
        }
    }

    public updatePostResponse(
        context: Context, request: Request, response: Response): void {

        mutable ok = false;
        mutable output = "";
        mutable tags;
        mutable post_id;
        def userid = getUserIdFromCookie(request, STOK.INSECURE);

        when(userid != 0) {
            post_id = UInt32.Parse(context.Vars["p"]);
            def transform = context.Vars["r"];
            def content = context.Vars["t"];
            (ok, output) = renderPost(transform, content);

            when(ok) {
                Database.withTransaction(db => {
                    def commmand = db.createCommand(
                        "UPDATE Posts SET InputContent=@InputContent, "
                            "OutputContent=@OutputContent, Transform=@Transform WHERE "
                            "Id=@Id") <- [
                        "@InputContent" = content,
                        "@OutputContent" = output,
                        "@Transform" = transform,
                        "@Id" = post_id,
                    ];

                    def result2 = commmand.executeNonQuery();
                    when(result2 <= 0) {
                        ok = false;
                    }

                    when(ok) {
                        def tg = context.Vars["tg"];
                        tags = tagsFromTagString(tg);
                        deleteExistingPostTags(post_id);
                        def ids = getTagIds(tags, false);
                        _ = insertPostTags(post_id, ids);
                    }
                }, ex => {
                    internalServerError(ex);
                });
            }
        }

        if(ok) {
            def json = JsonObject() <- [
                "p" = post_id,
                "o" = output,
            ];
            when(tags != null) {
                json["tg"] = encodeTags(tags);
            }
            response.append(json.toString());
            response.Status = (200, "OK");
        } else {
            internalServerErrorResponse(context, request, response);
        }
    }

    public getPostDataResponse(
        context: Context, request: Request, response: Response): void {

        mutable ok = false;
        mutable input = "", output = "", transform = "";
        mutable post_id;
        def userid = getUserIdFromCookie(request, STOK.INSECURE);
        mutable tags = null;

        when(userid != 0) {
            post_id = UInt32.Parse(context.Vars["p"]);
            def commmand = Database.createCommand(
                "SELECT InputContent, OutputContent, Transform FROM Posts WHERE "
                    "Id=@Id") <- [
                "@Id" = post_id,
            ];

            commmand.execute(reader => {
                input = reader.getValue("InputContent");
                output = reader.getValue("OutputContent");
                transform = reader.getValue("Transform");
            });

            tags = getPostTags(post_id);

            ok = true;
        }

        if(ok) {
            def json = JsonObject() <- [
                "p" = post_id,
                "o" = output,
                "i" = input,
                "t" = transform,
            ];
            when(tags != null) {
                json["tg"] = encodeTags(tags);
            }
            response.append(json.toString());
            response.Status = (200, "OK");
        } else {
            internalServerErrorResponse(context, request, response);
        }
    }

    public renderPost(method: string, text: string): bool * string {
        def bbc = getModuleInterface.[ITextTransform]("BbCode");
        def txt = getModuleInterface.[ITextTransform]("Textile");
        def htm = getModuleInterface.[ITextTransform]("HtmlSanitizer");
        mutable ok = true;

        def pre =
            match(method) {
                | "bbcode" => bbc.transform(text);
                | "textile" => txt.transform(text);
                | "htmlsan" => text;
                | _ => { ok = false; ""; }
            };

        (ok, htm.transform(pre));
    }

    public filterTestResponse(
        context: Context, request: Request, response: Response): void {

        def filter = getModuleInterface.[ITextTransform]("Filter");
        if(filter != null) {
            def i = request.QueryString["input"];
            def input = i ? i : ("Use ?input=xyz on "
                "the query string to test a different phrase!");
            def output = input ? filter.transform(input) : "";

            response.append("<html><body><h1>Filter Test</h1>"
                $"<p>Input: $input</p><p>Output: $output</p>"
                "</body></html>");
            response.Status = (200, "OK");
        } else {
            internalServerErrorResponse(context, request, response);
        }
    }

    public updatePrefsResponse(
        context: Context, request: Request, response: Response): void {

        def m = context.Vars["m"];
        def l = context.Vars["l"];
        def c = context.Vars["c"];
        def r = context.Vars["r"];
        def f = context.Vars["f"];
        def userid = getUserIdFromCookie(request, STOK.INSECURE);
        mutable ok = false;

        when(userid != 0) {
            def command = Database.createCommand(
                "UPDATE Users SET Location=@Location, Motto=@Motto, "
                    "Colour=@Colour, Transform=@Transform, Font=@Font WHERE "
                    "Id=@Id") <- [
                "@Location" = l,
                "@Motto" = m,
                "@Colour" = c,
                "@Transform" = r,
                "@Font" = f,
                "@Id" = userid,
            ];
            def x = command.executeNonQuery();
            ok = (1 == x);
        }

        if(ok) {
            response.Status = (200, "OK");
        } else {
            internalServerErrorResponse(context, request, response);
        }
    }

    public thumbPostResponse(
        context: Context, request: Request, response: Response): void {

        def on = !String.IsNullOrEmpty(context.Vars["on"]);
        def pid = UInt32.Parse(context.Vars["p"]);
        def uid = getUserIdFromCookie(request, STOK.INSECURE);

        thumbPost(pid, uid, on);
        response.Status = (200, "OK");
    }

    public starPostResponse(
        context: Context, request: Request, response: Response): void {

        def on = !String.IsNullOrEmpty(context.Vars["on"]);
        def pid = UInt32.Parse(context.Vars["p"]);
        def uid = getUserIdFromCookie(request, STOK.INSECURE);

        starPost(pid, uid, on);
        response.Status = (200, "OK");
    }

    public override internalServerError(ex: Exception): void {
        Log.e("INTERNAL SERVER ERROR!\n{0}\n{1}",
            ex.Message, ex.GetExtendedStackTrace());
    }

    public getDefaultPrefix(request: Request): string {
        if(request.IsSecure) {
            DefaultSecurePrefix
        } else {
            DefaultInsecurePrefix
        }
    }

    public getUserCount(): int {
        def commmand = Database.createCommand("SELECT COUNT(Name) FROM Users");
        def ex = commmand.executeScalar() :> long;
        unchecked ex :> int;
    }

    public getPostCount(thread_id: uint): int {
        def commmand = Database.createCommand(
            "SELECT COUNT(Id) FROM Posts WHERE ThreadId = @ThreadId") <- [
                "@ThreadId" = thread_id,
            ];
        def ex = commmand.executeScalar() :> long;
        unchecked ex :> int;
    }

    public getThreadCount(cat_id: uint): int {
        def commmand = Database.createCommand(
            "SELECT COUNT(Id) FROM Threads WHERE CategoryId = @CategoryId") <- [
                "@CategoryId" = cat_id,
            ];
        def ex = commmand.executeScalar() :> long;
        unchecked ex :> int;
    }

    public getUserId(name: string): uint {
        def commmand = Database.createCommand(
            "SELECT Id FROM Users WHERE Name = @Name") <- [ "@Name" = name ];
        def u = commmand.executeScalar() :> uint?;
        u ? (u :> uint) : 0;
    }

    public getUserName(user_id: uint): string {
        def commmand = Database.createCommand(
            "SELECT Name FROM Users WHERE Id = @Id") <- [ "@Id" = user_id ];
        commmand.executeScalar() :> string;
    }

    public getCategoryName(cat_id: uint): string {
        def commmand = Database.createCommand(
            "SELECT Name FROM Categories WHERE Id = @Id") <- [ "@Id" = cat_id ];
        commmand.executeScalar() :> string;
    }

    public registerSessionToken(
        tok: SessionTokenType, id: uint): bool * string * DateTime {

        SessionToken.register(tok, id);
    }

    public getUserIdFromSessionToken(
        tok: SessionTokenType, token: string): uint {

        SessionToken.getUserId(tok, token);
    }

    public getUserIdFromCookie(
        request: Request, tok: SessionTokenType): uint {
        def cookiename = match(tok) {
            | INSECURE => "_isession"
            | SECURE => "_session"
            | _ => null
        };
        def cookies = request.Cookies;
        def cookie = cookies ? cookies[cookiename] : null;
        cookie ? getUserIdFromSessionToken(tok, cookie) : 0U;
    }

    public tagsFromTagString(tag_string: string): array[string] {
        def tag_input = tag_string ?
            tag_string.Split(array['\0'], 5,
                StringSplitOptions.RemoveEmptyEntries) : array(0);

        mutable tags = array(5);
        mutable i = 0;

        foreach(t in tag_input) {
            mutable u = t.Split(array['\0'], 2)[0];
            u = Uri.UnescapeDataString(u);
            when(u.Length > 30) {
                u = u.Substring(0, 30);
            }
            tags[i] = u.Trim();
            i++;
        }

        Array.Resize(ref tags, i);
        tags;
    }

    public getExistingTagId(tag: string): uint? {
        (Database.createCommand(
            "SELECT Id From Tags WHERE Name=@Name") <- [ "@Name" = tag ]).
            executeScalar() :> uint?;
    }

    public getExistingTag(tag_id: uint): string {
        if(tag_id > 0) {
            (Database.createCommand(
                "SELECT Name From Tags WHERE Id=@Id") <- [ "@Id" = tag_id ]).
                executeScalar() :> string;
        } else {
            null;
        }
    }

    public getTagIds(tags: array[string],
        use_transaction = true): array[uint] {

        mutable result = array((tags != null) ? tags.Length : 0);
        when(tags != null) {
            Database.withTransaction(db => {
                mutable i = 0;
                foreach(t in tags) {
                    def id = getExistingTagId(t);
                    if(id != null) {
                        result[i] = id :> uint;
                    } else {
                        def commmand2 = db.createCommand("INSERT Into Tags(Name) "
                            "VALUES(@Name)") <- [ "@Name" = t ];
                        def result2 = commmand2.executeNonQuery();
                        when(result2 > 0) {
                            def id = getExistingTagId(t);
                            if(id != null) {
                                result[i] = id :> uint;
                            } else {
                                Log.e("Could not insert Tag '{0}'!", t);
                            }
                        }
                    }
                    i++;
                }
            }, ex => {
                internalServerError(ex);
            }, use_transaction);
        }
        result;
    }

    public deleteExistingPostTags(post_id: uint): void {
        def command = Database.createCommand(
            "DELETE FROM PostTags WHERE (PostId = @PostId)") <- [
                "@PostId" = post_id
            ];
        _ = command.executeNonQuery();
    }

    public insertPostTags(post_id: uint, tag_ids: array[uint]): bool {
        mutable result = true;
        foreach(id in tag_ids) {
            def command = Database.createCommand(
                "INSERT INTO PostTags(PostId, TagId) VALUES(@PostId, @TagId)") <- [
                    "@PostId" = post_id,
                    "@TagId" = id,
                ];
            def result2 = command.executeNonQuery();
            when(result2 <= 0) {
                Log.e("Could not insert PostTags({0}, {1})", post_id, id);
                result = false;
            }
        }
        result;
    }

    public getPostTags(post_id: uint): array[string] {
        mutable tags = array(5);
        def tag_ids = array(5);
        def command = Database.createCommand(
            "SELECT TagId FROM PostTags WHERE PostId=@PostId") <- [
                "@PostId" = post_id,
            ];
        _ = command.execute((j, reader) => {
            tag_ids[j] = reader.getValue("TagId", 0U);
        });
        mutable k = 0;
        for(mutable j = 0; j < tag_ids.Length; j++) {
            def t = getExistingTag(tag_ids[j]);
            when(t != null) {
                tags[k] = t;
                k++;
            }
        }
        if(k > 0) {
            Array.Resize(ref tags, k);
            tags;
        } else {
            null;
        }
    }

    public encodeTags(tags: array[string]): string {
        mutable esc = array(5);
        when(tags != null) {
            mutable i = 0;
            foreach(t in tags) {
                when(!String.IsNullOrEmpty(t)) {
                    esc[i] = Uri.EscapeDataString(t);
                    i++;
                }
            }
            Array.Resize(ref esc, i);
        }
        match(esc.Length) {
            | 0 => null
            | _ => Uri.EscapeDataString(String.Join("\0", esc))
        }
    }

    public createPost(user_id: uint, thread_id: uint, reply_to: uint?,
        transform: string, input: string, tag_string: string = null,
        use_transaction = true): (uint * string * long) {

        mutable post_id = 0U;
        mutable output = "";
        mutable utc_now = Date.NowTicks;
        mutable ok = false;
        mutable render_ok = false;

        when(user_id > 0) {
            (render_ok, output) = renderPost(transform, input);
        }
        when(render_ok) {
            Database.withTransaction(db => {
                def commmand = db.createCommand(
                    "INSERT INTO Posts(InputContent, OutputContent, "
                        "Transform, UserId, ThreadId, CreateDate) VALUES("
                        "@InputContent, @OutputContent, "
                        "@Transform, @UserId, @ThreadId, @CreateDate)") <- [
                    "@InputContent" = input,
                    "@OutputContent" = output,
                    "@Transform" = transform,
                    "@UserId" = user_id,
                    "@ThreadId" = thread_id,
                    "@CreateDate" = utc_now,
                ];

                def result = commmand.executeNonQuery();
                when(result > 0) {
                    def commmand2 = db.createCommand(
                        "SELECT Id FROM Posts WHERE "
                            "UserId=@UserId AND CreateDate=@CreateDate") <- [
                        "@UserId" = user_id,
                        "@CreateDate" = utc_now,
                    ];
                    def result2 = commmand2.executeScalar() :> uint?;
                    post_id = result2 ? (result2 :> uint) : 0U;

                    when(post_id > 0U) {
                        if(reply_to != null) {
                            def commmand3 = db.createCommand(
                                "INSERT INTO Replies(PostId, ReplyTo) VALUES("
                                    "@PostId, @ReplyTo)") <- [
                                "@PostId" = post_id,
                                "@ReplyTo" = reply_to :> uint,
                            ];
                            def result3 = commmand3.executeNonQuery();
                            when(result3 > 0) {
                                def command4 = db.createCommand(
                                    "UPDATE Posts SET ReplyTo=@ReplyTo "
                                        "WHERE Id=@Id") <- [
                                    "@ReplyTo" = reply_to :> uint,
                                    "@Id" = post_id,
                                ];
                                def result4 = command4.executeNonQuery();
                                when(result4 > 0) {
                                    ok = true;
                                }
                            }
                        } else {
                            ok = true;
                        }
                    }

                    when(ok) {
                        def tags = tagsFromTagString(tag_string);
                        def ids = getTagIds(tags, false);
                        _ = insertPostTags(post_id, ids);
                    }
                }
            }, ex => {
                internalServerError(ex);
            }, use_transaction);
        }

        if(ok) {
            (post_id, output, utc_now);
        } else {
            (0U, "", 0L);
        }
    }

    public thumbPost(post_id: uint, user_id: uint, on: bool,
        use_transaction = true): void {

        Log.d("thumbPost(p:{0}, u:{1}, {2})", post_id, user_id, on);
        Database.withTransaction(db => {
            def check = isThumbPost(post_id, user_id);
            when(on != check) {
                def command = if(on) {
                    db.createCommand(
                        "INSERT INTO Thumbs(PostId, UserId) "
                            "VALUES (@PostId, @UserId)") <- [
                        "@PostId" = post_id,
                        "@UserId" = user_id,
                    ];
                } else {
                    db.createCommand(
                        "DELETE FROM Thumbs WHERE "
                            "PostId = @PostId AND UserId = @UserId") <- [
                        "@PostId" = post_id,
                        "@UserId" = user_id,
                    ];
                }
                def _result = command.executeNonQuery();
                Log.d("thumbPost {0} -> {1}", (on ? "insert" : "delete"), _result);
                def command2 = db.createCommand(
                    "SELECT UserId From Posts WHERE Id = @Id") <- [
                        "@Id" = post_id,
                    ];
                def uid = command2.executeScalar() :> uint;
                when(uid != user_id) {
                    addPointsToUser(uid, on ? 5 : -5, false);
                }
            }
        }, ex => {
            internalServerError(ex);
        }, use_transaction);
    }

    public isThumbPost(post_id: uint, user_id: uint): bool {
        def command = Database.createCommand(
            "SELECT COUNT(Id) FROM Thumbs WHERE "
                "PostId=@PostId AND UserId=@UserId") <- [
            "@PostId" = post_id,
            "@UserId" = user_id,
        ];
        def result = command.executeScalar() :> long;
        result > 0;
    }

    public starPost(post_id: uint, user_id: uint, on: bool,
        use_transaction = true): void {

        Log.d("starPost(p:{0}, u:{1}, {2})", post_id, user_id, on);
        Database.withTransaction(db => {
            def check = isStarPost(post_id, user_id);
            when(on != check) {
                def command = if(on) {
                    db.createCommand(
                        "INSERT INTO Bookmarks(PostId, UserId) "
                            "VALUES (@PostId, @UserId)") <- [
                        "@PostId" = post_id,
                        "@UserId" = user_id,
                    ];
                } else {
                    db.createCommand(
                        "DELETE FROM Bookmarks WHERE "
                            "PostId = @PostId AND UserId = @UserId") <- [
                        "@PostId" = post_id,
                        "@UserId" = user_id,
                    ];
                }
                def _result = command.executeNonQuery();
                Log.d("starPost {0} -> {1}", (on ? "insert" : "delete"), _result);
                def command2 = db.createCommand(
                    "SELECT UserId From Posts WHERE Id = @Id") <- [
                        "@Id" = post_id,
                    ];
                def uid = command2.executeScalar() :> uint;
                when(uid != user_id) {
                    addPointsToUser(uid, on ? 2 : -2, false);
                }
            }
        }, ex => {
            internalServerError(ex);
        }, use_transaction);
    }

    public isStarPost(post_id: uint, user_id: uint): bool {
        def command = Database.createCommand(
            "SELECT COUNT(Id) FROM Bookmarks WHERE "
                "PostId=@PostId AND UserId=@UserId") <- [
            "@PostId" = post_id,
            "@UserId" = user_id,
        ];
        def result = command.executeScalar() :> long;
        result > 0;
    }

    public addPointsToUser(user_id: uint, points: int,
        use_transaction = true): void {

        Database.withTransaction(db => {
            def command = db.createCommand(
                "SELECT Points FROM Users WHERE Id = @Id") <- [
                    "@Id" = user_id,
                ];
            mutable user_points = command.executeScalar() :> int;
            user_points += points;
            def level = pointsToLevel(user_points);

            def command2 = db.createCommand(
                "UPDATE Users SET Points = @Points, Level = @Level WHERE "
                    "Id = @Id") <- [
                "@Points" = user_points,
                "@Level" = level,
                "@Id" = user_id,
            ];
            _ = command2.executeNonQuery();

        }, ex => {
            internalServerError(ex);
        }, use_transaction);
    }

    public pointsToLevel(points: int): float {
        def bias = 25.0f; //TODO: config
        def scale = 3.0f; //TODO: config
        def level = Max(0.0f, Log(points / bias, scale) :> float + 1.0f);
        //Log.t("points {0} -> level {1}", points, level);
        level;
    }
}


} // namespace forum
