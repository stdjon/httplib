using System;
using System.Collections.Generic;
using System.Security.Cryptography;

using Nemerle.Extensions;

using httplib;


namespace forum {

// Security Token types
type SecurityToken = STOK;
public enum STOK {
    | SECURE
    | INSECURE
    | TEMPORARY
}


// TODO: make this configurable
public module SecureTokenExtensions {

    // Token Length (bytes)
    public Length(this tok: SecurityToken): int {
        match(tok) {
            | SECURE => 60
            | INSECURE => 40
            | TEMPORARY => 20
        }
    }

    // Token duration (minutes)
    public Duration(this tok: SecurityToken): int {
        match(tok) {
            | SECURE => 30 * 24 * 60
            | INSECURE => 30
            | TEMPORARY => 1
        }
    }

    public IsSecure(this tok: SecurityToken): bool {
        | SECURE => true
        | _ => false
    }
}


public class ForumServer: Server {

    Rng: RNGCryptoServiceProvider { get; private set; }

    public this(path: string) {
        base(path);

        Rng = RNGCryptoServiceProvider();

        route([ (HTTP.GET, "/"),
            (HTTP.GET, "/index") ], BaseHandler.Factory("index.nyml"));

        route(HTTP.GET, "/nav-{{action}}", NavHandler.Factory(HTTP.GET));
        route(HTTP.POST, "/nav-{{action}}", NavHandler.Factory(HTTP.POST));
        route(HTTP.POST, "/tok-{{action}}", TokenHandler.Factory(HTTP.POST));

        route(HTTP.GET, "/signup", SignupHandler.Factory(false));
        route(HTTP.POST, "/signup-submit", SignupHandler.Factory(true));

        route(HTTP.GET, "/is-user", isUserResponse);

        route([ (HTTP.GET, "/u"),
            (HTTP.GET, "/u/{{num:[0-9]+}}") ], usersRedirectPageResponse);
        route(HTTP.GET, "/u/{{from:[0-9]+}}-{{to:[0-9]+}}",
            UsersHandler.Factory("users.nyml", true));
        route(HTTP.GET, "/u/{{user:[A-Za-z_].*}}",
            UsersHandler.Factory("user.nyml", false));

        route(HTTP.GET, "/p/{{num:[0-9]+}}", PostHandler.Factory("post.nyml"));

        route([ (HTTP.GET, "/th/{{id:[0-9]+}}"),
                (HTTP.GET, "/th/{{id:[0-9]+}}/{{from:[0-9]+}}-{{to:[0-9]+}}") ],
            ThreadHandler.Factory("thread.nyml"));

        route(HTTP.GET, "/c/{{id:[0-9]+}}", CategoryHandler.Factory("cat.nyml"));

        route(HTTP.GET, "/filter", filterTestResponse);
    }

    public isUserResponse(
        _context: Context, request: Request, response: Response): void {

        def u = request.QueryString["u"];
        def e = request.QueryString["e"];
        mutable ok = null;
        if(!String.IsNullOrEmpty(u)) {
            mutable command = Database.createCommand(
                "SELECT Name FROM Users WHERE Name = @Name") <- [
                    "@Name" = u,
                ];
            ok = command.executeScalar() :> string;
        }
        else when(!String.IsNullOrEmpty(e)) {
            mutable command = Database.createCommand(
                "SELECT Email FROM Auth WHERE Email = @Email") <- [
                    "@Email" = e,
                ];
            ok = command.executeScalar() :> string;
        }
        response.Status = ok ? (200, "OK") : (404, "Not Found");
    }

    public usersRedirectPageResponse(
        context: Context, request: Request, response: Response): void {

        def num = context.Vars["num"];
        def from = !String.IsNullOrEmpty(num) ? Int32.Parse(num) : 1;
        def to = from + 24; //TODO: configurable?

        response["Location"] = $"$(getDefaultPrefix(request))/u/$from-$to";
        response.Status = (303, "See Other");
    }

    public filterTestResponse(
        context: Context, request: Request, response: Response): void {

        def filter = getModuleInterface.[mod.IFilter]();
        if(filter != null) {
            def i = request.QueryString["input"];
            def input = i ? i : ("Use ?input=xyz on "
                "the query string to test a different phrase!");
            def output = input ? filter.transform(input) : "";

            response.append("<html><body><h1>Filter Test</h1>"
                $"<p>Input: $input</p><p>Output: $output</p>"
                "</body></html>");
            response.Status = (200, "OK");
        } else {
            internalServerErrorResponse(context, request, response);
        }
    }

    protected override internalServerError(ex: Exception): void {
        Log.e("INTERNAL SERVER ERROR!\n{0}\n{1}",
            ex.Message, ex.GetExtendedStackTrace());
    }

    public getDefaultPrefix(request: Request): string {
        if(request.IsSecure) {
            DefaultSecurePrefix
        } else {
            DefaultInsecurePrefix
        }
    }

    public getUserCount(): int {
        def commmand = Database.createCommand("SELECT COUNT(Name) FROM Users");
        def ex = commmand.executeScalar() :> long;
        unchecked ex :> int;
    }

    public getPostCount(thread_id: uint): int {
        def commmand = Database.createCommand(
            "SELECT COUNT(Id) FROM Posts WHERE ThreadId = @ThreadId") <- [
                "@ThreadId" = thread_id,
            ];
        def ex = commmand.executeScalar() :> long;
        unchecked ex :> int;
    }

    public getThreadCount(cat_id: uint): int {
        def commmand = Database.createCommand(
            "SELECT COUNT(Id) FROM Threads WHERE CategoryId = @CategoryId") <- [
                "@CategoryId" = cat_id,
            ];
        def ex = commmand.executeScalar() :> long;
        unchecked ex :> int;
    }

    public getUserName(user_id: uint): string {
        def commmand = Database.createCommand(
            "SELECT Name FROM Users WHERE Id = @Id") <- [ "@Id" = user_id ];
        commmand.executeScalar() :> string;
    }

    public getCategoryName(cat_id: uint): string {
        def commmand = Database.createCommand(
            "SELECT Name FROM Categories WHERE Id = @Id") <- [ "@Id" = cat_id ];
        commmand.executeScalar() :> string;
    }

    public getSessionToken(tok: SecurityToken): string {
        def bytes = array(tok.Length());
        Rng.GetBytes(bytes);
        def result = Convert.ToBase64String(bytes);
        Log.t("result.Length = {0}", result.Length);
        result;
    }

    public compareSessionTokens(tok: SecurityToken, a: string, b: string): bool {
        def ba = Convert.FromBase64String(a);
        def bb = Convert.FromBase64String(b);
        mutable cmp = a.Length ^ b.Length;
        for(mutable i = 0; i < tok.Length(); i++) {
            def ca = ba[i % a.Length];
            def cb = bb[i % b.Length];
            cmp |= ca ^ cb;
        }
        cmp == 0;
    }

    public registerSessionToken(tok: SecurityToken, id: uint): bool * string * DateTime {
        def token = getSessionToken(tok);
        def expiry = DateTime.Now.
            AddMinutes(tok.Duration()).ToUniversalTime();

        mutable command = Database.createCommand(
            "INSERT INTO Sessions(UserId, Token, ExpiryTime, IsSecure) "
                "VALUES(@UserId, @Token, @ExpiryTime, @IsSecure)") <- [
            "@UserId" = id,
            "@Token" = token,
            "@ExpiryTime" = expiry,
            "@IsSecure" = tok.IsSecure(),
        ];
        def rows = command.executeNonQuery();
        (rows == 1, token, expiry);
    }

    public expireSessionTokens(): void {
        def now = DateTime.Now.ToUniversalTime();

        def command = Database.createCommand(
            "DELETE FROM Sessions WHERE (ExpiryTime < @Now)") <- [ "@Now" = now ];
        def rows = command.executeNonQuery();
        Log.i("Deleted {0} expired session tokens...", rows);
    }

    public getUserIdFromSessionToken(tok: SecurityToken, token: string): uint? {
        expireSessionTokens();
        def commmand = Database.createCommand(
            "SELECT (UserId) FROM Sessions WHERE "
                "(Token = @Token AND IsSecure = @IsSecure)") <- [
            "@Token" = token,
            "@IsSecure" = tok.IsSecure(),
        ];
        commmand.executeScalar() :> uint?;
    }
}


} // namespace forum
