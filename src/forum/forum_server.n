using System;
using System.Collections.Generic;

using Nemerle.Extensions;

using httplib;


namespace forum {

public class ForumServer: Server {

    public this(path: string) {
        base(path);

        route(HTTP.GET, "/", indexResponse);

        route(HTTP.GET, "/nav-{{action}}", navGetResponse);
        route(HTTP.POST, "/nav-{{action}}", navPostResponse);
        route(HTTP.GET, "/signup", signupResponse);
        route(HTTP.POST, "/signup-submit", signupSubmitResponse);
        route(HTTP.GET, "/is-user", isUserResponse);

        route([
            (HTTP.GET, "/u"),
            (HTTP.GET, "/u/{{num:[0-9]+}}")], usersRedirectPageResponse);
        route(HTTP.GET, "/u/{{from:[0-9]+}}-{{to:[0-9]+}}", usersPageResponse);
        route(HTTP.GET, "/u/{{user:[A-Za-z_].*}}", userPageResponse);

        route([
            (HTTP.GET, "/th/{{id:[0-9]+}}/{{rest:.*}}"),
            (HTTP.GET, "/th/{{id:[0-9]+}}")], testResponse);
    }

    public indexResponse(
        _context: Context, request: Request, response: Response): void {

        def data = PageData() <- [
            "DefaultSecurePrefix" = DefaultSecurePrefix,
            "DefaultInsecurePrefix" = DefaultInsecurePrefix,
            "DefaultPrefix" = getDefaultPrefix(request),
        ];
        response.append(renderPage("index.nyml", data));
        response.Status = (200, "OK");
    }

    public navGetResponse(
        context: Context, request: Request, response: Response): void {

        def action = context.Vars["action"];
        def lambda = match(action) {
            | "login" => navLoginResponse
            | "empty" => navEmptyResponse
            | _ => methodNotAllowedResponse
        };
        lambda(context, request, response);
    }

    public navPostResponse(
        context: Context, request: Request, response: Response): void {

        def action = context.Vars["action"];
        def lambda = match(action) {
            | "signin" => navSigninResponse
            | "signout" => navSignoutResponse
            | "signup" => navSignupResponse
            | _ => methodNotAllowedResponse
        }
        lambda(context, request, response);
    }

    public signupResponse(
        _context: Context, request: Request, response: Response): void {

        if(request.IsSecure) {
            def cookies = request.Cookies;
            def u = (cookies != null) ? cookies["_u"] : null;
            mutable user = "Username";
            when(!String.IsNullOrEmpty(u)) {
                user = u;
            }

            def data = PageData() <- [
                "User" = user ?? "Username",
                "DefaultSecurePrefix" = DefaultSecurePrefix,
                "DefaultInsecurePrefix" = DefaultInsecurePrefix,
            ];

            response.append(renderPage("signup.nyml", data));
            response["Set-Cookie"] = "_u=; path=/; secure; httponly";
            response.Status = (200, "OK");
        } else {
            response.append("<html><body><h1>Forbidden!</h1></body></html>");
            response.Status = (403, "Forbidden");
        }
    }

    public signupSubmitResponse(
        context: Context, request: Request, response: Response): void {

        if(request.IsSecure) {
            def user = Uri.UnescapeDataString(context.Vars["user"]);
            def password = Uri.UnescapeDataString(context.Vars["password"]);
            def confirm = Uri.UnescapeDataString(context.Vars["confirm"]);
            def email = Uri.UnescapeDataString(context.Vars["email"]);


            mutable command1 = Database.createCommand("SELECT Name FROM Users "
                "WHERE Name = @Name") <- [ "@Name" = user ];

            mutable command2 = Database.createCommand("SELECT Email FROM Auth "
                "WHERE Email = @Email") <- [ "@Email" =  email ];

            def test1 = command1.executeScalar() :> string;
            def test2 = command2.executeScalar() :> string;

            if(test1 != null || test2 != null || password != confirm) {
                // TODO: also repeat the validation checks from client side
                //   user length (3-25), chars
                //   password length (8-60), chars

                // error with user data.
                // (need a more considered response though...)
                response.append("<html><body><h1>Bad Request!</h1></body></html>");
                response.Status = (400, "Bad Request");
            } else {
                def auth = getModuleInterface.[mod.IPbkdf2Auth]();

                if(auth != null) {
                    def now = DateTime.Now.ToUniversalTime();

                    Database.withTransaction(_ => {
                        mutable command3 = Database.createCommand(
                            "INSERT INTO Users(Name, Level, Points, JoinDate) "
                                "VALUES (@Name, 0, 0, @JoinDate)") <- [
                            "@Name" = user,
                            "@JoinDate" = now,
                        ];
                        _ = command3.executeNonQuery();

                        mutable command4 = Database.createCommand(
                            "SELECT Id FROM Users WHERE "
                                "Name = @Name") <- [ "@Name" = user ];

                        def id = command4.executeScalar() :> uint;

                        def record = auth.createPasswordRecord(password);

                        mutable command5 = Database.createCommand(
                            "INSERT INTO Auth(UserId, PwRecord, Email) "
                                "VALUES (@UserId, @PwRecord, @Email)") <- [
                            "@UserId" = id,
                            "@PwRecord" = record,
                            "@Email" = email,
                        ];
                        _ = command5.executeNonQuery();
                    });

                    response["Set-Cookie"] = $"_auth=$user; path=/; secure; httponly";
                    response["Location"] = DefaultInsecurePrefix + "/";
                    response.Status = (303, "See Other");

                } else {
                   internalServerErrorResponse(context, request, response);
                    Log.w("IPbkdf2Auth module was not found.");
                }
            }
        } else {
            response.append("<html><body><h1>Forbidden!</h1></body></html>");
            response.Status = (403, "Forbidden");
        }
    }

    public isUserResponse(
        _context: Context, request: Request, response: Response): void {

        def u = request.QueryString["u"];
        def e = request.QueryString["e"];
        mutable ok = null;
        if(!String.IsNullOrEmpty(u)) {
            mutable command = Database.createCommand(
                "SELECT Name FROM Users WHERE Name = @Name") <- [
                    "@Name" = Uri.UnescapeDataString(u),
                ];
            ok = command.executeScalar() :> string;
        }
        else when(!String.IsNullOrEmpty(e)) {
            mutable command = Database.createCommand(
                "SELECT Email FROM Auth WHERE Email = @Email") <- [
                    "@Email" = Uri.UnescapeDataString(e),
                ];
            ok = command.executeScalar() :> string;
        }
        response.Status = (ok != null) ? (200, "OK") : (404, "Not Found");
    }

    public usersRedirectPageResponse(
        context: Context, request: Request, response: Response): void {

        def num = context.Vars["num"];
        mutable from = 1;

        when(!String.IsNullOrEmpty(num)) {
            from = Int32.Parse(num);
        }
        def to = from + 24; //TODO: configurable?

        response["Location"] = $"$(getDefaultPrefix(request))/u/$from-$to";
        response.Status = (303, "See Other");
    }

    public usersPageResponse(
        context: Context, request: Request, response: Response): void {

        def from = Int32.Parse(context.Vars["from"]);
        def to = Int32.Parse(context.Vars["to"]);
        def dist = to + 1 - from;
        mutable users: array[Dictionary[string, string]] = array(dist);
        mutable i = 0;

        def command = Database.createCommand(
            "SELECT Name, Level, Points, Motto FROM Users "
                "ORDER BY Name LIMIT @From, @To") <- [
                "@From" = from,
                "@To" = to,
            ];

        using(reader = command.executeReader()) {
            while(reader.Read() && i < dist) {
                def u = reader.GetValue.[string]("Name");
                when(u != null) {
                    def points= reader.GetValue.[int?]("Points", 0);
                    def level = reader.GetValue.[uint?]("Level", 0);
                    def motto = reader.GetValue("Motto", "");
                    users[i] = Dictionary() <- [
                        "Num" = (from + i).ToString(),
                        "Name" = u,
                        "Points" = points.ToString(),
                        "Level" = level.ToString(),
                        "Motto" = motto,
                    ];
                    i++;
                }
            }
        }

        when(i < dist) {
            Array.Resize(ref users, i);
        }

        def prf = getDefaultPrefix(request);
        mutable prev = null;
        mutable next = null;

        Log.d("from = {0} > 1 {1}", from, from > 1);
        when(from > 1) {
            def pf = Math.Max(1, from - dist);
            def pt = pf + dist - 1;
            prev = $"$prf/u/$pf-$pt";
        }
        Log.d("prev = {0}", prev);

        Log.d("to = {0} < {1} {2}", to, getUserCount(), to < getUserCount());
        when(to < getUserCount()) {
            def nf = from + dist;
            def nt = nf + dist - 1;
            next = $"$prf/u/$nf-$nt";
        }
        Log.d("next = {0}", next);

        def data = PageData() <- [
            "DefaultSecurePrefix" = DefaultSecurePrefix,
            "DefaultInsecurePrefix" = DefaultInsecurePrefix,
            "DefaultPrefix" = getDefaultPrefix(request),
            "Users" = users,
            "Prev" = prev,
            "Next" = next,
        ];

        response.append(renderPage("users.nyml", data));
        response.Status = (200, "OK");
    }

    public userPageResponse(
        context: Context, request: Request, response: Response): void {

        def user = context.Vars["user"];

        def command = Database.createCommand(
            "SELECT Motto, Location, JoinDate, Points, Level FROM Users WHERE "
                "Name = @Name") <- [ "@Name" = user ];

        using(reader = command.executeReader()) {
            mutable data = PageData();
            when(reader.Read()) {

                def date = reader.GetValue.[DateTime?]("JoinDate");
                _ = data <- [
                    "User" = user,
                    "Motto" = reader.GetValue("Motto", ""),
                    "Location" = reader.GetValue("Location", ""),
                    "JoinDate" = (date != null) ? date.ToString() : "never",
                    "Points" = reader.GetValue.[int?]("Points", 0),
                    "Level" = reader.GetValue.[uint?]("Level", 0),
                ];
            }

            _ = data <- [
                "DefaultSecurePrefix" = DefaultSecurePrefix,
                "DefaultInsecurePrefix" = DefaultInsecurePrefix,
                "DefaultPrefix" = getDefaultPrefix(request),
            ];

            response.append(renderPage("user.nyml", data));
            response.Status = (200, "OK");
        }
    }

    public navLoginResponse(
        _context: Context, request: Request, response: Response): void {

        if(request.IsSecure) {
            def cookies = request.Cookies;
            def auth = (cookies != null) ? cookies["_auth"] : null;
            def data = PageData() <- [
                "DefaultSecurePrefix" = DefaultSecurePrefix,
                "DefaultInsecurePrefix" = DefaultInsecurePrefix,
                "DefaultPrefix" = getDefaultPrefix(request),
            ];
            if(!String.IsNullOrEmpty(auth)) {
                _ = data <- [ "User" = auth ];
                response.append(renderPage("nav-ok.nyml", data));
                response.Status = (200, "OK");
            } else {
                response.append(renderPage("nav-login.nyml", data));
                response.Status = (200, "OK");
            }
        } else {
            response.append("<html><body><h1>Forbidden!</h1></body></html>");
            response.Status = (403, "Forbidden");
        }
    }

    public navEmptyResponse(
        _context: Context, request: Request, response: Response): void {

        if(request.IsSecure) {
            def data = PageData() <- [
                "DefaultSecurePrefix" = DefaultSecurePrefix,
                "DefaultInsecurePrefix" = DefaultInsecurePrefix,
                "DefaultPrefix" = getDefaultPrefix(request),
            ];
            response.append(renderPage("nav-empty.nyml", data));
            response.Status = (200, "OK");
        } else {
            response.append("<html><body><h1>Forbidden!</h1></body></html>");
            response.Status = (403, "Forbidden");
        }
    }

    public navSigninResponse(
        context: Context, request: Request, response: Response): void {
        if(request.IsSecure) {
            def user = Uri.UnescapeDataString(context.Vars["user"]);
            def password = Uri.UnescapeDataString(context.Vars["password"]);
            def auth = getModuleInterface.[mod.IPbkdf2Auth]();
            def command1 = Database.createCommand(
                "SELECT Id FROM Users WHERE "
                    "Name = @Name") <- [ "@Name" = user ];
            def id = command1.executeScalar() :> uint?;
            mutable record;
            when(id != null) {
                def command2 = Database.createCommand(
                    "SELECT PwRecord FROM Auth WHERE "
                        "UserId = @UserId") <- [ "@UserId" = id ];
                record = command2.executeScalar() :> string;
            }

            def ok = !String.IsNullOrEmpty(record) &&
                auth.validatePassword(password, record);
            Log.d("Login attempt as {0}: {2}", user, ok, record);
            when(ok) {
                // System.Net.Cookie flags don't seem to be respected, so set a
                // cookie header explicitly...
                response["Set-Cookie"] = $"_auth=$user; path=/; secure; httponly";
            }
            response["Location"] = DefaultInsecurePrefix + "/";
            response.Status = (303, "See Other");


        } else {
            response.append("<html><body><h1>Forbidden!</h1></body></html>");
            response.Status = (403, "Forbidden");
        }
    }

    public navSignoutResponse(
        _context: Context, request: Request, response: Response): void {
        if(request.IsSecure) {
            // System.Net.Cookie flags don't seem to be respected, so set a
            // cookie header explicitly...
            response["Set-Cookie"] = "_auth=; path=/; secure; httponly";
            response["Location"] = DefaultInsecurePrefix + "/";
            response.Status = (303, "See Other");
        } else {
            response.append("<html><body><h1>Forbidden!</h1></body></html>");
            response.Status = (403, "Forbidden");
        }
    }

    public navSignupResponse(
        context: Context, request: Request, response: Response): void {
        if(request.IsSecure) {
            def user = context.Vars["user"];
            def _password = context.Vars["password"];
            // System.Net.Cookie flags don't seem to be respected, so set a
            // cookie header explicitly...
            response["Set-Cookie"] = $"_u=$user; path=/; secure; httponly";
            response["Location"] = DefaultSecurePrefix + "/signup";
            response.Status = (303, "See Other");
        } else {
            response.append("<html><body><h1>Forbidden!</h1></body></html>");
            response.Status = (403, "Forbidden");
        }
    }

    public testResponse(
        context: Context, _request: Request, response: Response): void {

        def id = context.Vars["id"];
        def rest = context.Vars["rest"];

        response.append(
            $"<html><body><h1>Thread ID=$id</h1>"
            $"<p><tt>rest=$rest</tt></p></body></html>");
        response.Status = (200, "OK");
    }

    protected override internalServerError(ex: Exception): void {
        Log.e("INTERNAL SERVER ERROR!\n{0}\n{1}", ex.Message, ex.StackTrace);
    }

    getDefaultPrefix(request: Request): string {
        if(request.IsSecure) {
            DefaultSecurePrefix
        } else {
            DefaultInsecurePrefix
        }
    }

    getUserCount(): int {
        def commmand = Database.createCommand("SELECT COUNT(Name) FROM Users");
        def ex = commmand.executeScalar() :> long;
        unchecked ex :> int;
    }
}


} // namespace forum
