using System;

using Nemerle.Extensions;

using httplib;


namespace forum {

class ForumServer: Server {

    public this(path: string) {
        base(path);

        route(HTTP.GET, "/", indexResponse);

        route(HTTP.GET, "/nav-{{action}}", navGetResponse);
        route(HTTP.POST, "/nav-{{action}}", navPostResponse);
        route(HTTP.GET, "/signup", signupResponse);
        route(HTTP.POST, "/signup-submit", signupSubmitResponse);
        route(HTTP.GET, "/is-user", isUserResponse);

        route([
            (HTTP.GET, "/th/{{id:[0-9]+}}/{{rest:.*}}"),
            (HTTP.GET, "/th/{{id:[0-9]+}}")], testResponse);

        route(HTTP.GET, "/pwtest", pwResponse);
    }

    public indexResponse(
        _context: Context, request: Request, response: Response): void {

        def data = PageData() <- [
            "DefaultSecurePrefix" = DefaultSecurePrefix,
            "DefaultInsecurePrefix" = DefaultInsecurePrefix,
            "DefaultPrefix" = getDefaultPrefix(request),
        ];
        response.append(renderPage("index.nyml", data));
        response.Status = (200, "OK");
    }

    public navGetResponse(
        context: Context, request: Request, response: Response): void {

        def action = context.Vars["action"];
        def lambda = match(action) {
            | "login" => navLoginResponse
            | "empty" => navEmptyResponse
            | _ => methodNotAllowedResponse
        };
        lambda(context, request, response);
    }

    public navPostResponse(
        context: Context, request: Request, response: Response): void {

        def action = context.Vars["action"];
        def lambda = match(action) {
            | "signin" => navSigninResponse
            | "signout" => navSignoutResponse
            | "signup" => navSignupResponse
            | _ => methodNotAllowedResponse
        }
        lambda(context, request, response);
    }

    public signupResponse(
        _context: Context, request: Request, response: Response): void {

        if(request.IsSecure) {
            def cookies = request.Cookies;
            def u = if(cookies != null) { cookies["_u"] } else { null };
            mutable user = "Username";
            when(!String.IsNullOrEmpty(u)) {
                user = u;
            }

            def data = PageData() <- [
                "User" = user ?? "Username",
                "DefaultSecurePrefix" = DefaultSecurePrefix,
                "DefaultInsecurePrefix" = DefaultInsecurePrefix,
            ];

            response.append(renderPage("signup.nyml", data));
            response["Set-Cookie"] = "_u=; path=/; secure; httponly";
            response.Status = (200, "OK");
        } else {
            response.append("<html><body><h1>Forbidden!</h1></body></html>");
            response.Status = (403, "Forbidden");
        }
    }

    public signupSubmitResponse(
        context: Context, request: Request, response: Response): void {

        if(request.IsSecure) {
            def user = Uri.UnescapeDataString(context.Vars["user"]);
            def password = Uri.UnescapeDataString(context.Vars["password"]);
            def confirm = Uri.UnescapeDataString(context.Vars["confirm"]);
            def email = Uri.UnescapeDataString(context.Vars["email"]);


            mutable command1 = Database.createCommand(
                "SELECT Name FROM Users WHERE Name = @Name");
            command1.addParameter("@Name", user);
            mutable command2 = Database.createCommand(
                "SELECT Email FROM Auth WHERE Email = @Email");
            command2.addParameter("@Email", email);
            def test1 = command1.executeScalar() :> string;
            def test2 = command2.executeScalar() :> string;

            if(test1 != null || test2 != null || password != confirm) {
                // TODO: also repeat the validation checks from client side
                //   user length (3-25), chars
                //   password length (8-60), chars

                // error with user data.
                // (need a more considered response though...)
                response.append("<html><body><h1>Bad Request!</h1></body></html>");
                response.Status = (400, "Bad Request");
            } else {
                def auth = getModuleInterface.[mod.IAuth]();
                def now = DateTime.Now.ToUniversalTime();

                mutable command3 = Database.createCommand(
                    "INSERT INTO Users(Name, Level, Points, JoinDate) "
                        "VALUES (@Name, 0, 0, @JoinDate)");
                command3.addParameter("@Name", user);
                command3.addParameter("@JoinDate", now);
                _ = command3.executeNonQuery();

                mutable command4 = Database.createCommand(
                    "SELECT Id FROM Users WHERE Name = @Name");
                command4.addParameter("@Name", user);
                def id = command4.executeScalar() :> uint;

                def record = auth.createPasswordRecord(password);

                mutable command5 = Database.createCommand(
                    "INSERT INTO Auth(UserId, PwRecord, Email) "
                        "VALUES (@UserId, @PwRecord, @Email)");
                command5.addParameter("@UserId", id);
                command5.addParameter("@PwRecord", record);
                command5.addParameter("@Email", email);
                _ = command5.executeNonQuery();

                response["Set-Cookie"] = $"_auth=$user; path=/; secure; httponly";
                response["Location"] = DefaultInsecurePrefix + "/";
                response.Status = (303, "See Other");
            }


        } else {
            response.append("<html><body><h1>Forbidden!</h1></body></html>");
            response.Status = (403, "Forbidden");
        }
    }

    public isUserResponse(
        _context: Context, request: Request, response: Response): void {

        def u = request.QueryString["u"];
        def e = request.QueryString["e"];
        mutable ok = null;
        if(!String.IsNullOrEmpty(u)) {
            mutable command = Database.createCommand(
                "SELECT Name FROM Users WHERE Name = @Name");
            command.addParameter("@Name", Uri.UnescapeDataString(u));
            ok = command.executeScalar() :> string;
        }
        else when(!String.IsNullOrEmpty(e)) {
            mutable command = Database.createCommand(
                "SELECT Email FROM Auth WHERE Email = @Email");
            command.addParameter("@Email", Uri.UnescapeDataString(e));
            ok = command.executeScalar() :> string;
        }
        response.Status = if(ok != null) { (200, "OK") } else { (404, "Not Found") };
    }

    public navLoginResponse(
        _context: Context, request: Request, response: Response): void {

        if(request.IsSecure) {
            def cookies = request.Cookies;
            def auth = if(cookies != null) { cookies["_auth"] } else { null };
            def data = PageData() <- [
                "DefaultSecurePrefix" = DefaultSecurePrefix,
                "DefaultInsecurePrefix" = DefaultInsecurePrefix,
                "DefaultPrefix" = getDefaultPrefix(request),
            ];
            if(!String.IsNullOrEmpty(auth)) {
                _ = data <- [ "User" = auth ];
                response.append(renderPage("nav-ok.nyml", data));
                response.Status = (200, "OK");
            } else {
                response.append(renderPage("nav-login.nyml", data));
                response.Status = (200, "OK");
            }
        } else {
            response.append("<html><body><h1>Forbidden!</h1></body></html>");
            response.Status = (403, "Forbidden");
        }
    }

    public navEmptyResponse(
        _context: Context, request: Request, response: Response): void {

        if(request.IsSecure) {
            def data = PageData() <- [
                "DefaultSecurePrefix" = DefaultSecurePrefix,
                "DefaultInsecurePrefix" = DefaultInsecurePrefix,
                "DefaultPrefix" = getDefaultPrefix(request),
            ];
            response.append(renderPage("nav-empty.nyml", data));
            response.Status = (200, "OK");
        } else {
            response.append("<html><body><h1>Forbidden!</h1></body></html>");
            response.Status = (403, "Forbidden");
        }
    }

    public navSigninResponse(
        context: Context, request: Request, response: Response): void {
        if(request.IsSecure) {
            def user = Uri.UnescapeDataString(context.Vars["user"]);
            def password = Uri.UnescapeDataString(context.Vars["password"]);
            def auth = getModuleInterface.[mod.IAuth]();
            def command1 = Database.createCommand(
                "SELECT Id FROM Users WHERE Name = @Name");
            command1.addParameter("@Name", user);
            def id = command1.executeScalar() :> uint?;
            mutable record;
            when(id != null) {
                def command2 = Database.createCommand(
                    "SELECT PwRecord FROM Auth WHERE UserId = @UserId");
                command2.addParameter("@UserId", id);
                record = command2.executeScalar() :> string;
            }

            def ok = !String.IsNullOrEmpty(record) &&
                auth.validatePassword(password, record);
            Log.d("{0} - {1} - {2}\n{3}", user, id, ok, record);
            when(ok) {
                // System.Net.Cookie flags don't seem to be respected, so set a
                // cookie header explicitly...
                response["Set-Cookie"] = $"_auth=$user; path=/; secure; httponly";
            }
            response["Location"] = DefaultInsecurePrefix + "/";
            response.Status = (303, "See Other");


        } else {
            response.append("<html><body><h1>Forbidden!</h1></body></html>");
            response.Status = (403, "Forbidden");
        }
    }

    public navSignoutResponse(
        _context: Context, request: Request, response: Response): void {
        if(request.IsSecure) {
            // System.Net.Cookie flags don't seem to be respected, so set a
            // cookie header explicitly...
            response["Set-Cookie"] = "_auth=; path=/; secure; httponly";
            response["Location"] = DefaultInsecurePrefix + "/";
            response.Status = (303, "See Other");
        } else {
            response.append("<html><body><h1>Forbidden!</h1></body></html>");
            response.Status = (403, "Forbidden");
        }
    }

    public navSignupResponse(
        context: Context, request: Request, response: Response): void {
        if(request.IsSecure) {
            def user = context.Vars["user"];
            def _password = context.Vars["password"];
            // System.Net.Cookie flags don't seem to be respected, so set a
            // cookie header explicitly...
            response["Set-Cookie"] = $"_u=$user; path=/; secure; httponly";
            response["Location"] = DefaultSecurePrefix + "/signup";
            response.Status = (303, "See Other");
        } else {
            response.append("<html><body><h1>Forbidden!</h1></body></html>");
            response.Status = (403, "Forbidden");
        }
    }

    public testResponse(
        context: Context, _request: Request, response: Response): void {

        def id = context.Vars["id"];
        def rest = context.Vars["rest"];

        response.append(
            $"<html><body><h1>Thread ID=$id</h1>"
            $"<p><tt>rest=$rest</tt></p></body></html>");
        response.Status = (200, "OK");
    }

    public pwResponse(
        _context: Context, _request: Request, response: Response): void {

        def auth = getModuleInterface.[mod.IAuth]();
        if(auth != null) {
            def test_pw = "n0ts3cr3t";
            def record = auth.createPasswordRecord(test_pw);
            mutable sw = Diagnostics.Stopwatch();
            sw.Start();
            def valid = auth.validatePassword(test_pw, record);
            sw.Stop();
            def tvalid = sw.ElapsedMilliseconds;
            sw.Reset();
            sw.Start();
            def invalid = auth.validatePassword("owls", record);
            sw.Stop();
            def tinvalid = sw.ElapsedMilliseconds;
            sw.Reset();
            response.append("<html><body><h1>Auth test</h1>"
                $"<p>Input password is: '$test_pw'.</p>"
                $"<p>Password record is: '$record'.</p>"
                $"<p>Password record length is: '$(record.Length)'.</p>"
                $"<p>Validation result is: '$valid'.</p>"
                $"<p>Validation took: $(tvalid)ms.</p>"
                $"<p>Failed result is: '$invalid'.</p>"
                $"<p>Failed took: $(tinvalid)ms.</p>"
                "</body></html>");
            response.Status = (200, "OK");
        } else {
            response.append("<html><body><h1>Error: no auth module</h1></body></html>");
            response.Status = (500, "Err");
        }
    }

    protected override internalServerError(ex: Exception): void {
        Log.e("INTERNAL SERVER ERROR!\n{0}\n{1}", ex.Message, ex.StackTrace);
    }

    getDefaultPrefix(request: Request): string {
        if(request.IsSecure) {
            DefaultSecurePrefix
        } else {
            DefaultInsecurePrefix
        }
    }
}


} // namespace forum
