using System;

using Nemerle.Extensions;
using Nemerle.IO;

using httplib;


namespace forum {

class ForumServer: Server {

    nav_state: NavState = NavState();

    public this(path: string) {
        base(path);

        route(HTTP.GET, "/", indexResponse);
        route([
            (HTTP.GET, "/th/{{id:[0-9]+}}/{{rest:.*}}"),
            (HTTP.GET, "/th/{{id:[0-9]+}}")], testResponse);

        route(HTTP.GET, "/pwtest", pwResponse);
    }

    public indexResponse(
        _context: Context, _request: Request, response: Response): void {

        def pd = PartialData() <- [ "NavState" = navState() ];

        response.append(renderPage("index.nyml", null, pd));
        response.Status = (200, "OK");
    }

    public testResponse(
        context: Context, _request: Request, response: Response): void {

        def id = context.Vars["id"];
        def rest = context.Vars["rest"];

        response.append(
            $"<html><body><h1>Thread ID=$id</h1>"
            $"<p><tt>rest=$rest</tt></p></body></html>");
        response.Status = (200, "OK");
    }

    public pwResponse(
        _context: Context, _request: Request, response: Response): void {

        def auth = getModuleInterface.[mod.IAuth]();
        if(auth != null) {
            def test_pw = "n0ts3cr3t";
            def record = auth.createPasswordRecord(test_pw);
            mutable sw = Diagnostics.Stopwatch();
            sw.Start();
            def valid = auth.validatePassword(test_pw, record);
            sw.Stop();
            def tvalid = sw.ElapsedMilliseconds;
            sw.Reset();
            sw.Start();
            def invalid = auth.validatePassword("owls", record);
            sw.Stop();
            def tinvalid = sw.ElapsedMilliseconds;
            sw.Reset();
            response.append("<html><body><h1>Auth test</h1>"
                $"<p>Input password is: '$test_pw'.</p>"
                $"<p>Password record is: '$record'.</p>"
                $"<p>Password record length is: '$(record.Length)'.</p>"
                $"<p>Validation result is: '$valid'.</p>"
                $"<p>Validation took: $(tvalid)ms.</p>"
                $"<p>Failed result is: '$invalid'.</p>"
                $"<p>Failed took: $(tinvalid)ms.</p>"
                "</body></html>");
            response.Status = (200, "OK");
        } else {
            response.append("<html><body><h1>Error: no auth module</h1></body></html>");
            response.Status = (500, "Err");
        }
    }

    public navState(): string {
        // TODO: need some kind of SessionId...
        nav_state.Output;
    }

    protected override internalServerError(ex: Exception): void {
        print("INTERNAL SERVER ERROR!\n"
            $"$(ex.Message)\n"
            $"$(ex.StackTrace)\n");
    }
}


} // namespace forum
