using System;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;
using System.Threading;

using Nemerle.Extensions;

using httplib;


namespace forum {

public class ForumServer: Server {

    public TimeStarted: long { get; private set; }

    public new Configuration: ForumServerConfiguration {
        get { base.Configuration :> ForumServerConfiguration }
    }

    public this(path: string) {
        def config = loadConfiguration.[ForumServerConfiguration](path);
        this(config);
    }

    public this(config: ForumServerConfiguration) {
        base(config);

        TimeStarted = Date.NowTicks;

        route([ (HTTP.GET, "/"),
                (HTTP.GET, "/index") ], IndexHandler.Factory("index.nyml"));

        route(HTTP.GET, "/nav-{{action}}", NavHandler.Factory(HTTP.GET));
        route(HTTP.POST, "/nav-{{action}}", NavHandler.Factory(HTTP.POST));
        route(HTTP.POST, "/tok-{{action}}", TokenHandler.Factory(HTTP.POST));

        route(HTTP.GET, "/signup", SignupHandler.Factory(false));
        route(HTTP.POST, "/signup-submit", SignupHandler.Factory(true));

        route(HTTP.GET, "/is-user", isUserResponse);
        route(HTTP.POST, "/get-email", getEmailResponse);
        route(HTTP.POST, "/test-email", testEmailResponse);

        route([ (HTTP.GET, "/u"),
                (HTTP.GET, "/u/{{from:[0-9]+}}-{{to:[0-9]+}}") ],
            UserListHandler.Factory("users.nyml"));

        route(HTTP.GET, @"/u/{{user:[A-Za-z_].*}}.x",
            UserHandler.Factory("user.nyml", true));
        route(HTTP.GET, "/u/{{user:[A-Za-z_].*}}",
            UserHandler.Factory("user.nyml", false));

        route(HTTP.POST, "/prefs", updatePrefsResponse);
        route(HTTP.POST, "/categories", categoryListResponse);
        route(HTTP.POST, "/col", categoryColourResponse);

        route(HTTP.POST, "/recover", RecoveryInitiateHandler.Factory());
        route(HTTP.GET, "/recover/{{token:.*}}",
            RecoveryConfirmHandler.Factory("recover.nyml"));
        route(HTTP.POST, "/recover-submit", RecoverySubmitHandler.Factory());

        route(HTTP.GET, "/p/{{num:[0-9]+}}", PostHandler.Factory("post.nyml"));

        route([ (HTTP.GET, "/th/new"),
                (HTTP.POST, "/th/new") ],
            NewThreadHandler.Factory("newthread.nyml"));

        route(HTTP.POST, "/createthread", CreateThreadHandler.Factory());

        route([ (HTTP.GET, "/th/{{id:[0-9]+}}"),
                (HTTP.GET, "/th/{{id:[0-9]+}}/{{from:[0-9]+}}-{{to:[0-9]+}}"),
                (HTTP.GET, "/th/{{id:[0-9]+}}/{{title:[a-zA-Z0-9_-]+}}"),
                (HTTP.GET, "/th/{{id:[0-9]+}}/{{title:[a-zA-Z0-9_-]+}}/{{from:[0-9]+}}-{{to:[0-9]+}}") ],
            ThreadHandler.Factory("thread.nyml"));

        route([ (HTTP.GET, "/tg"),
                (HTTP.GET, "/tg/{{from:[0-9]+}}-{{to:[0-9]+}}") ],
            TagListHandler.Factory("tags.nyml"));

        route([ (HTTP.GET, "/tg/{{tag:[^/]*}}"),
                (HTTP.GET, "/tg/{{tag:[^/]*}}/{{from:[0-9]+}}-{{to:[0-9]+}}") ],
            TagHandler.Factory("tag.nyml"));

        route([ (HTTP.GET, "/c/new"),
                (HTTP.POST, "/c/new") ],
            NewCategoryHandler.Factory("newcat.nyml"));

        route(HTTP.POST, "/createcategory", createCategoryResponse);

        route([ (HTTP.GET, "/c"),
                (HTTP.GET, "/c/{{from:[0-9]+}}-{{to:[0-9]+}}") ],
            CategoryListHandler.Factory("cats.nyml"));

        route([ (HTTP.GET, "/c/{{id:[0-9]+}}"),
                (HTTP.GET, "/c/{{id:[0-9]+}}/{{from:[0-9]+}}-{{to:[0-9]+}}") ],
            CategoryHandler.Factory("cat.nyml"));

        route([ (HTTP.GET, "/n"),
                (HTTP.GET, "/n/{{from:[0-9]+}}-{{to:[0-9]+}}") ],
            NotificationHandler.Factory("notify.nyml"));

        route(HTTP.POST, "/preview-post", previewPostResponse);
        route(HTTP.POST, "/createpost", createPostResponse);
        route(HTTP.POST, "/update-post", updatePostResponse);
        route(HTTP.POST, "/get-post", getPostDataResponse);
        route(HTTP.POST, "/update-title", updateTitleResponse);

        route([ (HTTP.POST, "/newpost"),
                (HTTP.GET, "/newpost") ], // for testing only?
            NewPostHandler.Factory("newpost.nyml"));

        route([ (HTTP.POST, "/window"),
                (HTTP.GET, "/window") ], // for testing only?
            FragmentHandler.Factory("editwindow.nyml"));

        route(HTTP.GET, "/filter", filterTestResponse);

        route(HTTP.GET, "/custom-styles.css",
            CssHandler.Factory("custom-styles.nyml", "font_data.yml"));

        route(HTTP.POST, "/upload-avatar", UploadAvatarHandler.Factory());
        route(HTTP.GET,
            "/avatar/{{size:[0-9]+}}/{{user:.*}}", AvatarImageHandler.Factory());

        route(HTTP.POST, "/thumb", thumbPostResponse);
        route(HTTP.POST, "/star", starPostResponse);

        route(HTTP.GET, "/admin", AdminHandler.Factory("admin.nyml"));
        route(HTTP.POST, "/admin-update", AdminUpdateHandler.Factory());

        route(HTTP.GET, "/updates", updateSourceResponse);
    }

    public override error(
        context: Context, request: Request, response: Response,
        status: int * string): void {

        def ehf = ErrorHandler.Factory("error.nyml", status);
        def hd = HandlerData(context, request, response, this);
        def eh = ehf.makeHandler(hd);

        eh.callback();
    }

    public isUserResponse(
        _context: Context, request: Request, response: Response): void {

        def u = request.QueryString["u"];
        def e = request.QueryString["e"];
        mutable ok = null;
        using(db = openDatabase()) {
            if(!String.IsNullOrEmpty(u)) {
                mutable command = db.createCommand(
                    "SELECT Name FROM Users WHERE Name = @Name") <- [
                        "@Name" = u,
                    ];
                ok = command.executeScalar() :> string;
            }
            else when(!String.IsNullOrEmpty(e)) {
                mutable command = db.createCommand(
                    "SELECT Email FROM Auth WHERE Email = @Email") <- [
                        "@Email" = e,
                    ];
                ok = command.executeScalar() :> string;
            }
        }
        response.Status = ok ? (200, "OK") : (404, "Not Found");
    }

    public getEmailResponse(
        _context: Context, request: Request, response: Response): void {

        mutable ok = false;
        using(fdb = openForumDatabase()) {
            def db = fdb.Database;
            def uid = fdb.getUserIdFromCookie(request, STOK.INSECURE);
            def command = db.createCommand(
                "SELECT Email, Secret From Auth WHERE UserId = @UserId") <- [
                    "@UserId" = uid,
                ];
            mutable json = JsonObject();
            command.execute(reader => {
                _ = json <- [
                    "e" = reader.getValue("Email", ""),
                    "s" = reader.getValue("Secret", ""),
                ];
                ok = true;
            });

            response.append(json.toString());
        }
        response.Status = ok ? (200, "OK") : (404, "Not Found");
    }

    public testEmailResponse(
        context: Context, request: Request, response: Response): void {

        def e = context.Vars["e"];
        mutable ok = false;
        using(fdb = openForumDatabase()) {
            def uid = fdb.getUserIdFromCookie(request, STOK.INSECURE);
            when(e != null && uid > 0) {
                def data = PageData() <- [
                    "SiteName" = Configuration.SiteName,
                    "SiteUrl" = DefaultInsecurePrefix,
                    "User" = fdb.getUserName(uid),
                ];
                sendEmail(
                    Configuration.DefaultEmailSender,
                    [e], "test-email.nyml", data);
            }
        }
        response.Status = ok ? (200, "OK") : (404, "Not Found");
    }

    public createCategoryResponse(
        context: Context, request: Request, response: Response): void {

        def name = context.Vars["name"];
        def colour = context.Vars["colour"];
        mutable ok = false;
        mutable catid = 0U;

        using(fdb = openForumDatabase()) {
            def db = fdb.Database;
            def uid = fdb.getUserIdFromCookie(request, STOK.INSECURE);
            def command = db.createCommand(
                "INSERT INTO Categories(Name, UserId, CreateDate, Colour) "
                    "VALUES(@Name, @UserId, @CreateDate, @Colour)") <- [
                "@Name" = name,
                "@UserId" = uid,
                "@CreateDate" = Date.NowTicks,
                "@Colour" = colour,
            ];
            def result = command.executeNonQuery();
            ok = (result > 0);

            when(ok) {
                def command2 = db.createCommand(
                    "SELECT Id FROM Categories WHERE Name = @Name") <- [
                        "@Name" = name,
                    ];
                def result2 = command2.executeScalar() :> uint?;

                if(result2 != null) {
                    catid = result2 :> uint;
                } else {
                    ok = false;
                }
            }
        }

        if(ok) {
            response["Location"] = $"$(getDefaultPrefix(request))/c/$catid";
            response.Status = (303, "See Other");
        } else {
            internalServerErrorResponse(context, request, response);
        }
    }

    public previewPostResponse(
        context: Context, request: Request, response: Response): void {

        def r = context.Vars["r"];
        def t = context.Vars["t"];
        def (ok, result) = renderPost(r, t);

        if(ok) {
            response.append(result);
            response.Status = (200, "OK");
        } else {
            internalServerErrorResponse(context, request, response);
        }
    }

    public createPostResponse(
        context: Context, request: Request, response: Response): void {

        mutable ok = false;
        mutable output = "";
        mutable post_id, thid;
        mutable utc_now;
        using(fdb = openForumDatabase()) {
            def userid = fdb.getUserIdFromCookie(request, STOK.INSECURE);

            when(userid != 0) {
                //we send p=X to imply that a post is not a reply.
                def reply_to =
                    match(context.Vars["p"]) {
                        | "X" => null
                        | n => UInt32.Parse(n)
                    };
                thid = UInt32.Parse(context.Vars["th"]);
                def transform = context.Vars["r"];
                def content = context.Vars["t"];
                def tags = context.Vars["tg"];

                (post_id, output, utc_now) =
                    fdb.createPost(userid, thid, reply_to, transform, content, tags);
                ok = (post_id > 0);
            }
        }

        if(ok) {
            def json = JsonObject() <- [
                "p" = post_id,
                "o" = output,
                "t" = Date.FromTicks(utc_now),
            ];
            response.append(json.toString());
            response.Status = (200, "OK");
        } else {
            internalServerErrorResponse(context, request, response);
        }
    }

    public updatePostResponse(
        context: Context, request: Request, response: Response): void {

        mutable ok = false;
        mutable output = "";
        mutable post_id;
        mutable tags;
        using(fdb = openForumDatabase()) {
            def userid = fdb.getUserIdFromCookie(request, STOK.INSECURE);

            when(userid != 0) {
                post_id = UInt32.Parse(context.Vars["p"]);
                def transform = context.Vars["r"];
                def content = context.Vars["t"];
                tags = context.Vars["tg"];

                (ok, output) = fdb.updatePost(post_id, transform, content, tags);
            }
        }

        if(ok) {
            def json = JsonObject() <- [
                "p" = post_id,
                "o" = output,
            ];
            when(tags != null) {
                json["tg"] = tags;
            }
            response.append(json.toString());
            response.Status = (200, "OK");
        } else {
            internalServerErrorResponse(context, request, response);
        }
    }

    public getPostDataResponse(
        context: Context, request: Request, response: Response): void {

        mutable ok = false;
        mutable input = "", output = "", transform = "";
        mutable post_id;
        mutable tags = null;
        using(fdb = openForumDatabase()) {
            def db = fdb.Database;
            def userid = fdb.getUserIdFromCookie(request, STOK.INSECURE);

            when(userid != 0) {
                post_id = UInt32.Parse(context.Vars["p"]);
                def command = db.createCommand(
                    "SELECT InputContent, OutputContent, Transform FROM Posts WHERE "
                        "Id=@Id") <- [
                    "@Id" = post_id,
                ];

                command.execute(reader => {
                    input = reader.getValue("InputContent");
                    output = reader.getValue("OutputContent");
                    transform = reader.getValue("Transform");
                });

                tags = fdb.getPostTags(post_id);

                ok = true;
            }
        }

        if(ok) {
            mutable full = false;
            try {
                full = Boolean.Parse(context.Vars["f"]);
            } catch {
                | _ => {}
            }
            def json = JsonObject() <- [
                "p" = post_id,
                "o" = output,
            ];
            when(full) {
                _ = json <- [
                    "i" = input,
                    "t" = transform,
                ];
            }
            when(tags != null) {
                json["tg"] = encodeTags(tags);
            }
            response.append(json.toString());
            response.Status = (200, "OK");
        } else {
            internalServerErrorResponse(context, request, response);
        }
    }

    public updateTitleResponse(
        context: Context, request: Request, response: Response): void {

        mutable ok = false;
        def title = context.Vars["t"];
        def thread_id = UInt32.Parse(context.Vars["th"]);
        using(fdb = openForumDatabase()) {
            def db = fdb.Database;
            def user_id = fdb.getUserIdFromCookie(request, STOK.INSECURE);
            when(user_id > 0) {
                def command = db.createCommand(
                    "SELECT UserId FROM Threads WHERE Id = @Id") <- [
                        "@Id" = thread_id,
                    ];
                def thread_user_id = command.executeScalar() :> uint;
                def authorized = fdb.userIsAdmin(user_id) ||
                    (thread_user_id == user_id);

                when(authorized) {
                    def command2 = db.createCommand(
                        "UPDATE Threads SET Title = @Title WHERE Id = @Id") <- [
                            "@Title" = title,
                            "@Id" = thread_id,
                        ];

                    def result2 = command2.executeNonQuery();
                    ok = (result2 > 0);
                }
            }
        }

        if(ok) {
            response.Status = (200, "OK");
        } else {
            internalServerErrorResponse(context, request, response);
        }
    }

    public renderPost(method: string, text: string,
        mentions: List[uint] = null): bool * string {

        def bbc = getModuleInterface.[ITextTransform]("BbCode");
        def txt = getModuleInterface.[ITextTransform]("Textile");
        def htm = getModuleInterface.[ITextTransform]("HtmlSanitizer");
        def flt = getModuleInterface.[ITextTransform]("Filter");
        def ico = getModuleInterface.[ITextTransform]("Iconify");
        def oem = getModuleInterface.[ITextTransform]("OEmbed");
        mutable ok = true;
        mutable output = "";
        mutable pipeline =
            flt.transform >> htm.transform >> ico.transform >> oem.transform;

        match(method) {
            | "bbcode" => pipeline = bbc.transform >> pipeline;
            | "textile" => pipeline = txt.transform >> pipeline;
            | "htmlsan" => ()
            | _ => ok = false;
        }

        when(ok) {
            output = text;

            using(fdb = openForumDatabase()) {
                fdb.parseOutputForMentions(ref output, mentions);
            }

            output = pipeline(output);
        }
        (ok, output);
    }

    public validatePassword(pw: string, strength: uint): bool {
        def a = pw.Length >= 8;
        def b = pw.Length <= 60;
        def c = Regex("[a-z]").IsMatch(pw);
        def d = Regex("[A-Z]").IsMatch(pw);
        def e = Regex("[0-9]").IsMatch(pw);
        def f = strength >= 3;
        def result = a && b && c && d && e && f;
        def p(x) { x ? "T" : "F" }
        Log.d("validatePassword(): l{0} L{1} a{2} A{3} 9{4} %{5} -> {6}",
            p(a), p(b), p(c), p(d), p(e), p(f), result);
        result;
    }

    public filterTestResponse(
        context: Context, request: Request, response: Response): void {

        def filter = getModuleInterface.[ITextTransform]("Filter");
        if(filter != null) {
            def i = request.QueryString["input"];
            def input = i ? i : ("Use ?input=xyz on "
                "the query string to test a different phrase!");
            def output = input ? filter.transform(input) : "";

            response.append("<html><body><h1>Filter Test</h1>"
                $"<p>Input: $input</p><p>Output: $output</p>"
                "</body></html>");
            response.Status = (200, "OK");
        } else {
            internalServerErrorResponse(context, request, response);
        }
    }

    public updatePrefsResponse(
        context: Context, request: Request, response: Response): void {

        def m = context.Vars["m"];
        def s = context.Vars["s"];
        def l = context.Vars["l"];
        def e = context.Vars["e"];
        def c = context.Vars["c"];
        def r = context.Vars["r"];
        def f = context.Vars["f"];
        def mf = context.Vars["mf"];
        mutable ok = false;

        using(fdb = openForumDatabase()) {
            def db = fdb.Database;
            def userid = fdb.getUserIdFromCookie(request, STOK.INSECURE);

            when(userid != 0) {
                def command = db.createCommand(
                    "UPDATE Users SET Location=@Location, Motto=@Motto, "
                        "Colour=@Colour, Transform=@Transform, Font=@Font, "
                        "MonoFont=@MonoFont WHERE Id=@Id") <- [
                    "@Location" = l,
                    "@Motto" = m,
                    "@Colour" = c,
                    "@Transform" = r,
                    "@Font" = f,
                    "@MonoFont" = mf,
                    "@Id" = userid,
                ];
                def x = command.executeNonQuery();
                ok = (1 == x);

                when(ok) {
                    def command2 = db.createCommand(
                        "UPDATE Auth SET Email = @Email, Secret = @Secret WHERE "
                            "UserId = @UserId") <- [
                        "@Email" = e,
                        "@Secret" = s,
                        "@UserId" = userid,
                    ];
                    def x = command2.executeNonQuery();
                    ok = (1 == x);
                }
            }
        }

        if(ok) {
            response.Status = (200, "OK");
        } else {
            internalServerErrorResponse(context, request, response);
        }
    }

    public categoryListResponse(
        _context: Context, _request: Request, response: Response): void {

        using(db = openDatabase()) {
            // TODO: this assumes categories are in a nice list from 1 -> count.
            // We should probably be selecting Id, Name, and returning a mapping
            // of ids to names to be more robust...
            def command = db.createCommand("SELECT Name FROM Categories");
            def cats = List();
            command.execute(reader => {
                def c = reader.getValue("Name");
                when(!String.IsNullOrEmpty(c)) {
                    cats.Add(c);
                }
            });
            def json = JsonObject() <- [ "categories" = cats ];
            response.append(json.toString());
        }
    }

    public categoryColourResponse(
        context: Context, _request: Request, response: Response): void {

        using(fdb = openForumDatabase()) {
            def category = context.Vars["c"];
            def cat_id = fdb.getCategoryId(category);
            def colour = (cat_id > 0) ?
                fdb.getCategoryColour(cat_id) :
                Configuration.DefaultColourClass;
            def json = JsonObject() <- [
                "id" = cat_id,
                "colour" = colour,
            ];
            response.append(json.toString());
        }
    }

    public thumbPostResponse(
        context: Context, request: Request, response: Response): void {

        def on = !String.IsNullOrEmpty(context.Vars["on"]);
        def pid = UInt32.Parse(context.Vars["p"]);

        using(fdb = openForumDatabase()) {
            def uid = fdb.getUserIdFromCookie(request, STOK.INSECURE);
            fdb.thumbPost(pid, uid, on);
        }
        response.Status = (200, "OK");
    }

    public starPostResponse(
        context: Context, request: Request, response: Response): void {

        def on = !String.IsNullOrEmpty(context.Vars["on"]);
        def pid = UInt32.Parse(context.Vars["p"]);

        using(fdb = openForumDatabase()) {
            def uid = fdb.getUserIdFromCookie(request, STOK.INSECURE);

            mutable thid, puid;

            when(on) {
                def command = fdb.Database.createCommand(
                    "SELECT ThreadId, UserId FROM Posts WHERE Id = @Id") <- [
                        "@Id" = pid,
                    ];
                command.execute(reader => {
                    thid = reader.getValue("ThreadId", 0U);
                    puid = reader.getValue("UserId", 0U);
                });
            }

            fdb.starPost(pid, uid, on, puid, thid);
        }
        response.Status = (200, "OK");
    }

    public updateSourceResponse(
        _context: Context, request: Request, response: Response): void {

        using(fdb = openForumDatabase()) {
            def user_id = fdb.getUserIdFromCookie(request, STOK.INSECURE);

            response.asEventSource(() => {
                using(lst = ForumEventListener(
                    EventSource, "update", user_id, response)) {

                    while(!lst.IsDisposed) {
                        lst.update();
                        Thread.Sleep(1000);
                    }
                }
            });
        }
    }

    public sendUpdate(json: JsonObject): void {
        EventSource.sendEvent("update", json);
    }

    public override internalServerError(ex: Exception): void {
        Log.e("INTERNAL SERVER ERROR!\n{0}\n{1}\n{2}",
            ex.GetType(), ex.Message, ex.GetExtendedStackTrace());
    }

    public getDefaultPrefix(request: Request): string {
        if(request.IsSecure) {
            DefaultSecurePrefix
        } else {
            DefaultInsecurePrefix
        }
    }

    public encodeTags(tags: array[string]): string {
        mutable esc = array(5);
        when(tags != null) {
            mutable i = 0;
            foreach(t in tags) {
                when(!String.IsNullOrEmpty(t)) {
                    esc[i] = Uri.EscapeDataString(t);
                    i++;
                }
            }
            Array.Resize(ref esc, i);
        }
        match(esc.Length) {
            | 0 => null
            | _ => Uri.EscapeDataString(String.Join("\0", esc))
        }
    }

    public sendEmail(
        from: string, to: list[string], path: string, data: PageData): void {

        def smtp = getModuleInterface.[ISmtp]("Smtp");
        def email = smtp.makeEmail();

        // Maybe abuse of the 'page' concept, but renderTitle()
        // and renderContent() will provide what we need here...
        def ext = Path.GetExtension(path).Substring(1);
        def renderer = Renderers[ext];
        def stream = openLocalFile(path);
        def text = renderer.loadPage(path, stream);

        when(text != null) {
            email.To = to;
            email.From = from;
            email.Subject = text.renderTitle(data);
            email.Html = true;
            email.Body = text.renderContent(data);
            email.send();
        }
    }

    public openForumDatabase(name = "default"): ForumDatabase {
        ForumDatabase(this, name);
    }

    public makeUrlFriendlyTitle(mutable title: string): string {
        title = Regex(@"[^a-zA-Z0-9_]").Replace(title, "-");
        title = Regex("-+").Replace(title, "-");
        title = Regex("^-+").Replace(title, "");
        title = Regex("-+$").Replace(title, "");
        title = (title.Length > 1) ? title : "-";
        title;
    }
}


} // namespace forum
