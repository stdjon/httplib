using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

using Nemerle.Extensions;

using httplib;


namespace forum {

public class ForumServer: Server {

    SessionToken: SessionToken { get; private set; }

    public this(path: string) {
        base(path);

        SessionToken = SessionToken(this);

        route([ (HTTP.GET, "/"),
            (HTTP.GET, "/index") ], BasePageHandler.Factory("index.nyml"));

        route(HTTP.GET, "/nav-{{action}}", NavHandler.Factory(HTTP.GET));
        route(HTTP.POST, "/nav-{{action}}", NavHandler.Factory(HTTP.POST));
        route(HTTP.POST, "/tok-{{action}}", TokenHandler.Factory(HTTP.POST));

        route(HTTP.GET, "/signup", SignupHandler.Factory(false));
        route(HTTP.POST, "/signup-submit", SignupHandler.Factory(true));

        route(HTTP.GET, "/is-user", isUserResponse);

        route([ (HTTP.GET, "/u"),
            (HTTP.GET, "/u/{{num:[0-9]+}}") ], usersRedirectPageResponse);
        route(HTTP.GET, "/u/{{from:[0-9]+}}-{{to:[0-9]+}}",
            UsersHandler.Factory("users.nyml", true));
        route(HTTP.GET, "/u/{{user:[A-Za-z_].*}}",
            UsersHandler.Factory("user.nyml", false));

        route(HTTP.POST, "/prefs", updatePrefsResponse);

        route(HTTP.GET, "/p/{{num:[0-9]+}}", PostHandler.Factory("post.nyml"));

        route(HTTP.POST, "/th/new",
            NewThreadHandler.Factory("newthread.nyml"));

        route(HTTP.POST, "/createthread", CreateThreadHandler.Factory());

        route([ (HTTP.GET, "/th/{{id:[0-9]+}}"),
                (HTTP.GET, "/th/{{id:[0-9]+}}/{{from:[0-9]+}}-{{to:[0-9]+}}") ],
            ThreadHandler.Factory("thread.nyml"));

        route(HTTP.GET, "/c/{{id:[0-9]+}}", CategoryHandler.Factory("cat.nyml"));

        route(HTTP.POST, "/preview-post", previewPostResponse);
        route(HTTP.POST, "/createpost", createPostResponse);
        route(HTTP.POST, "/update-post", updatePostResponse);
        route(HTTP.POST, "/get-post", getPostDataResponse);

        route([(HTTP.POST, "/window"),
            (HTTP.GET, "/window")], // for testing only?
            FragmentHandler.Factory("editwindow.nyml"));

        route(HTTP.GET, "/filter", filterTestResponse);

        route(HTTP.GET, "/custom-styles.css",
            CssHandler.Factory("custom-styles.nyml", "font_data.yml"));
    }

    public isUserResponse(
        _context: Context, request: Request, response: Response): void {

        def u = request.QueryString["u"];
        def e = request.QueryString["e"];
        mutable ok = null;
        if(!String.IsNullOrEmpty(u)) {
            mutable command = Database.createCommand(
                "SELECT Name FROM Users WHERE Name = @Name") <- [
                    "@Name" = u,
                ];
            ok = command.executeScalar() :> string;
        }
        else when(!String.IsNullOrEmpty(e)) {
            mutable command = Database.createCommand(
                "SELECT Email FROM Auth WHERE Email = @Email") <- [
                    "@Email" = e,
                ];
            ok = command.executeScalar() :> string;
        }
        response.Status = ok ? (200, "OK") : (404, "Not Found");
    }

    public usersRedirectPageResponse(
        context: Context, request: Request, response: Response): void {

        def num = context.Vars["num"];
        def from = !String.IsNullOrEmpty(num) ? Int32.Parse(num) : 1;
        def to = from + 24; //TODO: configurable?

        response["Location"] = $"$(getDefaultPrefix(request))/u/$from-$to";
        response.Status = (303, "See Other");
    }

    public previewPostResponse(
        context: Context, request: Request, response: Response): void {

        def r = context.Vars["r"];
        def t = context.Vars["t"];
        def (ok, result) = renderPost(r, t);

        if(ok) {
            response.append(result);
            response.Status = (200, "OK");
        } else {
            internalServerErrorResponse(context, request, response);
        }
    }

    public createPostResponse(
        context: Context, request: Request, response: Response): void {

        mutable ok = false;
        mutable output = "";
        mutable post_id, thid;
        def utc_now = Date.NowTicks;
        def cookies = request.Cookies;
        def isession = cookies ? cookies["_isession"] : null;
        def userid = isession ?
            getUserIdFromSessionToken(STOK.INSECURE, isession) : 0U;

        when(userid != 0) {
            thid = UInt32.Parse(context.Vars["th"]);
            def transform = context.Vars["r"];
            def content = context.Vars["t"];
            (ok, output) = renderPost(transform, content);

            when(ok) {
                def commmand = Database.createCommand(
                    "INSERT INTO Posts(InputContent, OutputContent, "
                        "Transform, UserId, ThreadId, CreateDate) VALUES("
                        "@InputContent, @OutputContent, "
                        "@Transform, @UserId, @ThreadId, @CreateDate)") <- [
                    "@InputContent" = content,
                    "@OutputContent" = output,
                    "@Transform" = transform,
                    "@UserId" = userid,
                    "@ThreadId" = thid,
                    "@CreateDate" = utc_now,
                ];

                def result2 = commmand.executeNonQuery();
                when(result2 <= 0) {
                    ok = false;
                }
            }

        }

        when(ok) {
            def commmand = Database.createCommand(
                "SELECT Id FROM Posts WHERE "
                    "UserId=@UserId AND CreateDate=@CreateDate") <- [
                "@UserId" = userid,
                "@CreateDate" = utc_now,
            ];
            post_id = commmand.executeScalar() :> uint?;

            when(post_id == null) {
                ok = false;
            }
        }
        if(ok) {
            def json = JsonObject() <- [
                "p" = post_id :> uint,
                "o" = output,
                "t" = Date.FromTicks(utc_now),
            ];
            response.append(json.toString());
            response.Status = (200, "OK");
        } else {
            internalServerErrorResponse(context, request, response);
        }
    }

    public updatePostResponse(
        context: Context, request: Request, response: Response): void {

        mutable ok = false;
        mutable output = "";
        mutable post_id;
        def cookies = request.Cookies;
        def isession = cookies ? cookies["_isession"] : null;
        def userid = isession ?
            getUserIdFromSessionToken(STOK.INSECURE, isession) : 0U;

        when(userid != 0) {
            post_id = UInt32.Parse(context.Vars["p"]);
            def transform = context.Vars["r"];
            def content = context.Vars["t"];
            (ok, output) = renderPost(transform, content);

            when(ok) {
                def commmand = Database.createCommand(
                    "UPDATE Posts SET InputContent=@InputContent, "
                        "OutputContent=@OutputContent, Transform=@Transform WHERE "
                        "Id=@Id") <- [
                    "@InputContent" = content,
                    "@OutputContent" = output,
                    "@Transform" = transform,
                    "@Id" = post_id,
                ];

                def result2 = commmand.executeNonQuery();
                when(result2 <= 0) {
                    ok = false;
                }
            }
        }

        if(ok) {
            def json = JsonObject() <- [
                "p" = post_id,
                "o" = output,
            ];
            response.append(json.toString());
            response.Status = (200, "OK");
        } else {
            internalServerErrorResponse(context, request, response);
        }
    }

    public getPostDataResponse(
        context: Context, request: Request, response: Response): void {

        mutable ok = false;
        mutable input = "", output = "", transform = "";
        mutable post_id;
        def cookies = request.Cookies;
        def isession = cookies ? cookies["_isession"] : null;
        def userid = isession ?
            getUserIdFromSessionToken(STOK.INSECURE, isession) : 0U;

        when(userid != 0) {
            post_id = UInt32.Parse(context.Vars["p"]);
            def commmand = Database.createCommand(
                "SELECT InputContent, OutputContent, Transform FROM Posts WHERE "
                    "Id=@Id") <- [
                "@Id" = post_id,
            ];

            commmand.execute(reader => {
                input = reader.getValue("InputContent");
                output = reader.getValue("OutputContent");
                transform = reader.getValue("Transform");
            });

            ok = true;
        }

        if(ok) {
            def json = JsonObject() <- [
                "p" = post_id,
                "o" = output,
                "i" = input,
                "t" = transform,
            ];
            response.append(json.toString());
            response.Status = (200, "OK");
        } else {
            internalServerErrorResponse(context, request, response);
        }
    }

    public renderPost(method: string, text: string): bool * string {
        def bbc = getModuleInterface.[mod.IBbCode]();
        def txt = getModuleInterface.[mod.ITextile]();
        def htm = getModuleInterface.[mod.IHtmlSanitizer]();
        mutable ok = true;

        def pre =
            match(method) {
                | "bbcode" => bbc.transform(text);
                | "textile" => txt.transform(text);
                | "htmlsan" => text;
                | _ => { ok = false; ""; }
            };

        (ok, htm.transform(pre));
    }

    public filterTestResponse(
        context: Context, request: Request, response: Response): void {

        def filter = getModuleInterface.[mod.IFilter]();
        if(filter != null) {
            def i = request.QueryString["input"];
            def input = i ? i : ("Use ?input=xyz on "
                "the query string to test a different phrase!");
            def output = input ? filter.transform(input) : "";

            response.append("<html><body><h1>Filter Test</h1>"
                $"<p>Input: $input</p><p>Output: $output</p>"
                "</body></html>");
            response.Status = (200, "OK");
        } else {
            internalServerErrorResponse(context, request, response);
        }
    }

    public updatePrefsResponse(
        context: Context, request: Request, response: Response): void {

        def m = context.Vars["m"];
        def l = context.Vars["l"];
        def c = context.Vars["c"];
        def r = context.Vars["r"];
        def f = context.Vars["f"];
        def cookies = request.Cookies;
        def isession = cookies ? cookies["_isession"] : null;
        def userid = isession ?
            getUserIdFromSessionToken(STOK.INSECURE, isession) : 0U;
        mutable ok = false;

        when(userid != 0) {
            def command = Database.createCommand(
                "UPDATE Users SET Location=@Location, Motto=@Motto, "
                    "Colour=@Colour, Transform=@Transform, Font=@Font WHERE "
                    "Id=@Id") <- [
                "@Location" = l,
                "@Motto" = m,
                "@Colour" = c,
                "@Transform" = r,
                "@Font" = f,
                "@Id" = userid,
            ];
            def x = command.executeNonQuery();
            ok = (1 == x);
        }

        if(ok) {
            response.Status = (200, "OK");
        } else {
            internalServerErrorResponse(context, request, response);
        }
    }

    public override internalServerError(ex: Exception): void {
        Log.e("INTERNAL SERVER ERROR!\n{0}\n{1}",
            ex.Message, ex.GetExtendedStackTrace());
    }

    public getDefaultPrefix(request: Request): string {
        if(request.IsSecure) {
            DefaultSecurePrefix
        } else {
            DefaultInsecurePrefix
        }
    }

    public getUserCount(): int {
        def commmand = Database.createCommand("SELECT COUNT(Name) FROM Users");
        def ex = commmand.executeScalar() :> long;
        unchecked ex :> int;
    }

    public getPostCount(thread_id: uint): int {
        def commmand = Database.createCommand(
            "SELECT COUNT(Id) FROM Posts WHERE ThreadId = @ThreadId") <- [
                "@ThreadId" = thread_id,
            ];
        def ex = commmand.executeScalar() :> long;
        unchecked ex :> int;
    }

    public getThreadCount(cat_id: uint): int {
        def commmand = Database.createCommand(
            "SELECT COUNT(Id) FROM Threads WHERE CategoryId = @CategoryId") <- [
                "@CategoryId" = cat_id,
            ];
        def ex = commmand.executeScalar() :> long;
        unchecked ex :> int;
    }

    public getUserName(user_id: uint): string {
        def commmand = Database.createCommand(
            "SELECT Name FROM Users WHERE Id = @Id") <- [ "@Id" = user_id ];
        commmand.executeScalar() :> string;
    }

    public getCategoryName(cat_id: uint): string {
        def commmand = Database.createCommand(
            "SELECT Name FROM Categories WHERE Id = @Id") <- [ "@Id" = cat_id ];
        commmand.executeScalar() :> string;
    }

    public registerSessionToken(
        tok: SessionTokenType, id: uint): bool * string * DateTime {

        SessionToken.register(tok, id);
    }

    public getUserIdFromSessionToken(
        tok: SessionTokenType, token: string): uint {

        SessionToken.getUserId(tok, token);
    }
}


} // namespace forum
