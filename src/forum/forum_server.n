using System;

using Nemerle.Extensions;
using Nemerle.IO;

using httplib;


namespace forum {

class ForumServer: Server {

    public this(path: string) {
        base(path);

        route(HTTP.GET, "/", indexResponse);

        route(HTTP.GET, "/nav-{{action}}", navGetResponse);
        route(HTTP.POST, "/nav-{{action}}", navPostResponse);

        route([
            (HTTP.GET, "/th/{{id:[0-9]+}}/{{rest:.*}}"),
            (HTTP.GET, "/th/{{id:[0-9]+}}")], testResponse);

        route(HTTP.GET, "/pwtest", pwResponse);
    }

    public indexResponse(
        _context: Context, _request: Request, response: Response): void {

        response.append(renderPage("index.nyml"));
        response.Status = (200, "OK");
    }

    public navGetResponse(
        context: Context, request: Request, response: Response): void {

        def action = context.Vars["action"];
        def lambda = match(action) {
            | "login" => navLoginResponse
            | _ => methodNotAllowedResponse
        };
        lambda(context, request, response);
    }

    public navPostResponse(
        context: Context, request: Request, response: Response): void {

        def _user = context.Vars["user"];
        def _password = context.Vars["password"];
        def action = context.Vars["action"];
        def lambda = match(action) {
            | "signin" => navSigninResponse
            | "signout" => navSignoutResponse
            | _ => methodNotAllowedResponse
        }
        lambda(context, request, response);
    }

    public navLoginResponse(
        _context: Context, request: Request, response: Response): void {

        if(request.IsSecure) {

            def cookies = request.Cookies;
            def auth = if(cookies != null) { cookies["_auth"] } else { null };
            if(!String.IsNullOrEmpty(auth)) {
                def data = PageData() <- [ "User" = auth ];
                response.append(renderPage("nav-ok.nyml", data));
                response.Status = (200, "OK");
            } else {
                response.append(renderPage("nav-login.nyml"));
                response.Status = (200, "OK");
            }
        } else {
            response.append("<html><body><h1>Forbidden!</h1></body></html>");
            response.Status = (403, "Forbidden");
        }
    }

    public navSigninResponse(
        context: Context, request: Request, response: Response): void {
        if(request.IsSecure) {
            // System.Net.Cookie flags don't seem to be respected, so set a
            // cookie header explicitly...
            def user = context.Vars["user"];
            response["Set-Cookie"] = $"_auth=$user; path=/; secure; httponly";
            response["Location"] = "http://localhost:8080/";
            response.Status = (303, "See Other");
        } else {
            response.append("<html><body><h1>Forbidden!</h1></body></html>");
            response.Status = (403, "Forbidden");
        }
    }

    public navSignoutResponse(
        _context: Context, request: Request, response: Response): void {
        if(request.IsSecure) {
            // System.Net.Cookie flags don't seem to be respected, so set a
            // cookie header explicitly...
            response["Set-Cookie"] = "_auth=; path=/; secure; httponly";
            response["Location"] = "http://localhost:8080/";
            response.Status = (303, "See Other");
        } else {
            response.append("<html><body><h1>Forbidden!</h1></body></html>");
            response.Status = (403, "Forbidden");
        }
    }

    public testResponse(
        context: Context, _request: Request, response: Response): void {

        def id = context.Vars["id"];
        def rest = context.Vars["rest"];

        response.append(
            $"<html><body><h1>Thread ID=$id</h1>"
            $"<p><tt>rest=$rest</tt></p></body></html>");
        response.Status = (200, "OK");
    }

    public pwResponse(
        _context: Context, _request: Request, response: Response): void {

        def auth = getModuleInterface.[mod.IAuth]();
        if(auth != null) {
            def test_pw = "n0ts3cr3t";
            def record = auth.createPasswordRecord(test_pw);
            mutable sw = Diagnostics.Stopwatch();
            sw.Start();
            def valid = auth.validatePassword(test_pw, record);
            sw.Stop();
            def tvalid = sw.ElapsedMilliseconds;
            sw.Reset();
            sw.Start();
            def invalid = auth.validatePassword("owls", record);
            sw.Stop();
            def tinvalid = sw.ElapsedMilliseconds;
            sw.Reset();
            response.append("<html><body><h1>Auth test</h1>"
                $"<p>Input password is: '$test_pw'.</p>"
                $"<p>Password record is: '$record'.</p>"
                $"<p>Password record length is: '$(record.Length)'.</p>"
                $"<p>Validation result is: '$valid'.</p>"
                $"<p>Validation took: $(tvalid)ms.</p>"
                $"<p>Failed result is: '$invalid'.</p>"
                $"<p>Failed took: $(tinvalid)ms.</p>"
                "</body></html>");
            response.Status = (200, "OK");
        } else {
            response.append("<html><body><h1>Error: no auth module</h1></body></html>");
            response.Status = (500, "Err");
        }
    }

    protected override internalServerError(ex: Exception): void {
        print("INTERNAL SERVER ERROR!\n"
            $"$(ex.Message)\n"
            $"$(ex.StackTrace)\n");
    }
}


} // namespace forum
