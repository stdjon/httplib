using System;
using System.Collections.Generic;
using System.Math;
using System.Text.RegularExpressions;

using Nemerle.Extensions;

using httplib;


namespace forum {

public type NotifyType = NT;
public enum NT {
    | REPLY = 1
    | POST = 2
    | MENTION = 3
    | STAR = 4
}


public module NotifyTypeExtensions {

    public toNotifyType(this _: uint): NotifyType {
        | 1 => REPLY
        | 2 => POST
        | 3 => MENTION
        | 4 => STAR
        | _ => throw Exception("bad Db value")
    }

    public symbol(this _: NotifyType): string {
        | REPLY => "<span class='fa fa-reply'></span>"
        | POST => "<span class='fa fa-envelope-o'></span>"
        | MENTION => "<span class='fa fa-at'></span>"
        | STAR => "<span class='fa fa-star'></span>"
    }

    // TODO: config? l10n?
    public format(this _: NotifyType): string {
        | REPLY => "{0} replied to you in thread {1}"
        | POST => "{0} posted in your thread {1}"
        | MENTION => "{0} mentioned you in thread {1}"
        | STAR => "{0} starred your post in thread {1}"
    }
}


[HasLogging]
public class ForumDatabase: IDisposable {

    public Server: ForumServer { get; private set; }
    public Database: Database { get; private set; }
    SessionToken: SessionToken { get; private set; }

    public this(server: ForumServer, name = "default") {
        Server = server;
        Database = Server.openDatabase(name);
        SessionToken = SessionToken(Server);
    }

    public Dispose(): void {
        Database.Dispose();
    }

    public sendUpdate(json: JsonObject): void {
        Server.sendUpdate(json);
    }

    public registerSessionToken(
        tok: SessionTokenType, id: uint): bool * string * DateTime {

        SessionToken.register(tok, id, Database);
    }

    public expireSessionTokens(
        tok: SessionTokenType, id: uint): void {

        SessionToken.expire(tok, id, Database);
    }

    public getUserIdFromSessionToken(
        tok: SessionTokenType, token: string): uint {

        SessionToken.getUserId(tok, token, Database);
    }

    public getUserIdFromCookie(
        request: Request, tok: SessionTokenType): uint {
        def cookiename = match(tok) {
            | INSECURE => "_isession"
            | SECURE => "_session"
            | _ => null
        };
        def cookies = request.Cookies;
        def cookie = cookies ? cookies[cookiename] : null;
        cookie ? getUserIdFromSessionToken(tok, cookie) : 0U;
    }

    public getUserCount(): int {
        def command = Database.createCommand("SELECT COUNT(Name) FROM Users");
        def ex = command.executeScalar() :> long;
        unchecked ex :> int;
    }

    public getNotificationCount(user_id: uint): int {
        def command = Database.createCommand(
            "SELECT COUNT(Id) FROM Notifications WHERE UserId = @UserId") <- [
                "@UserId" = user_id,
            ];
        def ex = command.executeScalar() :> long;
        unchecked ex :> int;
    }

    public getCategoryCount(): int {
        def command = Database.createCommand("SELECT COUNT(Id) FROM Categories");
        def ex = command.executeScalar() :> long;
        unchecked ex :> int;
    }

    public getTagCount(): int {
        def command = Database.createCommand("SELECT COUNT(Id) FROM Tags");
        def ex = command.executeScalar() :> long;
        unchecked ex :> int;
    }

    public getPostCount(thread_id: uint): int {
        def command = Database.createCommand(
            "SELECT COUNT(Id) FROM Posts WHERE ThreadId = @ThreadId") <- [
                "@ThreadId" = thread_id,
            ];
        def ex = command.executeScalar() :> long;
        unchecked ex :> int;
    }

    public getPostThumbs(post_id: uint): int {
        def command = Database.createCommand(
            "SELECT COUNT(Id) FROM Thumbs WHERE "
                "PostId = @PostId") <- [
            "@PostId" = post_id,
        ];
        def result = command.executeScalar() :> long;
        unchecked result :> int;
    }

    public getPostBoomarks(post_id: uint): int {
        def command = Database.createCommand(
            "SELECT COUNT(Id) FROM Bookmarks WHERE "
                "PostId = @PostId") <- [
            "@PostId" = post_id,
        ];
        def result = command.executeScalar() :> long;
        unchecked result :> int;
    }

    public getThreadCount(cat_id: uint): int {
        def command = Database.createCommand(
            "SELECT COUNT(Id) FROM Threads WHERE CategoryId = @CategoryId") <- [
                "@CategoryId" = cat_id,
            ];
        def ex = command.executeScalar() :> long;
        unchecked ex :> int;
    }

    public getThreadTitle(thread_id: uint): string {
        def command = Database.createCommand(
            "SELECT Title FROM Threads WHERE Id = @Id") <- [ "@Id" = thread_id ];
        command.executeScalar() :> string;
    }

    public forEachPostInThread(thread_id: uint, lambda: int * uint -> void): void {
        def command = Database.createCommand(
            "SELECT Id FROM Posts WHERE ThreadId = @ThreadId") <- [
                "@ThreadId" = thread_id
            ];
        _ = command.execute((j, reader) => {
            def pid = reader.getValue("Id", 0U);
            lambda(j, pid);
        });
    }

    public getUserId(name: string): uint {
        def command = Database.createCommand(
            "SELECT Id FROM Users WHERE Name = @Name") <- [ "@Name" = name ];
        def u = command.executeScalar() :> uint?;
        u ? (u :> uint) : 0;
    }

    public getUserName(user_id: uint): string {
        def command = Database.createCommand(
            "SELECT Name FROM Users WHERE Id = @Id") <- [ "@Id" = user_id ];
        command.executeScalar() :> string;
    }

    public getUserEmail(user_id: uint): string {
        def command = Database.createCommand(
            "SELECT Email FROM Auth WHERE UserId = @Id") <- [ "@Id" = user_id ];
        command.executeScalar() :> string;
    }

    public getCategoryId(name: string): uint {
        def command = Database.createCommand(
            "SELECT Id FROM Categories WHERE Name = @Name") <- [
                "@Name" = name
            ];
        def c = command.executeScalar() :> uint?;
        c ? (c :> uint) : 0;
    }

    public getCategoryName(cat_id: uint): string {
        def command = Database.createCommand(
            "SELECT Name FROM Categories WHERE Id = @Id") <- [ "@Id" = cat_id ];
        command.executeScalar() :> string;
    }

    public userIsAdmin(user_id: uint): bool {
        def command = Database.createCommand(
            "SELECT IsAdmin FROM Users WHERE Id=@Id") <- [
                "@Id" = user_id
            ];
        def a = command.executeScalar() :> bool?;
        a ? (a :> bool) : false;
    }

    public getExistingTagId(tag: string): uint? {
        def command = Database.createCommand(
            "SELECT Id From Tags WHERE Name=@Name") <- [ "@Name" = tag ];
        command.executeScalar() :> uint?;
    }

    public getExistingTag(tag_id: uint): string {
        mutable result = null;
        when(tag_id > 0) {
            result = (Database.createCommand(
                "SELECT Name From Tags WHERE Id=@Id") <- [ "@Id" = tag_id ]).
                executeScalar() :> string;
        }
        result;
    }

    public getTagIds(tags: array[string]): array[uint] {

        mutable result = array((tags != null) ? tags.Length : 0);
        when(tags != null) {
            Database.withTransaction(db => {
                mutable i = 0;
                foreach(t in tags) {
                    def id = getExistingTagId(t);
                    if(id != null) {
                        result[i] = id :> uint;
                    } else {
                        def command2 = db.createCommand("INSERT Into Tags(Name) "
                            "VALUES(@Name)") <- [ "@Name" = t ];
                        def result2 = command2.executeNonQuery();
                        when(result2 > 0) {
                            def id = getExistingTagId(t);
                            if(id != null) {
                                result[i] = id :> uint;
                            } else {
                                Log.e("Could not insert Tag '{0}'!", t);
                            }
                        }
                    }
                    i++;
                }
            }, ex => {
                Server.internalServerError(ex);
            });
        }
        result;
    }

    public deleteExistingPostTags(post_id: uint): void {
        def command = Database.createCommand(
            "DELETE FROM PostTags WHERE (PostId = @PostId)") <- [
                "@PostId" = post_id
            ];
        _ = command.executeNonQuery();
    }

    public insertPostTags(post_id: uint, tag_ids: array[uint]): bool {
        mutable result = true;
        foreach(id in tag_ids) {
            def command = Database.createCommand(
                "INSERT INTO PostTags(PostId, TagId) VALUES(@PostId, @TagId)") <- [
                    "@PostId" = post_id,
                    "@TagId" = id,
                ];
            def result2 = command.executeNonQuery();
            when(result2 <= 0) {
                Log.e("Could not insert PostTags({0}, {1})", post_id, id);
                result = false;
            }
        }
        result;
    }

    public getPostTags(post_id: uint): array[string] {
        mutable tags = array(5);
        def tag_ids = array(5);
        def command = Database.createCommand(
            "SELECT TagId FROM PostTags WHERE PostId=@PostId") <- [
                "@PostId" = post_id,
            ];
        _ = command.execute((j, reader) => {
            tag_ids[j] = reader.getValue("TagId", 0U);
        });
        mutable k = 0;
        for(mutable j = 0; j < tag_ids.Length; j++) {
            def t = getExistingTag(tag_ids[j]);
            when(t != null) {
                tags[k] = t;
                k++;
            }
        }
        if(k > 0) {
            Array.Resize(ref tags, k);
            tags;
        } else {
            null;
        }
    }

    public static tagsFromTagString(tag_string: string): array[string] {
        def tag_input = tag_string ?
            tag_string.Split(array['\0'], 5,
                StringSplitOptions.RemoveEmptyEntries) : array(0);

        mutable tags = array(5);
        mutable i = 0;

        foreach(t in tag_input) {
            mutable u = t.Split(array['\0'], 2)[0];
            u = Uri.UnescapeDataString(u);
            when(u.Length > 30) {
                u = u.Substring(0, 30);
            }
            tags[i] = u.Trim();
            i++;
        }

        Array.Resize(ref tags, i);
        tags;
    }

    public createPost(user_id: uint, thread_id: uint,
        reply_to: uint?, transform: string, input: string,
        tag_string: string = null): uint * string * long {

        mutable post_id = 0U;
        mutable output = "";
        mutable mentions = List();
        mutable utc_now = Date.NowTicks;
        mutable ok = false;
        mutable render_ok = false;

        when(user_id > 0) {
            (render_ok, output) = Server.renderPost(transform, input, mentions);
        }

        when(render_ok) {
            Database.withTransaction(db => {
                def command = db.createCommand(
                    "INSERT INTO Posts(InputContent, OutputContent, "
                        "Transform, UserId, ThreadId, CreateDate) VALUES("
                        "@InputContent, @OutputContent, "
                        "@Transform, @UserId, @ThreadId, @CreateDate)") <- [
                    "@InputContent" = input,
                    "@OutputContent" = output,
                    "@Transform" = transform,
                    "@UserId" = user_id,
                    "@ThreadId" = thread_id,
                    "@CreateDate" = utc_now,
                ];

                def result = command.executeNonQuery();
                when(result > 0) {
                    def command2 = db.createCommand(
                        "SELECT Id FROM Posts WHERE "
                            "UserId=@UserId AND CreateDate=@CreateDate") <- [
                        "@UserId" = user_id,
                        "@CreateDate" = utc_now,
                    ];
                    def result2 = command2.executeScalar() :> uint?;
                    post_id = result2 ? (result2 :> uint) : 0U;

                    when(post_id > 0U) {
                        if(reply_to != null) {
                            def command3 = db.createCommand(
                                "INSERT INTO Replies(PostId, ReplyTo) VALUES("
                                    "@PostId, @ReplyTo)") <- [
                                "@PostId" = post_id,
                                "@ReplyTo" = reply_to :> uint,
                            ];
                            def result3 = command3.executeNonQuery();
                            when(result3 > 0) {
                                def command4 = db.createCommand(
                                    "UPDATE Posts SET ReplyTo=@ReplyTo "
                                        "WHERE Id=@Id") <- [
                                    "@ReplyTo" = reply_to :> uint,
                                    "@Id" = post_id,
                                ];
                                def result4 = command4.executeNonQuery();
                                when(result4 > 0) {
                                    ok = true;
                                }
                            }
                        } else {
                            ok = true;
                        }
                    }

                    when(ok) {
                        def tags = tagsFromTagString(tag_string);
                        def ids = getTagIds(tags);
                        _ = insertPostTags(post_id, ids);

                        sendUpdate(JsonObject() <- [
                            "type" = "post",
                            "action" = "create",
                            "post_id" = post_id,
                            "thread_id" = thread_id,
                        ]);
                    }
                }
            }, ex => {
                Server.internalServerError(ex);
            });
        }

        if(ok) {
            def command = Database.createCommand(
                "SELECT UserId FROM Threads WHERE Id = @Id") <- [
                    "@Id" = thread_id,
                ];
            def thread_user = command.executeScalar() :> uint;
            createNotification(thread_user, user_id, thread_id, post_id, NT.POST);

            when(reply_to != null) {
                def command2 = Database.createCommand(
                    "SELECT UserId From Posts WHERE Id = @Id") <- [
                        "@Id" = reply_to,
                    ];
                def replied_to = command2.executeScalar() :> uint;
                createNotification(
                    replied_to, user_id, thread_id, post_id, NT.REPLY);
            }

            foreach(m in mentions) {
                createNotification(m, user_id, thread_id, post_id, NT.MENTION);
            }

            (post_id, output, utc_now);
        } else {
            (0U, "", 0L);
        }
    }

    public updatePost(post_id: uint, transform: string,
        input: string, tag_string: string = null): bool * string {

        mutable ok = false;
        def (render_ok, output) = Server.renderPost(transform, input);

        when(render_ok) {
            Database.withTransaction(db => {
                def command = db.createCommand(
                    "UPDATE Posts SET InputContent = @InputContent, "
                        "OutputContent = @OutputContent, "
                        "Transform = @Transform WHERE Id=@Id") <- [
                    "@InputContent" = input,
                    "@OutputContent" = output,
                    "@Transform" = transform,
                    "@Id" = post_id,
                ];

                def result2 = command.executeNonQuery();
                ok = (result2 > 0);

                when(ok) {
                    def tags = tagsFromTagString(tag_string);
                    deleteExistingPostTags(post_id);
                    def ids = getTagIds(tags);
                    _ = insertPostTags(post_id, ids);

                    sendUpdate(JsonObject() <- [
                        "type" = "post",
                        "action" = "update",
                        "post_id" = post_id,
                    ]);
                }
            }, ex => {
                Server.internalServerError(ex);
            });
        }
        (ok, output);
    }

    public thumbPost(post_id: uint, user_id: uint, on: bool): void {

        Log.d("thumbPost(p:{0}, u:{1}, {2})", post_id, user_id, on);
        Database.withTransaction(db => {
            def check = isThumbPost(post_id, user_id);
            when(on != check) {
                def cmdstr = on ?
                    ("INSERT INTO Thumbs(PostId, UserId) "
                        "VALUES (@PostId, @UserId)") :
                    ("DELETE FROM Thumbs WHERE "
                        "PostId = @PostId AND UserId = @UserId");

                def command = db.createCommand(cmdstr) <- [
                    "@PostId" = post_id,
                    "@UserId" = user_id,
                ];

                def _result = command.executeNonQuery();
                Log.d("thumbPost {0} -> {1}", (on ? "insert" : "delete"), _result);
                def command2 = db.createCommand(
                    "SELECT UserId From Posts WHERE Id = @Id") <- [
                        "@Id" = post_id,
                    ];
                def uid = command2.executeScalar() :> uint;
                when(uid != user_id) {
                    addPointsToUser(uid, on ? 5 : -5);
                }
            }
        }, ex => {
            Server.internalServerError(ex);
        });
    }

    public createNotification(user_id: uint, from_user_id: uint,
        thread_id: uint, post_id: uint, type: NotifyType): void {

        when(user_id != from_user_id) {

            def command = Database.createCommand(
                "SELECT COUNT(Id) FROM Notifications WHERE UserId = @UserId AND "
                    "FromUserId = @FromUserId AND ThreadId = @ThreadId AND "
                    "PostId = @PostId AND NotifyType = @NotifyType") <- [
                "@UserId" = user_id,
                "@FromUserId" = from_user_id,
                "@ThreadId" = thread_id,
                "@PostId" = post_id,
                "@NotifyType" = type,
            ];
            def result = (command.executeScalar() :> long?) :> int;

            when(result < 1) {
                def command2 = Database.createCommand(
                    "INSERT INTO Notifications("
                        "UserId, FromUserId, "
                        "ThreadId, PostId, NotifyType, CreateDate) VALUES("
                        "@UserId, @FromUserId, "
                        "@ThreadId, @PostId, @NotifyType, @CreateDate)") <- [
                    "@UserId" = user_id,
                    "@FromUserId" = from_user_id,
                    "@ThreadId" = thread_id,
                    "@PostId" = post_id,
                    "@NotifyType" = type,
                    "@CreateDate" = Date.NowTicks,
                ];
                _ = command2.executeNonQuery();
            }
        }
    }

    public isThumbPost(post_id: uint, user_id: uint): bool {
        mutable result;
        def command = Database.createCommand(
            "SELECT COUNT(Id) FROM Thumbs WHERE "
                "PostId=@PostId AND UserId=@UserId") <- [
            "@PostId" = post_id,
            "@UserId" = user_id,
        ];
        result = command.executeScalar() :> long;
        result > 0;
    }

    public starPost(post_id: uint, user_id: uint, on: bool,
        post_user_id: uint?, thread_id: uint?): void {

        Log.d("starPost(p:{0}, u:{1}, {2})", post_id, user_id, on);
        Database.withTransaction(db => {
            def check = isStarPost(post_id, user_id);
            when(on != check) {
                def cmdstr = on ?
                    ("INSERT INTO Bookmarks(PostId, UserId) "
                            "VALUES (@PostId, @UserId)") :
                    ("DELETE FROM Bookmarks WHERE "
                            "PostId = @PostId AND UserId = @UserId");

                def command = db.createCommand(cmdstr) <- [
                    "@PostId" = post_id,
                    "@UserId" = user_id,
                ];

                def _result = command.executeNonQuery();
                Log.d("starPost {0} -> {1}", (on ? "insert" : "delete"), _result);
                def command2 = db.createCommand(
                    "SELECT UserId From Posts WHERE Id = @Id") <- [
                        "@Id" = post_id,
                    ];
                def uid = command2.executeScalar() :> uint;
                when(uid != user_id) {
                    addPointsToUser(uid, on ? 2 : -2);
                }
                when(on) {
                    createNotification(post_user_id :> uint,
                        user_id, thread_id :> uint, post_id, NT.STAR);
                }
            }
        }, ex => {
            Server.internalServerError(ex);
        });
    }

    public isStarPost(post_id: uint, user_id: uint): bool {
        mutable result;
        def command = Database.createCommand(
            "SELECT COUNT(Id) FROM Bookmarks WHERE "
                "PostId=@PostId AND UserId=@UserId") <- [
            "@PostId" = post_id,
            "@UserId" = user_id,
        ];
        result = command.executeScalar() :> long;
        result > 0;
    }

    public addPointsToUser(user_id: uint, points: int): void {

        Database.withTransaction(db => {
            def command = db.createCommand(
                "SELECT Points FROM Users WHERE Id = @Id") <- [
                    "@Id" = user_id,
                ];
            mutable user_points = command.executeScalar() :> int;
            user_points += points;
            def level = pointsToLevel(user_points);

            def command2 = db.createCommand(
                "UPDATE Users SET Points = @Points, Level = @Level WHERE "
                    "Id = @Id") <- [
                "@Points" = user_points,
                "@Level" = level,
                "@Id" = user_id,
            ];
            _ = command2.executeNonQuery();

        }, ex => {
            Server.internalServerError(ex);
        });
    }

    public static pointsToLevel(points: int): float {
        def bias = 25.0f; //TODO: config
        def scale = 3.0f; //TODO: config
        def level = Max(0.0f, Log(points / bias, scale) :> float + 1.0f);
        //Log.t("points {0} -> level {1}", points, level);
        level;
    }

    public parseOutputForMentions(output: ref string, mentions: List[uint]): void {

        output = Regex("(@[a-zA-Z_][a-zA-Z0-9_'-]+)").Replace(output, m => {
            def matched = m.Groups[0].ToString();
            def name = matched.Substring(1);
            def user_id = getUserId(name);
            def prefix = Server.DefaultInsecurePrefix;

            if(user_id > 0) {
                when(mentions != null && !mentions.Contains(user_id)) {
                    mentions.Add(user_id);
                }
                def n = getUserName(user_id);
                $<#<a href="$prefix/u/$n">@$n</a>#>
            } else {
                matched;
            }

        });
    }
}


} // namespace forum
