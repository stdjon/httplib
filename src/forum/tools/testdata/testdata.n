using System;

using Nemerle.Extensions;
using Nemerle.Utility;

using httplib;


namespace forum.tools {

[HasLogging]
public class TestData {

    [Accessor] static usernameChars: string =
        "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_01223456789'-";
    [Accessor] static categoryChars: string =
        "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ      ";
    [Accessor] static postChars: string =
        "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!.,;:      ";
    [Accessor] static hexChars: string = "01234567890abcdef";

    [Accessor] server: ForumServer;
    [Accessor] db: Database;
    [Accessor] auth: IAuth;
    [Accessor] random: Random = Random();

    [Accessor] mutable tags: array[string];
    [Accessor] mutable user_count: int = 0;
    [Accessor] mutable category_count: int = 0;
    [Accessor] mutable thread_count: int = 0;

    public this(fs: ForumServer) {
        Log.i("Generating test data...");
        server = fs;
        db = server.Database;
        auth = server.getModuleInterface.[IAuth]("Pbkdf2Auth");
    }

    public make(args: Program.Arguments): void {

        Log.i("Generating {0} users...", args.Users);
        for(mutable i = 0; i < args.Users; i++) {
            generateUser();
        }

        user_count = getUserCount();

        Log.i("Generating {0} categories...", args.Categories);
        for(mutable i = 0; i < args.Categories; i++) {
            generateCategory();
        }

        category_count = getCategoryCount();

        Log.i("Generating {0} threads...", args.Threads);
        for(mutable i = 0; i < args.Threads; i++) {
            generateThread();
        }

        thread_count = getThreadCount();

        Log.i("Generating {0} tags...", args.Tags);
        tags = array(args.Tags);
        for(mutable i = 0; i < args.Tags; i++) {
            tags[i] = generateTagName();
        }

        thread_count = getThreadCount();
        Log.i("Generating {0} posts...", args.Posts);
        for(mutable i = 0; i < args.Posts; i++) {
            generatePost();
        }
    }

    generateUser(): void {
        mutable ok = false;
        def name = generateUserName();
        def joindate = Date.NowTicks;
        def motto = generateMotto();
        def location = generateMotto();
        def colour = generateColour();

        def command1 = Db.createCommand(
            "INSERT INTO Users("
                "Name, Points, Level, JoinDate, Motto, Location, Colour, Transform, Font) VALUES "
                "(@Name, 0, 0, @JoinDate, @Motto, @Location, @Colour, 'bbcode', 'serif1')") <- [
            "@Name" = name,
            "@JoinDate" = joindate,
            "@Motto" = motto,
            "@Location" = location,
            "@Colour" = colour,
        ];
        _ = command1.executeNonQuery();

        def command2 = Db.createCommand(
            "SELECT Id FROM Users WHERE Name=@Name") <- [ "@Name" = name ];
        def id = command2.executeScalar() :> uint?;
        mutable pwid = null;

        when(id !=  null) {
            // allow login with empty string...
            def record = auth.createPasswordRecord("");
            def command3 = Db.createCommand(
                "INSERT INTO Auth(UserId, PwRecord, Email) VALUES "
                    "(@UserId, @PwRecord, '')") <- [
                "@UserId" = id,
                "@PwRecord" = record,
            ];
            _ = command3.executeNonQuery();

            def command4 = Db.createCommand(
                "SELECT Id FROM Auth WHERE UserId=@UserId") <- [ "@UserId" = id ];
            pwid = command4.executeScalar() :> uint?;
            ok = (pwid != null);
        }
        if(ok) {
            Log.d("User '{0}' added to database [id={1}, pwid={2}]...", name, id, pwid);
        } else {
            Log.w("User '{0}' was not properly added!", name)
        }

    }

    generateCategory(): void {
        def name = generateCategoryName();
        def id = Random.Next(UserCount) + 1;
        def create_date = Date.NowTicks;
        def colour = generateColour();
        def command2 = Db.createCommand(
            "INSERT INTO Categories(Name, UserId, CreateDate, Colour) VALUES "
                "(@Name, @UserId, @CreateDate, @Colour)") <- [
            "@Name" = name,
            "@UserId" = id,
            "@CreateDate" = create_date,
            "@Colour" = colour,
        ];
        _ = command2.executeNonQuery();

        def command3 = Db.createCommand(
            "SELECT Id FROM Categories WHERE Name=@Name") <- [ "@Name" = name ];
        def catid = command3.executeScalar() :> uint?;

        if(catid != null) {
            Log.d("Category '{0}' added to database [id={1}, user={2}]...", name, catid, id);
        } else {
            Log.w("Category '{0}' was not properly added!", name)
        }
    }

    generateThread(): void {
        def title = generateThreadTitle();
        def uid = Random.Next(UserCount) + 1;
        def cid = Random.Next(CategoryCount) + 1;
        def create_date = Date.NowTicks;
        def colour = generateColour();
        def command2 = Db.createCommand(
            "INSERT INTO Threads(Title, UserId, CategoryId, CreateDate, Colour) VALUES "
                "(@Title, @UserId, @CategoryId, @CreateDate, @Colour)") <- [
            "@Title" = title,
            "@UserId" = uid,
            "@CategoryId" = cid,
            "@CreateDate" = create_date,
            "@Colour" = colour,
        ];
        _ = command2.executeNonQuery();

        def command3 = Db.createCommand(
            "SELECT Id FROM Threads WHERE Title=@Title") <- [ "@Title" = title ];
        def thid = command3.executeScalar() :> uint?;

        if(thid != null) {
            Log.d("Thread '{0}' added to database [id={1}, cat={2}, user={3}]...", title, thid, cid, uid);
        } else {
            Log.w("Thread '{0}' was not properly added!", title)
        }
    }

    generatePost(): void {
        def content = generatePostContent();
        def uid = Random.Next(UserCount) :> uint + 1;
        def tid = Random.Next(ThreadCount) :> uint + 1;
        def tags = array(Random.Next(Random.Next(6)));

        for(mutable i = 0; i < tags.Length; i++) {
            tags[i] = Tags[Random.Next(Tags.Length)];
        }
        def tag_string = String.Join("\0", tags);

        def replyto = (Random.Next(5) < 2) ? null : {
            mutable result: uint? = null;
            def commmand1 = Db.createCommand(
                "SELECT COUNT(Id) FROM Posts WHERE ThreadId=@ThreadId") <- [
                    "@ThreadId" = tid,
                ];
            def count = commmand1.executeScalar() :> long?;
            when(count != null) {
                def commmand2 = Db.createCommand("SELECT Id FROM Posts WHERE "
                    "ThreadId=@ThreadId LIMIT @N, @N") <- [
                        "@ThreadId" = tid,
                        "@N" = Random.Next(count :> int),
                    ];
                result = commmand2.executeScalar() :> uint?;
            }
            result;
        };

        def (pid, _o, _d) = server.createPost(
            uid, tid, replyto, "bbcode", content, tag_string);

        if(pid != 0) {
            Log.d("Post added to database ({0} tags)"
                "[id={1}, th={2}, user={3}, replyto={4}]...",
                tags.Length, pid, tid, uid, replyto);
        } else {
            Log.w("Post id={0} was not properly added!", pid)
        }
    }

    generateUserName(): string {
        mutable result = "";
        mutable disallow_last = 12;
        def length = Random.Next(3, Random.Next(3, 25));
        mutable name: array[char] = array(length);
        for(mutable i = 0; i < length; i++) {
            def x = Random.Next(UsernameChars.Length - disallow_last);
            name[i] = UsernameChars[x];
            disallow_last = 0;
        }
        result = string(name);
        //Log.d("User: '{0}'", result);
        result;
    }

    generateMotto(): string {
        mutable result = "";
        def length = Random.Next(3, Random.Next(15, 40));
        mutable name: array[char] = array(length);
        for(mutable i = 0; i < length; i++) {
            def x = Random.Next(PostChars.Length);
            name[i] = PostChars[x];
        }
        result = string(name);
        //Log.d("User: '{0}'", result);
        result;
    }

    generateCategoryName(): string {
        mutable result = "";
        def length = Random.Next(3, Random.Next(10, 25));
        mutable name: array[char] = array(length);
        for(mutable i = 0; i < length; i++) {
            def x = Random.Next(CategoryChars.Length);
            name[i] = CategoryChars[x];
        }
        result = string(name);
        //Log.d("Category: '{0}'", result);
        result;
    }

    generateThreadTitle(): string {
        mutable result = "";
        def length = Random.Next(3, Random.Next(10, 80));
        mutable name: array[char] = array(length);
        for(mutable i = 0; i < length; i++) {
            def x = Random.Next(CategoryChars.Length);
            name[i] = CategoryChars[x];
        }
        result = string(name);
        //Log.d("Title: '{0}'", result);
        result;
    }

    generateTagName(): string {
        mutable result = "";
        def length = Random.Next(1, Random.Next(15, 30));
        mutable name: array[char] = array(length);
        for(mutable i = 0; i < length; i++) {
            def x = Random.Next(PostChars.Length);
            name[i] = PostChars[x];
        }
        result = string(name);
        //Log.d("Tag: '{0}'", result);
        result;
    }

    generatePostContent(): string {
        mutable result = "";
        def length = Random.Next(5, Random.Next(30, 800));
        mutable name: array[char] = array(length);
        for(mutable i = 0; i < length; i++) {
            def x = Random.Next(PostChars.Length);
            name[i] = PostChars[x];
        }
        result = string(name);
        //Log.d("OutputContent: '{0}'", result);
        result;
    }

    generateColour(): string {
        mutable result = "";
        def select = Random.Next(32);
        def xy = (0 == (select & 16)) ? "x" : "y";
        def c = ((select % 16) * 24).ToString();
        result = $"$xy$c";
        Log.d("Colour: '{0}'", result);
        result;
    }

    getUserCount(): int {
        def commmand = Db.createCommand("SELECT COUNT(Name) FROM Users");
        def ex = commmand.executeScalar() :> long;
        unchecked ex :> int;
    }

    getCategoryCount(): int {
        def commmand = Db.createCommand("SELECT COUNT(Name) FROM Categories");
        def ex = commmand.executeScalar() :> long;
        unchecked ex :> int;
    }

    getThreadCount(): int {
        def commmand = Db.createCommand("SELECT COUNT(Title) FROM Threads");
        def ex = commmand.executeScalar() :> long;
        unchecked ex :> int;
    }
}


} // namespace forum.tools
