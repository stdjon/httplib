using System;
using System.Text.RegularExpressions;

using httplib;

using Nemerle.Extensions;


namespace forum {

[HasHandlerFactory]
public class NavHandler: BasePageHandler {

    Method: HTTP { get; private set; }
    CurrentUrl: string { get; private set; }

    public this(hd: HandlerData, method: HTTP) {
        base(hd, null);

        mutable is_secure = false;
        Method = method;
        CurrentUrl = Request.QueryString["r"];

        PageData["IsNav"] = true;

        when(CurrentUrl != null) {
            PageData["CurrentUrl"] = CurrentUrl;
            is_secure = Regex("^https").IsMatch(CurrentUrl);
        }

        PageData["DefaultPrefix"] = is_secure ?
            Server.DefaultSecurePrefix :
            Server.DefaultInsecurePrefix;

        initializeSiteName();
    }

    public override callback(): void {

        def action = Context.Vars["action"];
        def not_allowed_response =
            () => Server.methodNotAllowedResponse(Context, Request, Response);

        def lambda = match(Method, action) {
            | (HTTP.GET, "login") => navLoginResponse
            | (HTTP.GET, "empty") => navEmptyResponse
            | (HTTP.POST, "signin") => navSigninResponse
            | (HTTP.POST, "signout") => navSignoutResponse
            | (HTTP.POST, "signup") => navSignupResponse
            | _ => not_allowed_response
        }

        lambda();
    }

    public navLoginResponse(): void {

        if(Request.IsSecure) {
            def cookies = Request.Cookies;
            def session = cookies ? cookies["_session"] : null;
            mutable id = 0U;

            when(!String.IsNullOrEmpty(session)) {
                id = ForumDatabase.getUserIdFromSessionToken(STOK.SECURE, session);
            }

            if(id > 0) {
                _ = PageData <- [
                    "Id" = id,
                    "User" = ForumDatabase.getUserName(id),
                    "Session" = session,
                ];
                // IsAdmin from BasePageHandler is determined from _isession; we
                // need to make sure that it is set from _session for the nav...
                PageData["IsAdmin"] = ForumDatabase.userIsAdmin(id);

                Response.append(Server.renderPage("nav-ok.nyml", PageData));
                Response.Status = (200, "OK");

            } else {
                Response.append(Server.renderPage("nav-login.nyml", PageData));
                Response.Status = (200, "OK");
            }
        } else {
            Response.append("<html><body><h1>Forbidden!</h1></body></html>");
            Response.Status = (403, "Forbidden");
        }
    }

    public navEmptyResponse(): void {

        if(Request.IsSecure) {
            Response.append(Server.renderPage("nav-empty.nyml", PageData));
            Response.Status = (200, "OK");
        } else {
            Response.append("<html><body><h1>Forbidden!</h1></body></html>");
            Response.Status = (403, "Forbidden");
        }
    }

    public navSigninResponse(): void {
        mutable ok = false;

        when(Request.IsSecure) {
            def user = Context.Vars["user"];
            def password = Context.Vars["password"];
            def auth = Server.getModuleInterface.[IAuth]("Pbkdf2Auth");
            def command1 = Database.createCommand(
                "SELECT Id FROM Users WHERE "
                    "Name = @Name") <- [ "@Name" = user ];
            def id = command1.executeScalar() :> uint?;
            mutable record;

            when(id != null) {
                def command2 = Database.createCommand(
                    "SELECT PwRecord FROM Auth WHERE "
                        "UserId = @UserId") <- [ "@UserId" = id ];
                record = command2.executeScalar() :> string;
            }

            ok = !String.IsNullOrEmpty(record) &&
                auth.validatePassword(password, record);
            Log.i("Login attempt as {0}: {1}", user, ok);

            when(ok) {
                def (_ok2, token, expiry) =
                    ForumDatabase.registerSessionToken(STOK.SECURE, id :> uint);

                def cookie_flags = Server.Configuration.ForceInsecureOperation ?
                    COOKIE.HTTP_ONLY : COOKIE.SECURE_HTTP_ONLY;
                Response.Cookies.add(
                    "_session", token, expiry, cookie_flags);
            }
        }

        if(ok) {
            Response.Status = (200, "OK");
        } else {
            Response.Status = (403, "Forbidden");
        }
    }

    public navSignoutResponse(): void {

        if(Request.IsSecure) {
            def cookies = Request.Cookies;
            def session = cookies ? cookies["_session"] : null;
            def id = ForumDatabase.getUserIdFromSessionToken(STOK.SECURE, session);

            when(!String.IsNullOrEmpty(session)) {
                def command = Database.createCommand(
                    "DELETE FROM Sessions WHERE (Id = @Id)") <- [
                        "@Id" = id
                    ];
                def rows = command.executeNonQuery();
                Log.i("Deleted {0} session tokens (user sign out)...", rows);
            }

            // Expire session cookies. Note that if the user has accessed the
            // site over https, then it is possible that an 'insecure' session
            // cookie was added, so we need to expire both here.
            Response.Cookies.expire("_session", COOKIE.SECURE_HTTP_ONLY);
            Response.Cookies.expire("_isession", COOKIE.HTTP_ONLY);

            // And also expire any server-side session tokens.
            ForumDatabase.expireSessionTokens(STOK.SECURE, id);
            ForumDatabase.expireSessionTokens(STOK.INSECURE, id);

            Response["Location"] = CurrentUrl + "?_$signout=1";
            Response.Status = (303, "See Other");
        } else {
            Response.append("<html><body><h1>Forbidden!</h1></body></html>");
            Response.Status = (403, "Forbidden");
        }
    }

    public navSignupResponse(): void {

        if(Request.IsSecure) {
            def user = Context.Vars["user"];
            def _password = Context.Vars["password"];

            Response.Cookies.add("_u", user, COOKIE.SECURE_HTTP_ONLY);
            Response["Location"] = Server.DefaultSecurePrefix + "/signup";
            Response.Status = (303, "See Other");
        } else {
            Response.append("<html><body><h1>Forbidden!</h1></body></html>");
            Response.Status = (403, "Forbidden");
        }
    }
}


} // forum

