using System;
using System.Text.RegularExpressions;

using Nemerle.Extensions;

using httplib;


namespace forum {

[HasHandlerFactory]
public class TagHandler: BasePageHandler {

    public PostsPerPage: int { get; }
    public TagsPerPage: int { get; }
    public Tag: string { get; private set; }
    public TagId: uint { get; private set; }
    public PostCount: int { get; private set; }

    public this(hd: HandlerData, path: string) {
        base(hd, path);

        PostsPerPage = Server.Configuration.Limits.PostsPerPage;
        TagsPerPage = Server.Configuration.Limits.TagsPerPage;
    }

    public override initialize(): void {
        base.initialize();

        def fromstr = Context.Vars["from"];
        def from = fromstr ? Int32.Parse(fromstr) : 1;
        def tostr = Context.Vars["to"];
        def to = tostr ? Int32.Parse(tostr) : PostsPerPage;
        def dist = to + 1 - from;

        Tag = Context.Vars["tag"];
        PageData["Name"] = Tag;

        def command = Database.createCommand(
            "SELECT Id FROM Tags WHERE Name = @Name") <- [ "@Name" = Tag ];

        def tag_id = command.executeScalar() :> uint?;

        when(tag_id != null) {
            TagId = tag_id :> uint;

            def command2 = Database.createCommand(
                "SELECT COUNT(Id) FROM PostTags WHERE TagId = @TagId") <- [
                    "@TagId" = TagId
                ];

            def post_count = (command2.executeScalar() :> long?) :> int;

            PostCount = dist;

            when(PostCount > 0) {
                mutable post_ids = array(dist);
                def command3 = Database.createCommand(
                    "SELECT PostId FROM PostTags WHERE TagId = @TagId "
                        "ORDER BY PostId DESC LIMIT @From, @Count") <- [
                    "@TagId" = TagId,
                    "@From" = from - 1,
                    "@Count" = dist,
                ];
                def c = command3.execute((i, reader) => {
                    post_ids[i] = reader.getValue("PostId", 0U);
                });
                Array.Resize(ref post_ids, c);

                def posts = array(c);
                def users = array(c);
                mutable i = 0;
                foreach(pid in post_ids) {
                    def command4 = Database.createCommand(
                        "SELECT OutputContent, CreateDate, UserId FROM Posts "
                            "WHERE Id = @Id") <- [
                        "@Id" = pid,
                    ];
                    command4.execute(reader => {
                        mutable content = reader.getValue("OutputContent");
                        when(content.Length > 50) {
                            content = content.Substring(0, 50) + "...";
                        }
                        // Use HtmlSanitizer to close any tags lost by the truncation.
                        def htmlsan = Server.
                            getModuleInterface.[ITextTransform]("HtmlSanitizer");
                        content = htmlsan.transform(content);

                        // Strip out <hN>, <p> and <br> tags for the post preview
                        // TODO: use a CsQuery-based module to allow proper tag replacement.
                        content = Regex(@"</?h[0-9]+>").Replace(content, "");
                        content = Regex(@"</?p>").Replace(content, "");
                        content = content.Replace("<br>", "");

                        posts[i] = PageData() <- [
                            "Num" = from + i,
                            "Id" = pid,
                            "Content" = content,
                            "CreateDate" = Server.formatDateFromTicks(reader.getValue("CreateDate", 0L)),
                        ];
                        users[i] = reader.getValue("UserId", 0U);
                        i++;
                    });
                }

                for(mutable j = 0; j < c; j++) {
                    _ = posts[j] <-[
                        "User" = ForumDatabase.getUserName(users[j]),
                        "UserDisplay" = userDisplayName(users[j]),
                    ];
                }

                _ = PageData <- [
                    "PostCount" = post_count,
                    "Posts" = posts,
                    "Markers" = buildMarkerList(from, c),
                ];

                def prf = Server.getDefaultPrefix(Request);
                addPagination(PageData,
                    post_count, dist, PostsPerPage,
                    from, to, $"$prf/tg/$Tag");
            }
        }
    }
}


} // forum.hnd
