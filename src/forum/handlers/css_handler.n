using System;
using System.Collections.Generic;
using System.IO;
using System.Web;

using Nemerle.Extensions;
using Nemerle.Utility;

using YamlDeserializer = YamlDotNet.Serialization.Deserializer;

using httplib;


namespace forum {

[YamlRecord]
public class FontMap {
    public p: string { get; set; }
    public h: string { get; set; }
}


[YamlRecord]
public class FontData {
    public import: string { get; set; }
    public regular: string { get; set; }
    public bold: string { get; set; }
    public italic: string { get; set; }
    public bolditalic: string { get; set; }
}


[YamlRecord]
public class Fonts {
    public Map: Dictionary[string, FontMap] { get; set; }
    public Fonts: Dictionary[string, FontData] { get; set; }
}


[HasHandlerFactory]
public class CssHandler: BaseHandler {

    [Accessor]
    static deserializer: YamlDeserializer = YamlDeserializer();

    public override ContentType: string { get { "text/css" } }

    public Font: string { get; private set; }
    public MonoFont: string { get; private set; }
    public Colour: string { get; private set; }

    public this(hd: HandlerData, path: string, data: string) {
        base(hd, path);

        using(fdb = Server.openForumDatabase()) {
            def db = fdb.Database;
            def iuid = fdb.getUserIdFromCookie(Request, STOK.INSECURE);
            def userid = (iuid != 0) ? iuid :
                fdb.getUserIdFromCookie(Request, STOK.SECURE);

            def c = Request.QueryString["c"];
            Font = Server.Configuration.DefaultFontClass;
            MonoFont = Server.Configuration.DefaultMonoFontClass;
            Colour = !String.IsNullOrEmpty(c) ?
                c : Server.Configuration.DefaultColourClass;

            def command = db.createCommand(
                "SELECT Font, MonoFont FROM Users WHERE Id = @Id") <- [
                    "@Id" = userid,
                ];

            command.execute(reader => {
                Font = reader.getValue("Font",
                    Server.Configuration.DefaultFontClass);
                MonoFont = reader.getValue("MonoFont",
                    Server.Configuration.DefaultMonoFontClass);
            });
        }

        def data_file = Server.openLocalFile(data);
        using(reader = StreamReader(data_file)) {
            def data = Deserializer.Deserialize.[Fonts](reader);

            def map = data.Map;
            def fonts = data.Fonts;

            PageData["UserImport"] = fonts[map[Font].p].import;
            PageData["UserFontRegular"] = fonts[map[Font].p].regular;
            PageData["UserFontBold"] = fonts[map[Font].p].bold;
            PageData["UserFontItalic"] = fonts[map[Font].p].italic;
            PageData["UserFontBoldItalic"] = fonts[map[Font].p].bolditalic;
            PageData["HeaderImport"] = fonts[map[Font].h].import;
            PageData["HeaderFontRegular"] = fonts[map[Font].h].regular;
            PageData["HeaderFontBold"] = fonts[map[Font].h].bold;
            PageData["HeaderFontItalic"] = fonts[map[Font].h].italic;
            PageData["HeaderFontBoldItalic"] = fonts[map[Font].h].bolditalic;
            PageData["CodeImport"] = fonts[map[MonoFont].p].import;
            PageData["CodeFontRegular"] = fonts[map[MonoFont].p].regular;
            PageData["BackgroundColour"] = bgFromColourId(Colour);
            PageData["HighlightColour"] = fgFromColourId(Colour);

        }
    }

    public override initialize(): void {
        base.initialize();
    }

    public override renderPage(
        renderer: Renderer, path: string, fs: Stream): string {

        def page = renderer.loadPage(path, fs);

        page.renderContent(PageData);
    }

    public static bgFromColourId(id: string): string {
        def x = id[0];
        def v = Int32.Parse(id.Substring(1));
        def (h, s, l) = match(x, v) {
            | ('x', 360) => (0, 0, 55)
            | ('y', 360) => (0, 0, 25)
            | ('x', _) => (v, 55, 55)
            | ('y', _) => (v, 88, 25)
            | _ => (0, 0, 0)
        }

        $"hsl($h, $s%, $l%)"
    }

    public static fgFromColourId(id: string): string {
        match(id[0]) {
            | 'x' => "hsl(0, 0%, 27%)"
            | 'y' => "hsl(0, 0%, 80%)"
            | _ => "hsl(0, 100%, 100%)"
        }
    }
}


} // forum
