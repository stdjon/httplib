using System;
using System.Collections.Generic;

using Nemerle.Extensions;

using httplib;


namespace forum {

[HasHandlerFactory]
public class ThreadHandler: BasePageHandler {

    public PostsPerPage: int { get; }

    public ThreadId: uint { get; private set; }
    public From: int { get; private set; }
    public To: int { get; private set; }
    public PostCount: int { get; private set; }
    public PostIds: array[uint] { get; private set; }
    public PostIdMap: Dictionary[uint, uint] { get; private set; }

    public this(hd: HandlerData, path: string) {
        base(hd, path);

        PostsPerPage = Server.Configuration.Limits.PostsPerPage;

        ThreadId = UInt32.Parse(Context.Vars["id"]);

        def fr_st = Context.Vars["from"];
        From = !String.IsNullOrEmpty(fr_st) ? Int32.Parse(fr_st) : 1;

        def to_st = Context.Vars["to"];
        To = !String.IsNullOrEmpty(to_st) ?
            Int32.Parse(to_st) :
            (From + PostsPerPage - 1);
        PostCount = To + 1 - From;

        populatePostIds();
    }

    public override initialize(): void {
        base.initialize();

        def command = Database.createCommand(
            "SELECT Title, UserId, CategoryId, CreateDate, Colour FROM Threads "
                "WHERE Id = @Id") <- [ "@Id" = ThreadId ];

        mutable ok = false;
        mutable uid;
        mutable catid;
        command.execute(reader => {
            uid = reader.getValue("UserId", 0U);
            catid = reader.getValue("CategoryId", 0U);
            def is_own_thread = (uid == SignedInUserId);
            _ = PageData <- [
                "Title" = reader.getValue("Title"),
                "UserId" = uid,
                "CategoryId" = catid,
                "CreateDate" = Date.FromTicks(reader.getValue("CreateDate", 0L)),
                "ColourId" = reader.getValue("Colour"),
                "IsOwnThread" = is_own_thread,
                "OwnThreadClass" = is_own_thread ? "own-thread" : "",
            ];
            ok = true;
        });

        PageData["Category"] = ForumDatabase.getCategoryName(catid);
        PageData["UserName"] = ForumDatabase.getUserName(uid);
        PageData["UserDisplay"] = userDisplayName(uid);

        when(ok) {
            mutable posts: PageDataArray = array(PostCount);
            mutable i = 0;

            def command2 = Database.createCommand(
                "SELECT Id, UserId, Points, CreateDate, OutputContent, ReplyTo "
                    "FROM Posts WHERE ThreadId = @ThreadId ORDER BY CreateDate "
                    "LIMIT @From, @Count") <- [
                "@ThreadId" = ThreadId,
                "@From" = From - 1,
                "@Count" = PostCount,
            ];

            i = command2.execute((j, reader) => {
                def id = reader.getValue("Id", 0U);
                uid = reader.getValue("UserId", 0U);
                def points = reader.getValue("Points", 0);
                def date = Date.FromTicks(reader.getValue("CreateDate", 0L));
                def content = reader.getValue("OutputContent");
                def reply_to = reader.getValue("ReplyTo"): uint?;
                def is_own_post = (uid == SignedInUserId);

                posts[j] = PageData() <- [
                    "Number" = From + j,
                    "PostId" = id,
                    "UserId" = uid,
                    "Points" = points,
                    "CreateDate" = date,
                    "Content" = content,
                    "IsOwnPost" = is_own_post,
                    "OwnPostClass" = is_own_post ? "own-post" : "",
                ];
                when(reply_to != null) {
                    _ = posts[j] <- [
                        "ReplyTo" = reply_to :> uint,
                        "ReplyToUrl" = postUrl(reply_to :> uint),
                    ];
                }
            });
            when(i < PostCount) {
                Array.Resize(ref posts, i);
            }
            def limit = i;

            for(i = 0; i < limit; i++) {
                def id = posts[i]["UserId"] :> uint;
                posts[i]["UserName"] =
                    ForumDatabase.getUserName(id);
                posts[i]["UserDisplay"] = userDisplayName(id);
            }

            // Tags
            for(i = 0; i < limit; i++) {
                def post_id = posts[i]["PostId"] :> uint;
                def tags = ForumDatabase.getPostTags(post_id);
                when(tags != null) {
                    def prf = Server.getDefaultPrefix(Request);
                    mutable tagdata: PageDataArray = array(tags.Length);
                    for(mutable j = 0; j < tags.Length; j++) {
                        def url = Uri.EscapeDataString(tags[j]);
                        tagdata[j] = PageData() <- [
                            "Name" = tags[j],
                            "Url" = $"$prf/tg/$url",
                        ];
                    }
                    posts[i]["Tags"] = tagdata;
                    posts[i]["HasTags"] = true;
                }
            }

            // Replies
            for(i = 0; i < limit; i++) {
                def post_id = posts[i]["PostId"] :> uint;

                def command = Database.createCommand(
                    "SELECT Count(Id) FROM Replies WHERE ReplyTo=@ReplyTo") <- [
                        "@ReplyTo" = post_id,
                    ];
                def result = command.executeScalar() :> long?;
                when(result != null) {
                    def reply_count = result :> int;
                    when(reply_count > 0) {
                        def replies: PageDataArray = array(reply_count);

                        def command2 = Database.createCommand(
                            "SELECT PostId FROM Replies WHERE ReplyTo=@ReplyTo") <- [
                                "@ReplyTo" = post_id,
                            ];
                        _ = command2.execute((j, reader) => {
                            def pid = reader.getValue("PostId", 0U);
                            replies[j] = PageData() <- [
                                "PostId" = pid,
                                "PostUrl" = postUrl(pid),
                            ];
                        });

                        posts[i]["HasReplies"] = true;
                        def plural = reply_count > 1;
                        posts[i]["ReplySummary"] =
                            $<#$reply_count $(plural ? "replies" : "reply")#>; //TODO: l8n?
                        posts[i]["Replies"] = replies;

                        when(posts[i].ContainsKey("ReplyTo")) {
                            posts[i]["ReplySep"] = true;
                        }
                    }
                    posts[i]["ReplyCount"] = reply_count;
                }
            }

            // Thumbs markers
            for(i = 0; i < limit; i++) {
                def post_id = posts[i]["PostId"] :> uint;

                def result = ForumDatabase.getPostThumbs(post_id);
                posts[i]["Thumbs"] = result :> uint;

                def command2 = Database.createCommand(
                    "SELECT COUNT(Id) FROM Thumbs WHERE "
                        "PostId = @PostId  AND UserId = @UserId") <- [
                    "@PostId" = post_id,
                    "@UserId" = SignedInUserId,
                ];
                def result2 = command2.executeScalar() :> long;
                when(result2 > 0) {
                    posts[i]["IsOwnThumb"] = true;
                }
            }

            // Bookmarks markers
            for(i = 0; i < limit; i++) {
                def post_id = posts[i]["PostId"] :> uint;

                def result = ForumDatabase.getPostBoomarks(post_id);
                posts[i]["Bookmarks"] = result :> uint;

                def command2 = Database.createCommand(
                    "SELECT COUNT(Id) FROM Bookmarks WHERE "
                        "PostId = @PostId  AND UserId = @UserId") <- [
                    "@PostId" = post_id,
                    "@UserId" = SignedInUserId,
                ];
                def result2 = command2.executeScalar() :> long;
                when(result2 > 0) {
                    posts[i]["IsOwnBookmark"] = true;
                }
            }

            _ = PageData <- [
                "ThreadId" = ThreadId,
                "From" = From,
                "To" = To,
                "Posts" = posts,
                "Markers" = buildMarkerList(From, limit),
            ];

            def prf = Server.getDefaultPrefix(Request);
            def total_count = ForumDatabase.getPostCount(ThreadId);

            addPagination(PageData,
                total_count, PostCount, PostsPerPage,
                From, To, $"$prf/th/$ThreadId");

            // User pref (transform)
            def command4 = Database.createCommand(
                "SELECT Transform FROM Users WHERE Id = @Id") <- [ "@Id" = SignedInUserId ];
            PageData["Transform"] = command4.executeScalar() :> string;
        }
    }

    populatePostIds(): void {
        PostIds = array(ForumDatabase.getPostCount(ThreadId));
        PostIdMap = Dictionary();

        def command = Database.createCommand(
            "SELECT Id FROM Posts WHERE ThreadId = @ThreadId") <- [
                "@ThreadId" = ThreadId
            ];
        _ = command.execute((j, reader) => {
            def pid = reader.getValue("Id", 0U);
            PostIds[j] = pid;
            PostIdMap[pid] = j :> uint + 1;
        });
    }

    postUrl(post_id: uint): string {
        def prefix = Server.getDefaultPrefix(Request);

        if(PostIdMap.ContainsKey(post_id)) {
            def post_number = PostIdMap[post_id] :> int;
            def from = (((post_number - 1) / PostCount) * PostCount) + 1;
            def to = from + (PostCount - 1);

            if(1 == from && PostsPerPage == to) {
                // special-case URL for first page of the thread
                $"$prefix/th/$ThreadId#$post_number"
            } else {
                $"$prefix/th/$ThreadId/$from-$to#$post_number"
            }
        } else {
            $"$prefix/p/$post_id"
        }
    }
}


} // forum.hnd
