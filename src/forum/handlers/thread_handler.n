using System;

using Nemerle.Extensions;

using httplib;


namespace forum {

[HasHandlerFactory]
public class ThreadHandler: BaseHandler {

    public this(hd: HandlerData, path: string) {
        base(hd, path);
    }

    public override initialize(): void {
        base.initialize();

        def thid = UInt32.Parse(Context.Vars["id"]);
        def fr_st = Context.Vars["from"];
        def from = !String.IsNullOrEmpty(fr_st) ? Int32.Parse(fr_st) : 1;
        def to_st = Context.Vars["to"];
        def to = !String.IsNullOrEmpty(to_st) ? Int32.Parse(to_st) : (from + 49);  //TODO: configurable?
        def dist = to + 1 - from;

        def command = Server.Database.createCommand(
            "SELECT Title, UserId, CategoryId, CreateDate, Colour FROM Threads "
                "WHERE Id = @Id") <- [ "@Id" = thid ];

        mutable ok = false;
        mutable uid;
        mutable catid;
        using(reader = command.executeReader()) {
            when(reader.Read()) {
                uid = reader.GetValue.[uint?]("UserId", 0);
                catid = reader.GetValue.[uint?]("CategoryId", 0);
                def is_own_thread = (uid == SignedInUserId);
                _ = PageData <- [
                    "Title" = reader.GetValue("Title"),
                    "UserId" = uid,
                    "CategoryId" = catid,
                    "CreateDate" = DateTime(reader.GetValue.[long]("CreateDate", 0)),
                    "ColourId" = reader.GetValue("Colour"),
                    "IsOwnThread" = is_own_thread,
                    "OwnThreadClass" = is_own_thread ? "own-thread" : "",
                ];
                ok = true;
            }
        }
        when(catid != null) {
            PageData["Category"] = Server.getCategoryName(catid :> uint);
        }

        when(uid != null) {
            PageData["UserName"] = Server.getUserName(uid :> uint);
        }

        when(ok) {
            mutable posts: PageDataArray = array(dist);
            mutable i = 0;

            def command2 = Server.Database.createCommand(
                "SELECT Id, UserId, Points, CreateDate, OutputContent FROM Posts WHERE "
                    "ThreadId = @ThreadId ORDER BY CreateDate LIMIT @From, @To") <- [
                "@ThreadId" = thid,
                "@From" = from - 1,
                "@To" = to - 1,
            ];

            using(reader = command2.executeReader()) {
                while(reader.Read() && i < dist) {
                    def id = reader.GetValue.[uint?]("Id", 0);
                    uid = reader.GetValue.[uint?]("UserId", 0);
                    def points = reader.GetValue.[int?]("Points", 0);
                    def date = DateTime(reader.GetValue.[long]("CreateDate", 0));
                    def content = reader.GetValue("OutputContent");
                    def is_own_post = (uid == SignedInUserId);

                    posts[i] = PageData() <- [
                        "Number" = from + i,
                        "PostId" = id,
                        "UserId" = uid,
                        "Points" = points,
                        "CreateDate" = date,
                        "Content" = content,
                        "IsOwnPost" = is_own_post,
                        "OwnPostClass" = is_own_post ? "own-post" : "",

                    ];
                    i++;
                }
            }
            when(i < dist) {
                Array.Resize(ref posts, i);
            }
            def limit = i;

            for(i = 0; i < limit; i++) {
                posts[i]["UserName"] =
                    Server.getUserName(posts[i]["UserId"] :> uint);
            }

            // Add a marker for every fifth post (1, 6, 11...)
            def marker_count = (limit + 4) / 5;
            def markers: PageDataArray = array(marker_count);
            for(i = 0; i < marker_count; i++) {
                markers[i] = PageData() <- [ "Mark" = (i * 5) + from ];
            }

            _ = PageData <- [
                "Posts" = posts,
                "Markers" = markers,
            ];

            // prev/next
            def prf = Server.getDefaultPrefix(Request);
            mutable prev = null;
            mutable next = null;

            Log.d("from = {0} > 1 {1}", from, from > 1);
            when(from > 1) {
                def pf = Math.Max(1, from - dist);
                def pt = pf + dist - 1;
                prev = $"$prf/th/$thid/$pf-$pt";
            }
            Log.d("prev = {0}", prev);

            def user_count = Server.getPostCount(thid);
            Log.d("to = {0} < {1} {2}", to, user_count, to < user_count);
            when(to < user_count) {
                def nf = from + dist;
                def nt = nf + dist - 1;
                next = $"$prf/th/$thid/$nf-$nt";
            }
            Log.d("next = {0}", next);

            _ = PageData <- [
                "Prev" = prev,
                "Next" = next,
            ];
        }
    }
}


} // forum.hnd
