using System;
using System.Collections.Specialized;
using System.IO;
using System.Web;

using Nemerle.Extensions;

using httplib;


namespace forum {

[HasHandlerFactory]
public class BasePageHandler: BaseHandler {

    static SiteName: string { get; private set;}

    public RenderContent: bool { get; private set; }
    public SignedInUserId: uint { get; private set; }

    public Database: Database { get; private set; }

    public this(hd: HandlerData, path: string) {
        base(hd, path);

        Database = Server.openDatabase();

        SignedInUserId = 0;

        // remove QS components starting with _$
        def parsed_url = parseUrl(Request.Url);

        _ = PageData <- [
            "DefaultSecurePrefix" = Server.DefaultSecurePrefix,
            "DefaultInsecurePrefix" = Server.DefaultInsecurePrefix,
            "DefaultPrefix" = Server.getDefaultPrefix(Request),
            "CurrentUrl" = Uri.EscapeDataString(parsed_url),
            "CurrentUrlUnescaped" = parsed_url,
        ];

        // Allow inserting of custom JS for tracking/analytics
        def tracking = Server.Configuration.TrackingScript;
        when(tracking != null) {
            PageData["_TrackingScript"] = tracking;
        }

        RenderContent =
            Context.Vars["_$content"] != null ||
            Request.QueryString["_$content"] != null;

        if(RenderContent) {
            PageData["RenderContent"] = true;
        } else {
            PageData["RenderFullPage"] = true;
        }
        temporaryLoginHandling(); //
    }

    public override initialize(): void {
        base.initialize();
        initializeSiteName();
        initializeUserClasses();
    }

    public override finish(): void {
        Database.Dispose();
    }

    public override renderPage(
        renderer: Renderer, path: string, fs: Stream): string {

        def page = renderer.loadPage(path, fs);

        if(RenderContent) {
            page.renderContent(PageData);
        } else {
            page.render(PageData);
        }
    }

    parseUrl(url: Uri): string {
        def coll = HttpUtility.ParseQueryString(url.Query);
        mutable qs = "";
        foreach(x in coll.AllKeys) {
            when(x != null && (x.Length < 2 || x.Substring(0, 2) != "_$")) {
                def sep = String.IsNullOrEmpty(qs) ? "?" : "&";
                qs += $"$sep$x=$(coll[x])";
            }
        }

        // TODO: this probably prevents use of prefixes with multiple ports from
        //   the same Server if StripPortFromDefaultPrefixes is true. How big of
        //   a problem this is, not sure. (We may want to look into sending CORS
        //   response headers from the server if the ports don't match, or if
        //   withCredentials was used from an AJAX request...)
        def use_port =
            !url.IsDefaultPort &&
            !Server.Configuration.StripPortFromDefaultPrefixes;

        def port_spec = use_port ? $":$(url.Port)": "";
        def result = url.Scheme + "://" +
            url.Host + port_spec + url.AbsolutePath + qs + url.Fragment;
        Log.d("parseUrl: {0} -> {1}", url, result);
        result;
    }

    // TODO: this lives here in the interim, handles the final stages of login
    //  negotiation with the nav. 
    temporaryLoginHandling(): void {
        def signout = Request.QueryString["_$signout"];
        def cookies = Request.Cookies;
        def isession =
            (signout == null && cookies != null) ? cookies["_isession"] : null;

        when(signout != null) {
            Response.Cookies.expire("_isession", COOKIE.HTTP_ONLY);
        }

        if(isession != null) {
            def id = Server.
                getUserIdFromSessionToken(STOK.INSECURE, isession, Database);
            SignedInUserId = id;

            def name = (id != 0) ? Server.getUserName(id, Database) : null;
            PageData["SignedInUser"] = name;
        } else {
            def (_ok, t, _x) = Server.
                registerSessionToken(STOK.TEMPORARY, 0, Database);
            PageData["TempToken"] = t;
        }
        PageData["IsSignedIn"] = (SignedInUserId > 0) ? "true" : "false";
        Log.t("isession = {0}, SignedInUserId = {1}", isession, SignedInUserId);
    }

    protected initializeSiteName(): void {
        when(SiteName == null) {
            def c = Server.Configuration;
            SiteName =
                if(c != null && c.SiteName != null) {
                    c.SiteName
                } else {
                    "[SiteName]"
                };
        }
        PageData["SiteName"] = SiteName;
    }

    initializeUserClasses(): void {
        def command = Database.createCommand(
            "SELECT Colour, Font From Users WHERE Id=@Id") <- [
                "@Id" = SignedInUserId,
            ];
        mutable font = Server.Configuration.DefaultFontClass;
        mutable colour = Server.Configuration.DefaultColourClass;
        command.execute(reader => {
            def f = reader.getValue("Font", "");
//            def c = reader.getValue("Colour", "");
            when(!String.IsNullOrEmpty(f)) {
                font = f;
            }
//            when(!String.IsNullOrEmpty(c)) {
//                colour = c;
//            }
        });
        PageData["FontClass"] = font;
        PageData["ColourClass"] = colour;
    }
}


} // forum
