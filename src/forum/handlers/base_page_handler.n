using System;
using System.Collections.Specialized;
using System.IO;
using System.Text.RegularExpressions;
using System.Web;

using Nemerle.Extensions;

using httplib;


namespace forum {

[HasHandlerFactory]
public class BasePageHandler: BaseHandler {

    static SiteName: string { get; private set;}

    public RenderContent: bool { get; private set; }
    public SignedInUserId: uint { get; private set; }

    public ForumDatabase: ForumDatabase { get; private set; }
    public Database: Database { get; private set; }

    public this(hd: HandlerData, path: string) {
        base(hd, path);

        ForumDatabase = Server.openForumDatabase();
        Database = ForumDatabase.Database;

        SignedInUserId = 0;

        // remove QS components starting with _$
        def parsed_url = parseUrl();

        _ = PageData <- [
            "DefaultSecurePrefix" = Server.DefaultSecurePrefix,
            "DefaultInsecurePrefix" = Server.DefaultInsecurePrefix,
            "DefaultPrefix" = Server.getDefaultPrefix(Request),
            "CurrentUrl" = Uri.EscapeDataString(parsed_url),
            "CurrentUrlUnescaped" = parsed_url,
        ];

        // Allow inserting of custom JS for tracking/analytics
        def tracking = Server.Configuration.TrackingScript;
        when(tracking != null) {
            PageData["_TrackingScript"] = tracking;
        }

        RenderContent =
            Context.Vars["_$content"] != null ||
            Request.QueryString["_$content"] != null;

        if(RenderContent) {
            PageData["RenderContent"] = true;
        } else {
            PageData["RenderFullPage"] = true;
        }
        temporaryLoginHandling(); //
    }

    public override initialize(): void {
        base.initialize();
        initializeSiteName();
        initializeUserClasses();
    }

    public override finish(): void {
        ForumDatabase.Dispose();
    }

    public override renderPage(
        renderer: Renderer, path: string, fs: Stream): string {

        def page = renderer.loadPage(path, fs);

        if(RenderContent) {
            page.renderContent(PageData);
        } else {
            page.render(PageData);
        }
    }

    public userDisplayName(user_id: uint): string {
        def admin = ForumDatabase.userIsAdmin(user_id);
        def name = ForumDatabase.getUserName(user_id);
        if(admin) {
            $"$name $(Server.Configuration.AdminDisplay)"
        } else {
            name
        }
    }

    public buildMarkerList(from: int, count: int, step = 5): PageDataArray {
        def marker_count = (count + (step - 1)) / step;
        def result = array(marker_count);

        for(mutable i = 0; i < marker_count; i++) {
            result[i] = PageData() <- [ "Mark" = (i * step) + from ];
        }
        result;
    }

    public addPagination(data: PageData, item_count: int,
        per_page: int, default_per_page: int,
        from: int, to: int, url: string): void {

        addPagePrevNext(data,
            item_count, per_page, default_per_page, from, to, url);
        data["Pages"] = buildPageList(
            item_count, per_page, default_per_page, from, to, url);
    }

    public buildPageList(item_count: int,
        per_page: int, default_per_page: int,
        from: int, to: int, url: string): PageDataArray {

        def page_count = (item_count + per_page - 1) / per_page;
        def result = array(page_count);
        for(mutable i = 0; i < page_count; i++) {
            def f = i * per_page + 1;
            def t = (i + 1) * per_page;
            result[i] = PageData() <- [
                "Number" = i + 1,
                "Url" = (f == 1 && t == default_per_page) ?
                    url : $"$url/$f-$t",
                "Active" = (f == from) && (t == to),
            ];
        }
        result;
    }

    public addPagePrevNext(data: PageData, item_count: int,
        per_page: int, default_per_page: int,
        from: int, to: int, url: string): void {

        mutable prev = null;
        mutable next = null;

        when(from > 1) {
            def pf = Math.Max(1, from - per_page);
            def pt = pf + per_page - 1;
            prev = (pf == 1 && pt == default_per_page) ?
                url : $"$url/$pf-$pt";
        }

        when(to < item_count) {
            def nf = from + per_page;
            def nt = nf + per_page - 1;
            next = $"$url/$nf-$nt";
        }

        _ = data <- [
            "Prev" = prev,
            "PrevDisabled" = prev == null,
            "Next" = next,
            "NextDisabled" = next == null,
        ];
    }

    public summarizePost(content: string): string {

        mutable result = content;

        when(result.Length > 100) {
            result = result.Substring(0, 100) + "&hellip;";
        }

        // Use HtmlSanitizer to close any tags lost by the truncation.
        def htmlsan = Server.
            getModuleInterface.[ITextTransform]("HtmlSanitizer");
        result = htmlsan.transform(result);

        // Strip out <hN>, <p> and <br> tags for the post preview
        // TODO: use a CsQuery-based module to allow proper tag replacement.
        result = Regex(@"</?h[0-9]+>").Replace(result, "");
        result = Regex(@"</?p>").Replace(result, "");
        result = result.Replace("<br>", "");

        result;
    }

    parseUrl(): string {
        def url = Request.Url;
        def coll = HttpUtility.ParseQueryString(url.Query);
        mutable qs = "";
        foreach(x in coll.AllKeys) {
            when(x != null && (x.Length < 2 || x.Substring(0, 2) != "_$")) {
                def sep = String.IsNullOrEmpty(qs) ? "?" : "&";
                qs += $"$sep$x=$(coll[x])";
            }
        }

        def prefix = Server.getDefaultPrefix(Request);

        def result = prefix + url.AbsolutePath + qs + url.Fragment;
        Log.d("parseUrl: {0} -> {1}", url, result);
        result;
    }

    // TODO: this lives here in the interim, handles the final stages of login
    //  negotiation with the nav. 
    temporaryLoginHandling(): void {
        def signout = Request.QueryString["_$signout"];
        def cookies = Request.Cookies;
        def isession =
            (signout == null && cookies != null) ? cookies["_isession"] : null;

        when(signout != null) {
            Response.Cookies.expire("_isession", COOKIE.HTTP_ONLY);
        }

        when(isession != null) {
            def id = ForumDatabase.
                getUserIdFromSessionToken(STOK.INSECURE, isession);
            SignedInUserId = id;

            def name = (id != 0) ? ForumDatabase.getUserName(id) : null;
            PageData["SignedInUser"] = name;
        }
        when(SignedInUserId == 0) {
            def (_ok, t, _x) = ForumDatabase.
                registerSessionToken(STOK.TEMPORARY, 0);
            PageData["TempToken"] = t;
        }
        PageData["IsSignedIn"] = (SignedInUserId > 0) ? "true" : "false";
        PageData["IsAdmin"] = ForumDatabase.userIsAdmin(SignedInUserId);
        Log.t("isession = {0}, SignedInUserId = {1}", isession, SignedInUserId);
    }

    protected initializeSiteName(): void {
        when(SiteName == null) {
            def c = Server.Configuration;
            SiteName =
                if(c != null && c.SiteName != null) {
                    c.SiteName
                } else {
                    "[SiteName]"
                };
        }
        PageData["SiteName"] = SiteName;
    }

    initializeUserClasses(): void {
        def command = Database.createCommand(
            "SELECT Colour, Font, MonoFont FROM Users WHERE Id=@Id") <- [
                "@Id" = SignedInUserId,
            ];
        mutable font = Server.Configuration.DefaultFontClass;
        mutable mono_font = Server.Configuration.DefaultMonoFontClass;
        mutable colour = Server.Configuration.DefaultColourClass;
        command.execute(reader => {
            def f = reader.getValue("Font", "");
            def mf = reader.getValue("MonoFont", "");
//            def c = reader.getValue("Colour", "");
            when(!String.IsNullOrEmpty(f)) {
                font = f;
            }
            when(!String.IsNullOrEmpty(mf)) {
                mono_font = mf;
            }
//            when(!String.IsNullOrEmpty(c)) {
//                colour = c;
//            }
        });
        PageData["FontClass"] = font;
        PageData["MonoFontClass"] = mono_font;
        PageData["ColourClass"] = colour;
    }
}


} // forum
