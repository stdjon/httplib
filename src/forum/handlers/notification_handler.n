using System;
using System.Collections.Generic;

using Nemerle.Extensions;

using httplib;


namespace forum {

[HasHandlerFactory]
public class NotificationHandler: BasePageHandler {

    public NotificationsPerPage: int { get; }
    public PostsPerPage: int { get; }
    public PostUrlMap: Dictionary[uint, string] { get; private set; }
    public PostThreadMap: Dictionary[uint, uint] { get; private set; }

    public this(hd: HandlerData, path: string) {
        base(hd, path);

        NotificationsPerPage = Server.Configuration.Limits.NotificationsPerPage;
        PostsPerPage = Server.Configuration.Limits.PostsPerPage;
        PostUrlMap = Dictionary();
        PostThreadMap = Dictionary();
    }

    public override initialize(): void {
        base.initialize();

        when(SignedInUserId > 0) {
            def fromstr = Context.Vars["from"];
            def from = fromstr ? Int32.Parse(fromstr) : 1;
            def tostr = Context.Vars["to"];
            def to = tostr ? Int32.Parse(tostr) : NotificationsPerPage;

            def dist = to + 1 - from;

            mutable ok = false;
            mutable notifies = array(dist);
            def prf = Server.getDefaultPrefix(Request);

            def command = Database.createCommand(
                "SELECT FromUserId, ThreadId, PostId, NotifyType, CreateDate "
                    "FROM Notifications WHERE @UserId = UserId "
                    "ORDER BY CreateDate DESC LIMIT @From, @Count") <- [
                "@UserId" = SignedInUserId,
                "@From" = from - 1,
                "@Count" = dist,
            ];

            def i = command.execute((j, reader) => {
                def notify_date = reader.getValue("CreateDate", 0L);
                def thread_id = reader.getValue("ThreadId", 0U);
                notifies[j] = PageData() <- [
                    "Num" = j + from,
                    "UserId" = reader.getValue("FromUserId", 0U),
                    "ThreadId" = thread_id,
                    "PostId" = reader.getValue("PostId", 0U),
                    "NotifyType" = reader.getValue("NotifyType", 0U),
                    "Date" = Server.formatDateFromTicks(notify_date),
                    "CreateDate" = notify_date,
                ];
                ok = true;
            });

            when(i < notifies.Length) {
                Array.Resize(ref notifies, i);
            }


            def command2 = Database.createCommand(
                "SELECT Colour, NotifyDate FROM Users WHERE Id = @Id") <- [
                    "@Id" = SignedInUserId
                ];
            mutable colour_id, user_date;
            command2.execute(reader => {
                colour_id = reader.getValue("Colour");
                user_date = reader.getValue("NotifyDate", 0L);
            });

            for(mutable j = 0; j < i; j++) {
                def n = notifies[j];

                def thread_id = n["ThreadId"] :> uint;
                def post_id = n["PostId"] :> uint;

                PostThreadMap[post_id] = thread_id;

                def username = ForumDatabase.getUserName(n["UserId"] :> uint);
                def title = ForumDatabase.getThreadTitle(n["ThreadId"] :> uint);
                def path = ForumDatabase.getThreadUrlPath(n["ThreadId"] :> uint);
                def nt = (n["NotifyType"] :> uint).toNotifyType();
                def msg = String.Format(nt.format(),
                    $<#<a href="$prf/u/$username">$username</a>#>,
                    $<#<a href="$prf$path">$title</a>#>);

                def notify_date = n["CreateDate"] :> long;

                _ = n <- [
                    "UserName" = username,
                    "ThreadTitle" = title,
                    "Symbol" = nt.symbol(),
                    "Message" = msg,
                    "PostUrl" = $"$prf/p/$post_id",
                    "PostThreadUrl" = buildPostUrl(post_id),
                ];

                // allow a 60-second window for notifications to remain 'active'...
                def delta = TimeSpan(0, 0, 60).Ticks;
                when(user_date < notify_date + delta) {
                    n["NewNotifyClass"] = "new-notify";
                }
            }

            def notify_count = ForumDatabase.getNotificationCount(SignedInUserId);

            addPagination(PageData,
                notify_count, dist, NotificationsPerPage,
                from, to, $"$prf/n");

            _ = PageData <- [
                "UserSignedIn" = true,
                "User" = ForumDatabase.getUserName(SignedInUserId),
                "Notifications" = notifies,
                "Markers" = buildMarkerList(from, i),
                "ColourId" = colour_id,
                "ColourBgHsl" = CssHandler.bgFromColourId(colour_id),
            ];
        }
    }

    public override finish(): void {
        def command3 = Database.createCommand(
            "UPDATE Users SET NotifyDate = @NotifyDate WHERE Id = @Id") <- [
                "@NotifyDate" = Date.NowTicks,
                "@Id" = SignedInUserId,
            ];
        _ = command3.executeNonQuery();
    }

    public buildPostUrl(post_id: uint): string {

        def thread_id = PostThreadMap[post_id];
        def d = Server.ThreadPosts.getPostNums(thread_id);
        def post_number = d[post_id];
        def from = (((post_number - 1) / PostsPerPage) * PostsPerPage) + 1;
        def to = from + (PostsPerPage - 1);
        def prefix = Server.getDefaultPrefix(Request);
        def path = ForumDatabase.getThreadUrlPath(thread_id);

        if(1 == from && PostsPerPage == to) {
            // special-case URL for first page of the thread
            $"$prefix$path#$post_number"
        } else {
            $"$prefix$path/$from-$to#$post_number"
        }
    }
}


} // forum.hnd
