using System;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;

using Nemerle.Extensions;
using Nemerle.Utility;

using httplib;


namespace forum {

[HasHandlerFactory]
public class UploadAvatarHandler: BaseHandler {

    public this(hd: HandlerData) {
        base(hd, null);
    }

    public override callback(): void {
        mutable json;
        using(fdb = Server.openForumDatabase()) {
            def userid = fdb.getUserIdFromCookie(Request, STOK.INSECURE);
            def f = Context.Vars["f"];
            when(userid > 0 && !String.IsNullOrEmpty(f)) {
                def b64 = Regex.Match(f,
                    @"data:image/(?<type>.+?),(?<data>.+)").Groups["data"].Value;
                def data = Convert.FromBase64String(b64);
                def memstr = MemoryStream(data);
                def out120 = transformImage(memstr, "avatar120");

                _ = deleteImages(userid);
                _ = storeImage(out120, userid, 120);

                json = JsonObject() <- [
                    "image" = dataUrl(out120),
                ];
            }
        }
        if(json != null) {
            Response.append(json.toString());
            Response.Status = (200, "OK");
        } else {
            internalServerErrorResponse();
        }
    }

    transformImage(memstr: MemoryStream, mutable xform: string): array[byte] {
        def iimagefactory =
            Server.getModuleInterface.[IImageTransformFactory]("ImageProcessor");
        def iimage = iimagefactory.makeImageTransform();
        _ = iimage.load(memstr);
        def image = iimage.Image;
        def aspect = (image.Height :> float) / image.Width;
        when(aspect > 1.1f || aspect < 0.91f) {
            xform = xform + "crop";
        }
        Log.d("transformImage: aspect={0}, xform={1}", aspect, xform);
        _ = iimage.transform(xform);
        def outstr = MemoryStream(4096);
        _ = iimage.save(outstr);
        outstr.ToArray();
    }

    deleteImages(userid: uint): void {
        using(db = Server.openDatabase()) {
            def command = db.createCommand(
                "DELETE FROM Avatars WHERE (UserId = @UserId)") <- [
                "@UserId" = userid,
            ];
            _ = command.executeNonQuery();
        }
    }

    storeImage(data: array[byte], userid: uint, size: uint): void {
        using(db = Server.openDatabase()) {
            Log.d("storeImage({0} bytes, {1}, {2})", data.Length, userid, size);
            def command = db.createCommand(
                "INSERT INTO Avatars(UserId, Size, Data) VALUES ("
                    "@UserId, @Size, @Data)") <- [
                "@UserId" = userid,
                "@Size" = size,
                "@Data" = data,
            ];
            _ = command.executeNonQuery();
        }
    }

    dataUrl(data: array[byte]): string {
        def b64 = Convert.ToBase64String(data);
        $"data:image/png;base64,$b64";
    }

}


} // forum

