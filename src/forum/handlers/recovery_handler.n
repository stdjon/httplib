using System;
using System.Collections.Generic;
using System.IO;

using Nemerle.Extensions;

using httplib;


namespace forum {

[HasHandlerFactory]
public class RecoveryInitiateHandler: BaseHandler {

    public this(hd: HandlerData) {
        base(hd, null);
    }

    public override callback(): void {
        def conf = Server.Configuration.AccountRecovery;
        def username = Context.Vars["user"];
        def secret = Context.Vars["secret"];
        //CORS
        def origin = Request["Origin"];

        mutable ok = false;
        mutable secret_ok = false;
        mutable user_id, user_secret, address;
        when(origin != null) {
            using(fdb = Server.openForumDatabase()) {
                user_id = fdb.getUserId(username);
                address = fdb.getUserEmail(user_id);
                user_secret = "";

                when(user_secret.levenshtein(secret) <= conf.LevenshteinThreshold) {
                    secret_ok = true;

                    def (ok2, token, _exp) =
                        fdb.registerSessionToken(STOK.RECOVERY, user_id);

                    when(ok2) {
                        def url =
                            $"$(Server.DefaultSecurePrefix)/recover/$token";

                        def data = PageData() <- [
                            "RecoverUrl" = url,
                            "SiteName" = Server.Configuration.SiteName,
                            "SiteUrl" = Server.DefaultInsecurePrefix,
                            "User" = username,
                            "RecoveryToken" = token,
                        ];

                        Server.sendEmail(
                            conf.EmailSender, [address], conf.EmailBody, data);
                        ok = true;
                    }
                }
            }
        }

        mutable json = JsonObject();

        json["msg"] =
            match(secret_ok) {
                | true => match(ok) {
                    | true => "<em>Recovery request sent&mdash;"
                        "check your email!</em>"
                    | _ => "<em>Unable to send mail, "
                        "try again later or talk to an admin.</em>"
                }
                | _ => "<em>Secret wasn't recognized.</em>"
            };

        Response.append(json.toString());
        // CORS
        Response["Access-Control-Allow-Origin"] = origin;
        Response["Access-Control-Allow-Credentials"] = "true";
        Response.Status = (200, "OK");
    }


}


[HasHandlerFactory]
public class RecoveryConfirmHandler: BasePageHandler {

    public RecoveryUserId: uint { get; private set; }

    public this(hd: HandlerData, path: string) {
        base(hd, path);
        RecoveryUserId = 0;
    }

    public override initialize(): void {
        when(RecoveryUserId != 0) {
            PageData["RecoveryUser"] =
                ForumDatabase.getUserName(RecoveryUserId);
        }
    }

    public override callback(): void {
        mutable ok = false;
        def token = Context.Vars["token"];

        when(Request.IsSecure) {
            def user_id =
                ForumDatabase.getUserIdFromSessionToken(STOK.RECOVERY, token);
            when(user_id != 0) {
                RecoveryUserId = user_id;
                ok = true;
            }
        }

        if(ok) {
            PageData["RecoveryToken"] = token;
            base.callback();
        } else {
            Server.internalServerErrorResponse(Context, Request, Response);
        }
    }
}


[HasHandlerFactory]
public class RecoverySubmitHandler: BaseHandler {

    public this(hd: HandlerData) {
        base(hd, null);
    }

    public override callback(): void {
        mutable ok = false;
        when(Request.IsSecure) {
            def pw = Context.Vars["pw"];
            def cf = Context.Vars["cf"];
            def token = Context.Vars["t"];
            def strength = UInt32.Parse(Context.Vars["s"]);

            when(pw == cf && Server.validatePassword(pw, strength)) {
                using(fdb = Server.openForumDatabase()) {
                    def db = fdb.Database;
                    def user_id =
                        fdb.getUserIdFromSessionToken(STOK.RECOVERY, token);

                    when(user_id != 0) {
                        def auth =
                            Server.getModuleInterface.[IAuth]("Pbkdf2Auth");
                        def record = auth.createPasswordRecord(pw);

                        def command = db.createCommand(
                            "UPDATE Auth SET PwRecord=@PwRecord WHERE "
                                "UserId=@UserId") <- [
                                "@PwRecord" = record,
                                "@UserId" = user_id,
                            ];

                        def ex = command.executeNonQuery();
                        when(ex > 0) {
                            fdb.expireSessionTokens(STOK.RECOVERY, user_id);
                            ok = true;
                        }
                    }
                }
            }
        }
        if(ok) {
            Response.Status = (200, "OK");
        } else {
            Response.Status = (500, "Internal Server Error");
        }
    }
}


} // forum
