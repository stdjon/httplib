using System;

using Nemerle.Extensions;

using httplib;


namespace forum {

[HasHandlerFactory]
public class UserHandler: BasePageHandler {

    public IsExternal: bool { get; private set; }
    public UsersPerPage: int { get; }
    public Transform: string { get; private set; }
    public Font: string { get; private set; }
    public MonoFont: string { get; private set; }

    public this(hd: HandlerData, path: string, ext: bool) {
        base(hd, path);
        IsExternal = ext;
        UsersPerPage = Server.Configuration.Limits.UsersPerPage;
    }


    public override initialize(): void {
        base.initialize();
        initializeSingle();
    }

    initializeSingle(): void {
        mutable page_userid;

        def session_userid = ForumDatabase.
            getUserIdFromCookie(Request, STOK.INSECURE);
        def user = Context.Vars["user"];
        def command = Database.createCommand(
            "SELECT Id FROM Users WHERE Name = @Name") <- [ "@Name" = user ];
        page_userid = command.executeScalar() :> uint?;

        def is_prefs =
            !IsExternal &&
            (session_userid != 0) && (page_userid != null) &&
            (session_userid == page_userid);

            if(is_prefs) {
                initializePrefs(session_userid, user);
            } else {
                initializeUser(user);
            }

        PageData["IsUserPrefs"] = is_prefs ? "true" : "false";
    }

    initializeUserCommon(user: string): void {

        def command = Database.createCommand(
            "SELECT Name, Motto, Location, JoinDate, Points, Level, Colour, "
                "Transform, Font, MonoFont FROM Users WHERE Name = @Name") <- [
            "@Name" = user
        ];

        command.execute(reader => {
            def date: long = reader.getValue("JoinDate", 0L);
            Transform = reader.getValue("Transform",
                Server.Configuration.DefaultTransform);
            Font = reader.getValue("Font",
                Server.Configuration.DefaultFontClass);
            MonoFont = reader.getValue("MonoFont",
                Server.Configuration.DefaultMonoFontClass);

            _ = PageData <- [
                "User" = reader.getValue("Name", user),
                "Motto" = reader.getValue("Motto", ""),
                "Location" = reader.getValue("Location", ""),
                "JoinDate" = Server.formatDateFromTicks(date),
                "Points" = reader.getValue("Points", 0),
                "Level" = reader.getValue("Level", 0.0f).ToString("f2"),
                "ColourId" = reader.getValue("Colour",
                    Server.Configuration.DefaultColourClass),
            ];
        });
    }

    initializeUser(user: string): void {

        initializeUserCommon(user);

        mutable threads = array(10);
        mutable posts = array(10);
        mutable stars = array(10);
        mutable i;

        def command = Database.createCommand(
            "SELECT Id FROM Users WHERE Name = @Name") <- [ "@Name" = user ];
        def userid_ = command.executeScalar() :> uint?;
        def userid = userid_ ? (userid_ :> uint) : 0;

        def command2 = Database.createCommand(
            "SELECT Id, Title, CreateDate FROM Threads WHERE "
                "UserId = @UserId ORDER BY CreateDate DESC LIMIT 0, 10") <- [
            "@UserId" = userid,
        ];
        i = command2.execute((j, reader) => {
            threads[j] = PageData() <- [
                "Id" = reader.getValue("Id", 0U),
                "Title" = reader.getValue("Title"),
                "CreateDate" = Server.formatDateFromTicks(reader.getValue("CreateDate", 0L)),
            ];
        });
        Array.Resize(ref threads, i);

        def prefix = Server.getDefaultPrefix(Request);
        for(mutable j = 0; j < threads.Length; j++) {
            def thread_id = threads[j]["Id"] :> uint;
            def path = ForumDatabase.getThreadUrlPath(thread_id);
            threads[j]["ThreadUrl"] = $"$prefix$path";
        }

        def command3 = Database.createCommand(
            "SELECT Id, OutputContent, CreateDate FROM Posts WHERE "
                "UserId = @UserId ORDER BY CreateDate DESC LIMIT 0, 10") <- [
            "@UserId" = userid,
        ];
        i = command3.execute((j, reader) => {
            def content = reader.getValue("OutputContent");

            posts[j] = PageData() <- [
                "Id" = reader.getValue("Id", 0U),
                "Content" = summarizePost(content),
                "CreateDate" = Server.formatDateFromTicks(reader.getValue("CreateDate", 0L)),
            ];
        });
        Array.Resize(ref posts, i);

        mutable s = array(10);
        def command4 = Database.createCommand(
            "SELECT PostId FROM Bookmarks WHERE UserId = @UserId "
                "ORDER BY Id DESC LIMIT 0, 10") <- [
            "@UserId" = userid,
        ];
        i = command4.execute((j, reader) => {
            s[j] = reader.getValue("PostId", 0U);
        });
        Array.Resize(ref s, i);
        Array.Resize(ref stars, i);

        for(mutable j = 0; j < s.Length; j++) {
            def command5 = Database.createCommand(
                "SELECT UserId, OutputContent, CreateDate FROM Posts WHERE "
                    "Id = @Id") <- [
                "@Id" = s[j],
            ];

            command5.execute(reader => {
                def content = reader.getValue("OutputContent");

                stars[j] = PageData() <- [
                    "Id" = s[j],
                    "UserId" = reader.getValue("UserId", 0U),
                    "Content" = summarizePost(content),
                    "CreateDate" = Server.formatDateFromTicks(reader.getValue("CreateDate", 0L)),
                ];
            });

            when(stars[j] != null) {
                def id = stars[j]["UserId"] :> uint;
                def command6 = Database.createCommand(
                    "SELECT Name FROM Users WHERE Id = @Id") <- [
                        "@Id" = id,
                    ];
                stars[j]["User"] = command6.executeScalar() :> string;
                stars[j]["UserDisplay"] = userDisplayName(id);
            }
        }

        _ = PageData <- [
            "UserDisplay" = userDisplayName(userid),
            "Threads" = threads,
            "Posts" = posts,
            "Stars" = stars,
        ];
    }

    initializePrefs(userid :uint, user: string): void {

        initializeUser(user);

        match(Transform) {
            | "bbcode" => PageData["BbCodeActive"] = "active"
            | "textile" => PageData["TextileActive"] = "active"
            | "htmlsan" => PageData["HtmlSanActive"] = "active"
            | _ => {}
        }

        match(Font) {
            | "serif1" => PageData["Serif1Active"] = "active"
            | "serif2" => PageData["Serif2Active"] = "active"
            | "sans1" => PageData["Sans1Active"] = "active"
            | "sans2" => PageData["Sans2Active"] = "active"
            | _ => {}
        }

        match(MonoFont) {
            | "mono1" => PageData["Mono1Active"] = "active"
            | "mono2" => PageData["Mono2Active"] = "active"
            | _ => {}
        }

        _ = PageData <- [
            "Transform" = Transform,
            "IsPrefs" = true,
            "Id" = userid,
        ];
    }
}


} // forum
