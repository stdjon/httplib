using System;

using Nemerle.Extensions;

using httplib;


namespace forum {

[HasHandlerFactory]
public class CreateThreadHandler: BaseHandler {

    public this(hd: HandlerData) {
        base(hd, null);
    }

    public override initialize(): void {
        base.initialize();

        mutable ok = false;
            mutable thid = 0U;
        using(fdb = Server.openForumDatabase()) {
            def database = fdb.Database;
            def title = Context.Vars["title"];
            def colour = Context.Vars["colour"];
            def fp = Context.Vars["fp"];
            def content = Context.Vars["content"];
            mutable renderer = Context.Vars["renderer"];
            def tagstring = Uri.UnescapeDataString(Context.Vars["tags"]);
            def category = Context.Vars["category"];
            def catid = fdb.getCategoryId(category);
            def utc_now = Date.NowTicks;
            def userid = fdb.getUserIdFromCookie(Request, STOK.INSECURE);

            when(String.IsNullOrEmpty(renderer)) {
                def command = database.createCommand(
                    "SELECT Transform FROM Users WHERE Id=@Id") <- [ "@Id" = userid ];
                renderer = command.executeScalar() :> string;
                Log.d("renderer was not set; user's DB default is '{0}'...", renderer);
            }

            Log.d("CreateThreadHandler: category={0}, catid={1} userid={2}, "
                "renderer={3}, utc_now={4}, fp={5}, tagstring={6}",
                category, catid, userid, renderer, utc_now, fp, tagstring);

            database.withTransaction(db => {
                def command = db.createCommand(
                    "INSERT INTO Threads("
                        "Title, UserId, CategoryId, CreateDate, Colour) VALUES("
                        "@Title, @UserId, @CategoryId, @CreateDate, @Colour)") <- [
                    "@Title" = title,
                    "@UserId" = userid,
                    "@CategoryId" = catid,
                    "@CreateDate" = utc_now,
                    "@Colour" = colour
                ];
                def result = command.executeNonQuery();
                Log.t("result={0}", result);

                when(result > 0) {
                    def command2 = db.createCommand(
                        "SELECT Id From Threads WHERE Title=@Title AND "
                            "UserId=@UserId AND CreateDate=@CreateDate") <- [
                        "@Title" = title,
                        "@UserId" = userid,
                        "@CreateDate" = utc_now,
                    ];
                    def thid_ = command2.executeScalar() :> uint?;

                    when(thid_ != null) {
                        thid = thid_ :> uint;
                    }

                    Log.d("createThreadResponse: thid={0}", thid);
                    when(thid > 0) {
                        if(fp == "on") {

                            def (post_id, _, _) = fdb.createPost(
                                userid, thid, null, renderer, content, tagstring);

                            ok = post_id > 0;

                        } else {
                            ok = true;
                        }
                    }
                }
            }, ex => {
                Server.internalServerError(ex);
            });
        }

        if(ok) {
            // redirect to newly-created thread page...
            Response["Location"] = $"$(Server.getDefaultPrefix(Request))/th/$thid";
            Response.Status = (303, "See Other");
        } else {
            // TODO: return to /createthread page?
            internalServerErrorResponse();
        }
    }
}


} // forum.hnd
