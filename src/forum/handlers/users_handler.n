using System;

using Nemerle.Extensions;

using httplib;


namespace forum {

[HasHandlerFactory]
public class UsersHandler: BaseHandler {

    public IsPlural: bool { get; }
    public Transform: string { get; private set; }
    public Font: string { get; private set; }

    public this(hd: HandlerData, path: string, plural: bool) {
        base(hd, path);
        IsPlural = plural;
    }


    public override initialize(): void {
        base.initialize();
        if(IsPlural) {
            initializeUsers();
        } else {
            initializeSingle();
        }
    }

    public initializeSingle(): void {

        def cookies = Request.Cookies;
        def isession = cookies ? cookies["_isession"] : null;
        def session_userid = Server.getUserIdFromSessionToken(STOK.INSECURE, isession);
        def user = Context.Vars["user"];

        def command = Server.Database.createCommand(
            "SELECT Id FROM Users WHERE Name = @Name") <- [ "@Name" = user ];
        def page_userid = command.executeScalar() :> uint?;

        def is_prefs =
            (session_userid != null) && (page_userid != null) &&
            (session_userid == page_userid);

        if(is_prefs) {
            initializePrefs(session_userid :> uint, user);
        } else {
            initializeUser(user);
        }
    }

    public initializeUsers(): void {

        def from = Int32.Parse(Context.Vars["from"]);
        def to = Int32.Parse(Context.Vars["to"]);
        def dist = to + 1 - from;
        mutable users: PageDataArray = array(dist);
        mutable i = 0;

        def command = Server.Database.createCommand(
            "SELECT Name, Level, Points, Motto FROM Users "
                "ORDER BY Name LIMIT @From, @To") <- [
                "@From" = from - 1,
                "@To" = to - 1,
            ];

        using(reader = command.executeReader()) {
            while(reader.Read() && i < dist) {
                def u = reader.GetValue.[string]("Name");
                when(u != null) {
                    def points = reader.GetValue.[int?]("Points", 0);
                    def level = reader.GetValue.[uint?]("Level", 0);
                    def motto = reader.GetValue("Motto", "");
                    users[i] = PageData() <- [
                        "Num" = (from + i).ToString(),
                        "Name" = u,
                        "Points" = points.ToString(),
                        "Level" = level.ToString(),
                        "Motto" = motto,
                    ];
                    i++;
                }
            }
        }

        when(i < dist) {
            Array.Resize(ref users, i);
        }

        def prf = Server.getDefaultPrefix(Request);
        mutable prev = null;
        mutable next = null;

        Log.d("from = {0} > 1 {1}", from, from > 1);
        when(from > 1) {
            def pf = Math.Max(1, from - dist);
            def pt = pf + dist - 1;
            prev = $"$prf/u/$pf-$pt";
        }
        Log.d("prev = {0}", prev);

        def user_count = Server.getUserCount();
        Log.d("to = {0} < {1} {2}", to, user_count, to < user_count);
        when(to < user_count) {
            def nf = from + dist;
            def nt = nf + dist - 1;
            next = $"$prf/u/$nf-$nt";
        }
        Log.d("next = {0}", next);

        _ = PageData <- [
            "Users" = users,
            "Prev" = prev,
            "Next" = next,
        ];
    }

    public initializeUser(user: string): void {

        def command = Server.Database.createCommand(
            "SELECT Name, Motto, Location, JoinDate, Points, Level, Colour, "
                "Transform, Font FROM Users WHERE Name = @Name") <- [
            "@Name" = user
        ];

        using(reader = command.executeReader()) {
            when(reader.Read()) {
                def date = reader.GetValue.[long]("JoinDate", 0);
                Transform = reader.GetValue("Transform", "bbcode");
                Font = reader.GetValue("Font", "serif1");

                _ = PageData <- [
                    "User" = reader.GetValue("Name", user),
                    "Motto" = reader.GetValue("Motto", ""),
                    "Location" = reader.GetValue("Location", ""),
                    "JoinDate" = (date > 0) ? Date.FromTicks(date).ToString() : "never",
                    "Points" = reader.GetValue.[int?]("Points", 0),
                    "Level" = reader.GetValue.[uint?]("Level", 0),
                    "ColourId" = reader.GetValue("Colour", "x360"),
                    "Font" = Font,
                ];
            }
        }
    }

    public initializePrefs(userid :uint, user: string): void {

        initializeUser(user);

        match(Transform) {
            | "bbcode" => PageData["BbCodeActive"] = "active"
            | "textile" => PageData["TextileActive"] = "active"
            | "htmlsan" => PageData["HtmlSanActive"] = "active"
            | _ => {}
        }

        match(Font) {
            | "serif1" => PageData["Serif1Active"] = "active"
            | "serif2" => PageData["Serif2Active"] = "active"
            | "sans1" => PageData["Sans1Active"] = "active"
            | "sans2" => PageData["Sans2Active"] = "active"
            | _ => {}
        }

        _ = PageData <- [
            "Transform" = Transform,
            "IsPrefs" = true,
            "Id" = userid,
        ];
    }
}


} // forum
