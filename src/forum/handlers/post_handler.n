using System;
using System.Collections.Generic;

using Nemerle.Extensions;

using httplib;


namespace forum {

[HasHandlerFactory]
public class PostHandler: BasePageHandler {

    public PostsPerPage: int { get; }
    public PostIdMap: Dictionary[uint, int] { get; private set; }

    public this(hd: HandlerData, path: string) {
        base(hd, path);
        PostsPerPage = Server.Configuration.Limits.PostsPerPage;
        PostIdMap = Dictionary();
    }

    public override initialize(): void {
        base.initialize();

        def pid = UInt32.Parse(Context.Vars["num"]);
        def command = Database.createCommand(
            "SELECT UserId, ThreadId, CreateDate, Points, OutputContent, ReplyTo FROM "
                "Posts WHERE Id = @Id") <- [ "@Id" = pid ];

        mutable uid;
        mutable thid;
        mutable date;
//        mutable points;
        mutable content;
        mutable reply_to;
        mutable ok = false;

        command.execute(reader => {
            uid = reader.getValue("UserId", 0U);
            thid = reader.getValue("ThreadId", 0U);
            date = reader.getValue("CreateDate", 0L);
//            points = reader.getValue("Points", 0);
            content = reader.getValue("OutputContent");
            reply_to = reader.getValue("ReplyTo"): uint?;
            ok = true;
        });

        when(ok) {
            PostIdMap = Server.ThreadPosts.getPostNums(thid);

            def thumbs = ForumDatabase.getPostThumbs(pid);
            def bookmarks = ForumDatabase.getPostBoomarks(pid);

            def command2 = Database.createCommand(
                "SELECT Name from Users WHERE Id = @Id") <- [ "@Id" = uid ];
            def name = command2.executeScalar() :> string;

            def command3 = Database.createCommand(
                "SELECT Title, Colour from Threads WHERE Id = @Id") <- [ "@Id" = thid ];

            mutable title, colour;
            command3.execute(reader => {
                title = reader.getValue("Title");
                colour = reader.getValue("Colour");
            });

            _ = PageData <- [
                "PostId" = pid,
                "Number" = 1,
                "PostUrl" = buildPostUrl(pid, thid),
                "User" = name,
                "UserDisplay" = userDisplayName(uid),
                "Thread" = title,
                "ThreadId" = thid,
                "CreateDate" = Server.formatDateFromTicks(date),
                //"Points" = points,
                "Thumbs" = thumbs,
                "Bookmarks" = bookmarks,
                "Content" = content,
                "ColourId" = colour,
                "IsOwnPost" = (uid == SignedInUserId),

            ];
            when(reply_to != null) {
                _ = PageData <- [
                    "ReplyTo" = reply_to :> uint,
                    "ReplyToUrl" = postUrl(reply_to :> uint),
                ];
            }

            // Tags
            def tags = ForumDatabase.getPostTags(pid);
            when(tags != null) {
                def prf = Server.getDefaultPrefix(Request);
                mutable tagdata: PageDataArray = array(tags.Length);
                for(mutable j = 0; j < tags.Length; j++) {
                    def url = Uri.EscapeDataString(tags[j]);
                    tagdata[j] = PageData() <- [
                        "Name" = tags[j],
                        "Url" = $"$prf/tg/$url",
                    ];
                }
                _ = PageData <- [
                    "Tags" = tagdata,
                    "HasTags" = true,
                ];
            }

            // Replies
            def command = Database.createCommand(
                "SELECT Count(Id) FROM Replies WHERE ReplyTo=@ReplyTo") <- [
                    "@ReplyTo" = pid,
                ];
            def result = command.executeScalar() :> long?;
            when(result != null) {
                def reply_count = result :> int;
                when(reply_count > 0) {
                    def replies: PageDataArray = array(reply_count);

                    def command2 = Database.createCommand(
                        "SELECT PostId FROM Replies WHERE ReplyTo=@ReplyTo") <- [
                            "@ReplyTo" = pid,
                        ];
                    _ = command2.execute((j, reader) => {
                        def pid = reader.getValue("PostId", 0U);
                        replies[j] = PageData() <- [
                            "PostId" = pid,
                            "PostUrl" = postUrl(pid),
                        ];
                    });

                    PageData["HasReplies"] = true;
                    def plural = reply_count > 1;
                    PageData["ReplySummary"] =
                        $<#$reply_count $(plural ? "replies" : "reply")#>; //TODO: l8n?
                    PageData["Replies"] = replies;

                    when(PageData.ContainsKey("ReplyTo")) {
                        PageData["ReplySep"] = true;
                    }
                }
                PageData["ReplyCount"] = reply_count;
            }

            // Thumbs marker
            def command3 = Database.createCommand(
                "SELECT COUNT(Id) FROM Thumbs WHERE "
                    "PostId = @PostId  AND UserId = @UserId") <- [
                "@PostId" = pid,
                "@UserId" = SignedInUserId,
            ];
            def result3 = command3.executeScalar() :> long;
            when(result3 > 0) {
                PageData["IsOwnThumb"] = true;
            }

            // Bookmarks markers
            def command4 = Database.createCommand(
                "SELECT COUNT(Id) FROM Bookmarks WHERE "
                    "PostId = @PostId  AND UserId = @UserId") <- [
                "@PostId" = pid,
                "@UserId" = SignedInUserId,
            ];
            def result4 = command4.executeScalar() :> long;
            when(result4 > 0) {
                PageData["IsOwnBookmark"] = true;
            }


            // User pref (transform)
            def command4 = Database.createCommand(
                "SELECT Transform FROM Users WHERE Id = @Id") <- [ "@Id" = SignedInUserId ];
            PageData["Transform"] = command4.executeScalar() :> string;

            ForumDatabase.readPost(pid, SignedInUserId);
        }

        def cat_id = ForumDatabase.getThreadCategory(thid);
        addFoot(cat_id);
    }

    public buildPostUrl(post_id: uint, thread_id: uint): string {

        def post_number = PostIdMap[post_id];
        def from = (((post_number - 1) / PostsPerPage) * PostsPerPage) + 1;
        def to = from + (PostsPerPage - 1);
        def prefix = Server.getDefaultPrefix(Request);
        def path = ForumDatabase.getThreadUrlPath(thread_id);

        if(1 == from && PostsPerPage == to) {
            // special-case URL for first page of the thread
            $"$prefix$path#$post_number"
        } else {
            $"$prefix$path/$from-$to#$post_number"
        }
    }

    public postUrl(post_id: uint): string {
        $"$(Server.getDefaultPrefix(Request))/p/$post_id"
    }

}


} // forum
