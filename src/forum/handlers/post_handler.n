using System;
using System.Collections.Generic;

using Nemerle.Extensions;

using httplib;


namespace forum {

[HasHandlerFactory]
public class PostHandler: BasePageHandler {

    public PostsPerPage: int { get; }
    public PostIdMap: Dictionary[uint, int] { get; private set; }

    public this(hd: HandlerData, path: string) {
        base(hd, path);
        PostsPerPage = Server.Configuration.Limits.PostsPerPage;
        PostIdMap = Dictionary();
    }

    public override initialize(): void {
        base.initialize();

        def pid = UInt32.Parse(Context.Vars["num"]);
        def command = Database.createCommand(
            "SELECT UserId, ThreadId, CreateDate, Points, OutputContent FROM "
                "Posts WHERE Id = @Id") <- [ "@Id" = pid ];

        mutable uid;
        mutable thid;
        mutable date;
//        mutable points;
        mutable content;
        mutable ok = false;

        command.execute(reader => {
            uid = reader.getValue("UserId", 0U);
            thid = reader.getValue("ThreadId", 0U);
            date = reader.getValue("CreateDate", 0L);
//            points = reader.getValue("Points", 0);
            content = reader.getValue("OutputContent");
            ok = true;
        });

        when(ok) {
            populatePostIds(thid);

            def thumbs = ForumDatabase.getPostThumbs(pid);
            def bookmarks = ForumDatabase.getPostBoomarks(pid);

            def command2 = Database.createCommand(
                "SELECT Name from Users WHERE Id = @Id") <- [ "@Id" = uid ];
            def name = command2.executeScalar() :> string;

            def command3 = Database.createCommand(
                "SELECT Title, Colour from Threads WHERE Id = @Id") <- [ "@Id" = thid ];

            mutable title, colour;
            command3.execute(reader => {
                title = reader.getValue("Title");
                colour = reader.getValue("Colour");
            });

            _ = PageData <- [
                "PostId" = pid,
                "PostUrl" = buildPostUrl(pid, thid),
                "User" = name,
                "UserDisplay" = userDisplayName(uid),
                "Thread" = title,
                "ThreadId" = thid,
                "CreateDate" = (date > 0) ? Date.FromTicks(date).ToString() : "never",
                //"Points" = points,
                "Thumbs" = thumbs,
                "Bookmarks" = bookmarks,
                "Content" = content,
                "ColourId" = colour,
            ];
        }
    }

    populatePostIds(thread_id: uint): void {
        PostIdMap = Dictionary();

        ForumDatabase.forEachPostInThread(thread_id, (j, pid) => {
            PostIdMap[pid] = j + 1;
        });
    }

    public buildPostUrl(post_id: uint, thread_id: uint): string {

        def post_number = PostIdMap[post_id];
        def from = (((post_number - 1) / PostsPerPage) * PostsPerPage) + 1;
        def to = from + (PostsPerPage - 1);
        def prefix = Server.getDefaultPrefix(Request);

        if(1 == from && PostsPerPage == to) {
            // special-case URL for first page of the thread
            $"$prefix/th/$thread_id#$post_number"
        } else {
            $"$prefix/th/$thread_id/$from-$to#$post_number"
        }
    }

}


} // forum
