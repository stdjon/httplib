using System;

using httplib;

using Nemerle.Extensions;


namespace forum {

[HasHandlerFactory]
public class SignupHandler: BasePageHandler {

    IsSubmit: bool;

    public this(hd: HandlerData, submit: bool) {
        base(hd, null);

        IsSubmit = submit;
        PageData["IsSignup"] = true;
    }

    public override initialize(): void {
        base.initialize();
    }

    public override callback(): void {
        def lambda = IsSubmit ?
            signupSubmitResponse :
            signupResponse;

        lambda();
    }

    public signupResponse(): void {

        if(Request.IsSecure) {
            if(0 == SignedInUserId) {
                def cookies = Request.Cookies;
                def u = cookies ? cookies["_u"] : null;
                mutable user = !String.IsNullOrEmpty(u) ? u : null;

                PageData["User"] = user;

                Response.append(Server.renderPage("signup.nyml", PageData));
                Response.Cookies.expire("_u", COOKIE.SECURE_HTTP_ONLY);
                Response.Status = (200, "OK");
            } else {
                // redirect to index...
                Response.append("<html><body><h1>You are already signed in!</h1></body></html>");
                Response["Location"] = Server.DefaultInsecurePrefix + "/";
                Response.Status = (303, "See Other");
            }
        } else {
            Response.append("<html><body><h1>Forbidden!</h1></body></html>");
            Response.Status = (403, "Forbidden");
        }
    }

    public signupSubmitResponse(): void {

        if(Request.IsSecure) {
            def user = Context.Vars["user"];
            def password = Context.Vars["password"];
            def confirm = Context.Vars["confirm"];
            def email = Context.Vars["email"];
            def secret = Context.Vars["secret"];

            mutable test1, test2;

            mutable command1 = Database.createCommand(
                "SELECT Name FROM Users WHERE Name = @Name") <- [
                    "@Name" = user
                ];

            mutable command2 = Database.createCommand(
                "SELECT Email FROM Auth WHERE Email = @Email") <- [
                    "@Email" =  email
                ];

            test1 = command1.executeScalar() :> string;
            test2 = command2.executeScalar() :> string;

            if(test1 != null || test2 != null || password != confirm ||
                !Server.validatePassword(password)) {
                // error with user data.
                // (need a more considered Response though...)
                Response.append("<html><body><h1>Bad Request!</h1></body></html>");
                Response.Status = (400, "Bad Request");
            } else {
                def auth = Server.getModuleInterface.[IAuth]("Pbkdf2Auth");
                mutable token = null;
                mutable expiry;

                if(auth != null) {
                    def now = Date.NowTicks;

                    Database.withTransaction(db => {
                        mutable command3 = db.createCommand(
                            "INSERT INTO Users("
                                "Name, Points, Level, JoinDate, Motto, Location, "
                                "Colour, Transform, Font) VALUES "
                                "(@Name, 0, 0, @JoinDate, '', '', "
                                "@Colour, @Transform, @Font)") <- [
                            "@Name" = user,
                            "@JoinDate" = now,
                            "@Colour" = Server.Configuration.DefaultColourClass,
                            "@Transform" = Server.Configuration.DefaultTransform,
                            "@Font" = Server.Configuration.DefaultFontClass,
                        ];
                        _ = command3.executeNonQuery();

                        mutable command4 = db.createCommand(
                            "SELECT Id FROM Users WHERE "
                                "Name = @Name") <- [ "@Name" = user ];

                        def id = command4.executeScalar() :> uint;

                        def record = auth.createPasswordRecord(password);

                        mutable command5 = db.createCommand(
                            "INSERT INTO Auth(UserId, PwRecord, Email, Secret) "
                                "VALUES (@UserId, @PwRecord, @Email, @Secret)") <- [
                            "@UserId" = id,
                            "@PwRecord" = record,
                            "@Email" = email,
                            "@Secret" = secret,
                        ];
                        _ = command5.executeNonQuery();

                        def (ok, t, x) =
                            Server.registerSessionToken(STOK.SECURE, id, db);

                        when(ok) {
                            token = t;
                            expiry = x;

                            def data = PageData() <- [
                                "SiteName" = Server.Configuration.SiteName,
                                "SiteUrl" = Server.DefaultInsecurePrefix,
                                "User" = user,
                            ];

                            Server.sendEmail(
                                Server.Configuration.DefaultEmailSender,
                                [email], "welcome-email.nyml", data);
                        }
                    });

                    Response.Cookies.add(
                        "_session", token, expiry, COOKIE.SECURE_HTTP_ONLY);
                    Response["Location"] = Server.DefaultInsecurePrefix + "/";
                    Response.Status = (303, "See Other");

                } else {
                    internalServerErrorResponse();
                    Log.w("IPbkdf2Auth module was not found.");
                }
            }
        } else {
            Response.append("<html><body><h1>Forbidden!</h1></body></html>");
            Response.Status = (403, "Forbidden");
        }
    }
}


} // forum
