using System;

using Nemerle.Extensions;

using httplib;


namespace forum {

[HasHandlerFactory]
public class CategoryHandler: BasePageHandler {

    public ThreadsPerPage: int { get; }

    public this(hd: HandlerData, path: string) {
        base(hd, path);

        ThreadsPerPage = Server.Configuration.Limits.ThreadsPerPage;
    }

    public override initialize(): void {
        base.initialize();

        def catid = UInt32.Parse(Context.Vars["id"]);

        def fromstr = Context.Vars["from"];
        def from = !String.IsNullOrEmpty(fromstr) ? Int32.Parse(fromstr) : 1;

        def tostr = Context.Vars["to"];
        def to = !String.IsNullOrEmpty(tostr) ?
            Int32.Parse(tostr) :
            (from + ThreadsPerPage - 1);

        def dist = to + 1 - from;

        mutable ok = false;
        mutable uid;
        def command = Database.createCommand(
            "SELECT Name, UserId, CreateDate, Colour FROM Categories "
                "WHERE Id = @Id") <- [ "@Id" = catid ];

        PageData["Id"] = catid;

        command.execute(reader => {
            uid = reader.getValue("UserId", 0U);
            _ = PageData <- [
                "Name" = reader.getValue("Name"),
                "UserId" = uid,
                "CreateDate" = Date.FromTicks(reader.getValue("CreateDate", 0L)),
                "ColourId" = reader.getValue("Colour"),
            ];
            ok = true;
        });

        PageData["UserName"] = ForumDatabase.getUserName(uid);
        PageData["UserDisplay"] = userDisplayName(uid);

        when(ok) {
            mutable threads: PageDataArray = array(dist);
            mutable i = 0;
            mutable limit;

            def command2 = Database.createCommand(
                "SELECT Id, UserId, Title, CreateDate FROM Threads WHERE "
                    "CategoryId = @CategoryId ORDER BY CreateDate LIMIT @From, @Count") <- [
                "@CategoryId" = catid,
                "@From" = from - 1,
                "@Count" = dist,
            ];

            i = command2.execute((j, reader) => {
                def id = reader.getValue("Id", 0U);
                uid = reader.getValue("UserId", 0U);
                def date = Date.FromTicks(reader.getValue("CreateDate", 0L));
                def title = reader.getValue("Title");

                threads[j] = PageData() <- [
                    "Number" = from + j,
                    "UserId" = uid,
                    "CreateDate" = date.ToString(),
                    "Title" = title,
                    "Id" = id,
                ];
            });
            when(i < dist) {
                Array.Resize(ref threads, i);
            }
            limit = i;

            def prf = Server.getDefaultPrefix(Request);
            for(i = 0; i < limit; i++) {
                def user_id = threads[i]["UserId"] :> uint;
                def thread_id = threads[i]["Id"] :> uint;
                def path = ForumDatabase.getThreadUrlPath(thread_id);
                threads[i]["UserName"] = ForumDatabase.getUserName(user_id);
                threads[i]["UserDisplay"] = userDisplayName(user_id);
                threads[i]["PostCount"] =
                    ForumDatabase.getPostCount(thread_id);
                threads[i]["ThreadUrl"] = $"$prf$path";
            }

            _ = PageData <- [
                "Threads" = threads,
                "From" = from,
                "To" = to,
                "Markers" = buildMarkerList(from, limit),
            ];

            def thread_count = ForumDatabase.getThreadCount(catid);
            def path = ForumDatabase.getCategoryUrlPath(catid);

            addPagination(PageData,
                thread_count, dist, ThreadsPerPage,
                from, to, $"$prf$path");
        }
    }
}


} // forum.hnd
