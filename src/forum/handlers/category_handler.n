using System;

using Nemerle.Extensions;

using httplib;


namespace forum {

[HasHandlerFactory]
public class CategoryHandler: BasePageHandler {

    public this(hd: HandlerData, path: string) {
        base(hd, path);
    }

    public override initialize(): void {
        base.initialize();

        def catid = UInt32.Parse(Context.Vars["id"]);
        def fr_st = Context.Vars["from"];
        def from = !String.IsNullOrEmpty(fr_st) ? Int32.Parse(fr_st) : 1;
        def to_st = Context.Vars["to"];
        def to = !String.IsNullOrEmpty(to_st) ? Int32.Parse(to_st) : (from + 24);  //TODO: configurable?
        def dist = to + 1 - from;

        mutable ok = false;
        mutable uid;
        def command = Database.createCommand(
            "SELECT Name, UserId, CreateDate, Colour FROM Categories "
                "WHERE Id = @Id") <- [ "@Id" = catid ];

        PageData["Id"] = catid;

        command.execute(reader => {
            uid = reader.getValue("UserId", 0U);
            _ = PageData <- [
                "Name" = reader.getValue("Name"),
                "UserId" = uid,
                "CreateDate" = Date.FromTicks(reader.getValue("CreateDate", 0L)),
                "ColourId" = reader.getValue("Colour"),
            ];
            ok = true;
        });

        PageData["UserName"] = ForumDatabase.getUserName(uid);

        when(ok) {
            mutable threads: PageDataArray = array(dist);
            mutable i = 0;
            mutable limit;

            def command2 = Database.createCommand(
                "SELECT Id, UserId, Title, CreateDate FROM Threads WHERE "
                    "CategoryId = @CategoryId ORDER BY CreateDate LIMIT @From, @To") <- [
                "@CategoryId" = catid,
                "@From" = from - 1,
                "@To" = to - 1,
            ];

            i = command2.execute((j, reader) => {
                when(j < dist) {
                    def id = reader.getValue("Id", 0U);
                    uid = reader.getValue("UserId", 0U);
                    def date = Date.FromTicks(reader.getValue("CreateDate", 0L));
                    def title = reader.getValue("Title");

                    threads[j] = PageData() <- [
                        "Number" = from + j,
                        "UserId" = uid,
                        "CreateDate" = date.ToString(),
                        "Title" = title,
                        "Id" = id,
                    ];
                }
            });
            when(i < dist) {
                Array.Resize(ref threads, i);
            }
            limit = i;

            for(i = 0; i < limit; i++) {
                threads[i]["UserName"] =
                    ForumDatabase.getUserName(threads[i]["UserId"] :> uint);
                threads[i]["PostCount"] =
                    ForumDatabase.getPostCount(threads[i]["Id"] :> uint);
            }

            // Add a marker for every fifth thread (1, 6, 11...)
            def marker_count = (limit + 4) / 5;
            def markers: PageDataArray = array(marker_count);
            for(i = 0; i < marker_count; i++) {
                markers[i] = PageData() <- [ "Mark" = (i * 5) + from ];
            }

            _ = PageData <- [
                "Threads" = threads,
                "Markers" = markers,
                "From" = from,
                "To" = to,
            ];

            // prev/next
            def prf = Server.getDefaultPrefix(Request);
            mutable prev = null;
            mutable next = null;

            Log.d("from = {0} > 1 {1}", from, from > 1);
            when(from > 1) {
                def pf = Math.Max(1, from - dist);
                def pt = pf + dist - 1;
                prev = $"$prf/th/$catid/$pf-$pt";
            }
            Log.d("prev = {0}", prev);

            def user_count = ForumDatabase.getThreadCount(catid);
            Log.d("to = {0} < {1} {2}", to, user_count, to < user_count);
            when(to < user_count) {
                def nf = from + dist;
                def nt = nf + dist - 1;
                next = $"$prf/th/$catid/$nf-$nt";
            }
            Log.d("next = {0}", next);

            _ = PageData <- [
                "Prev" = prev,
                "Next" = next,
            ];
        }
    }
}


} // forum.hnd
