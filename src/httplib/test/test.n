using System;

using NUnit.Framework;


namespace httplib.test {

[TestFixture]
public class ServerTypes {

    [Test] public methodToString(): void {

        Assert.AreEqual(HTTP.GET.methodName(), "GET");
        Assert.AreEqual("GET".methodType(), HTTP.GET);
        Assert.AreEqual(HTTP.POST.methodName(), "POST");
        Assert.AreEqual("POST".methodType(), HTTP.POST);
    }

    [Test] public cookieFlags(): void {

        Assert.IsFalse(COOKIE.NONE.isHttpOnly());
        Assert.IsFalse(COOKIE.NONE.isSecure());
        Assert.IsTrue(COOKIE.HTTP_ONLY.isHttpOnly());
        Assert.IsTrue(COOKIE.SECURE.isSecure());
        Assert.IsTrue(COOKIE.SECURE_HTTP_ONLY.isHttpOnly());
        Assert.IsTrue(COOKIE.SECURE_HTTP_ONLY.isSecure());
    }
}


[TestFixture]
public class Server {

    [Test] public basicServerConstruction(): void {
        def sc = ServerConfiguration();
        Assert.IsNotNull(sc);
        def s = Server(sc);
        Assert.IsNotNull(s);
    }

    [Test] public defaultPrefixes(): void {
        def sc = ServerConfiguration();
        Assert.IsNotNull(sc);
        sc.Prefixes = Prefixes();
        sc.Prefixes.Secure = array["https://test/"];
        sc.Prefixes.Insecure = array["http://test/"];
        def s = Server(sc);
        Assert.IsNotNull(s);
        Assert.AreEqual("https://test", s.DefaultSecurePrefix);
        Assert.AreEqual("http://test", s.DefaultInsecurePrefix);
    }
}


} // namespace httplib.test
