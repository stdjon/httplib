using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;

using Nemerle.Utility;

using YamlDotNet.Serialization;


namespace httplib {

[HasLogging]
public class Renderer {

    static yaml_deserializer = Deserializer();

    [Accessor] server: Server;

    public virtual PageType: Type {
        get { typeof(Page) }
    }

    public this(s: Server) {
        server = s;
    }

    public virtual loadPage(path: string, stream: Stream, use_template = true): Page {
        Log.d("Renderer.loadPage '{0}' [{1}]...", path, PageType);
        mutable result = null;
        using(reader = StreamReader(stream)) {
            result = yaml_deserializer.Deserialize(reader, PageType) :> Page;
            result.Path = path;
            result.Server = Server;

            when(use_template && !String.IsNullOrEmpty(result.Template)) {
                def fs = Server.openLocalFile(result.Template);
                def template = loadPage(path, fs, false);
                result.merge(template);
            }
        }
        result;
    }

    /** Load a Renderer by reflection, given a DLL and type name. */
    public static load(path: string, name: string, server: Server): Renderer {

        def assembly = Assembly.LoadFrom(path);
        def type = assembly.GetType(name);

        Activator.CreateInstance(type, server) :> Renderer;
    }
}


}
