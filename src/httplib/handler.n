using System;
using System.IO;


namespace httplib {

//------------------------------------------------------------------------------
// HandlerData

/** This exists basically to make the Handler ctor (and subclasses) simpler and
 *  easier to write. */
[Record]
public class HandlerData {
    public Context: Context { get; set; }
    public Request: Request { get; set; }
    public Response: Response { get; set; }
    public Server: Server { get; set; }
}


//------------------------------------------------------------------------------
// Handler

public abstract class Handler {

    public virtual Context: Context { get; set; }
    public virtual Request: Request { get; set; }
    public virtual Response: Response { get; set; }
    public virtual Server: Server { get; set; }

    public this(hd: HandlerData) {
        Context = hd.Context;
        Request = hd.Request;
        Response = hd.Response;
        Server = hd.Server;
    }

    public abstract callback(): void {
        // do stuff with Context/Request/Response
    }
}


//------------------------------------------------------------------------------
// CallbackHandler

public class CallbackHandler: Handler {

    lambda: Server.Callback;

    public this(hd: HandlerData, cb: Server.Callback) {
        base(hd);
        lambda = cb;
    }

    public override callback(): void {
        lambda(Context, Request, Response);
    }

    [Record]
    public class Wrapper {

        lambda: Server.Callback;

        public unwrap(hd: HandlerData): Handler {
            CallbackHandler(hd, lambda);
        }
    }
}


//------------------------------------------------------------------------------
// ComplexHandler

public class ComplexHandler: Handler {

    public this(hd: HandlerData) {
        base(hd);
    }

    public override callback(): void {
        initialize();

        def path = PagePath;
        mutable fs = null;
        when(!String.IsNullOrEmpty(path)) {
            fs = openFile(path);
        }

        mutable data = null;
        when(fs != null) {
            data = PageData;
        }

        def ext = Path.GetExtension(path).Substring(1);
        mutable renderer = getRenderer(ext);
        when(renderer != null) {
            def page = renderer.loadPage(fs);
            def text = page.render(data);
            Response.append(text);
            Response.ContentType = ContentType;
            Response.Status = Status;
        }

        finish();
    }

    public virtual initialize(): void {}

    public virtual PagePath: string {
        get { Request.RawPath }
    }

    public virtual openFile(path: string): Stream {
        Server.openLocalFile(path);
    }

    public virtual ContentType: string {
        get { Server.extensionToMimeType(Request.Extension); }
    }

    public virtual PageData: PageData {
        get { null }
    }

    public virtual getRenderer(ext: string): Renderer {
        Server.Renderers[ext];
    }

    public virtual Status: int * string {
        get { (200, "OK") }
    }

    public virtual loadContent(): void {}

    public virtual finish(): void {}
}


} // namespace httplib
