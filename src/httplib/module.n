using System;
using System.Collections.Generic;
using System.Reflection;


namespace httplib {

//------------------------------------------------------------------------------
// IModuleInterface

public interface IModuleInterface {

    Name: string { get; } // We expect this to be fulfilled by Module.Name
}


//------------------------------------------------------------------------------
// Module

public abstract class Module {

    public abstract InterfaceType: Type { get };
    public Name: string { get; internal set; }
    public Server: Server { get; internal set };

    // NB: This method is expecting derived Modules to implement (a derivation
    // of) IModuleInterface directly.
    public virtual getInterface(): IModuleInterface {
        this :> IModuleInterface;
    }

    public virtual getInterface[T](): T {
        getInterface() :> T;
    }

    /** Load a DB by reflection, given a DLL and type name. */
    public static load(name: string, conf: ModuleConfiguration): Module {

        def assembly = Assembly.LoadFrom(conf.Assembly);
        def type = assembly.GetType(conf.Typename);

        def result = Activator.CreateInstance(type, conf.Data) :> Module;

        when(result != null) {
            result.Name = name;
        }
        result;
    }
}


//------------------------------------------------------------------------------
// ModuleCache

public class ModuleCache {

    modules: Dictionary[string * Type, Module] = Dictionary();

    public loadModule(
        name: string, conf: ModuleConfiguration, server: Server): void {

        mutable module_ = Module.load(name, conf);
        module_.Server = server;
        addModule(name, module_);
    }

    public addModule(name: string, m: Module): void {
        modules[name, m.InterfaceType] = m;
    }

    public getModuleInterface[T](name: string): T {
        getModuleInterface(name, typeof(T)) :> T;
    }

    public getModuleInterface(name: string, type: Type): IModuleInterface {
        mutable result = null;
        mutable probe;

        when(modules.TryGetValue((name, type), out probe)) {
            result = probe.getInterface();
        }
        result;
    }
}


} // namespace httplib
