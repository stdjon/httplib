using System.Collections.Generic;

using Nemerle.Utility;


namespace httplib {

//------------------------------------------------------------------------------
// ServerConfiguration

[Record]
public class DatabaseConfiguration {
    /** Database assembly */
    [Accessor(flags = WantSetter)] mutable assembly: string;
    /** Database typename */
    [Accessor(flags = WantSetter)] mutable typename: string;
    /** Database connection */
    [Accessor(flags = WantSetter)] mutable connection: string;

    public this() {}
}


[Record]
public class Prefixes {
    /** Secure (https://) prefixes */
    [Accessor(flags = WantSetter)] mutable secure: array[string];
    /** Insecure (http://) prefixes */
    [Accessor(flags = WantSetter)] mutable insecure: array[string];

    public this() {}
}

[Record]
public class RendererConfiguration {
    /** Renderer assembly */
    [Accessor(flags = WantSetter)] mutable assembly: string;
    /** Renderer typename */
    [Accessor(flags = WantSetter)] mutable typename: string;

    public this() {}
}


[Record]
public class ModuleConfiguration {
    /** Module assembly */
    [Accessor(flags = WantSetter)] mutable assembly: string;
    /** Module typename */
    [Accessor(flags = WantSetter)] mutable typename: string;

    public this() {}
}


public type Renderers = Dictionary[string, RendererConfiguration];
public type Modules = List[ModuleConfiguration];
public type MimeTypes = Dictionary[string, string];


[Record]
public class ServerConfiguration {
    /** Database configuration */
    [Accessor(flags = WantSetter)] mutable database: DatabaseConfiguration;
    /** Listener prefixes */
    [Accessor(flags = WantSetter)] mutable prefixes: Prefixes;
    /** Filesystem roots for file serving */
    [Accessor(flags = WantSetter)] mutable roots: array[string];
    /** Patterns to test when deciding if a file can be served */
    [Accessor(flags = WantSetter)] mutable file_serving: array[string];
    /** Renderers to try (in order) when no extension given in request URI */
    [Accessor(flags = WantSetter)] mutable renderers: Renderers;
    /** Additional Modules to load */
    [Accessor(flags = WantSetter)] mutable modules: Modules;
    /** (Mapping extensions to) MIME Types */
    [Accessor(flags = WantSetter)] mutable mime_types: MimeTypes;
    /** Minimum length reserved for response body */
    [Accessor(flags = WantSetter)] mutable output_length: int;
    /** File chunk (read) length */
    [Accessor(flags = WantSetter)] mutable file_chunk_length: int;

    public this() {}
}


} // namespace httplib
