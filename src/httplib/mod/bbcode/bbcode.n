using System;
using System.Collections.Generic;

using Nemerle.Extensions;

using CodeKicker.BBCode;


/** A note from the CodeKicker.BBCode source code:
 *  "In order to use this library, we require a link to http://codekicker.de/
 *  from you. Licensed unter the Creative Commons Attribution 3.0 Licence:
 *  http://creativecommons.org/licenses/by/3.0/." */

namespace httplib.mod {

[HasLogging]
public class BbCode: Module, ITextTransform {

    public override InterfaceType: Type {
        get { typeof(ITextTransform) }
    }

    Parser: BBCodeParser { get; private set; }

    public this(conf: ModuleData = null) {
        Log.i("Starting BBCode module... (conf: {0})", conf);

        def bbtags = conf ? getTagsFromData(conf) : null;
        when(bbtags != null) {
            Parser = BBCodeParser(bbtags);
        }
    }

    public transform(input: string): string {
        Parser ? Parser.ToHtml(input) : input;
    }

    getTagsFromData(data: ModuleData): List[BBTag] {
        mutable result = List();
        mutable tags, probe;

        when(data.TryGetValue("Tags", out probe)) {
            tags = probe :> List[object];
        }

        when(tags != null) {
            foreach(t :> Dictionary[object, object] in tags) {
                def tag = t["Tag"] :> string;
                def open = t["Open"] :> string;
                def close = t["Close"] :> string;

                mutable auto_render = true;
                mutable require_close = true;
                mutable flags, attrs;

                when(t.TryGetValue("Flags", out probe)) {
                    flags = probe :> string;
                }
                when(t.TryGetValue("Attrs", out probe)) {
                    attrs = probe :> List[object];
                }

                when(flags != null) {
                    def arr = flags.Split(array['|']);

                    foreach(f in arr) {
                        match(f) {
                            | "NoAutoRender" => auto_render = false
                            | "NoClose" => require_close = false
                            | _ => {}
                        }
                    }
                }

                def bbattrs = attrs ? getAttrsFromData(attrs) : null;

                result.Add(BBTag(
                    tag, open, close, auto_render, require_close, bbattrs));
            }
        }

        result;
    }

    getAttrsFromData(data: List[object]): array[BBAttribute] {
        def result = List();

        foreach(a :> Dictionary[object, object] in data) {
            def id = a["Id"] :> string;
            def name = a["Name"] :> string;

            result.Add(BBAttribute(id, name));
        }

        result ? result.ToArray() : null;
    }
}


} // namespace httplib.mod
