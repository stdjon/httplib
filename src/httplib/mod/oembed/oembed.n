using System;

using OEmbed.Net;
using OEmbed.Net.Domain;


// TODO: this is a WIP, we will probably need to check incoming URL's against a
//   list of known providers to synthesise a request URL.

namespace httplib{

public variant OEMB {
    | LINK {
        public url: string;
    }
    | PHOTO {
        public url: string;
        public width: int;
        public height: int;
    }
    | RICH {
        public url: string;
    }
    | VIDEO {
        public url: string;
        public width: int;
        public height: int;
    }
}


public interface IOEmbed: IModuleInterface {

    getEmbed(data: OEMB): string;
}


namespace mod {

[HasLogging]
public class OEmbed: Module, IOEmbed {

    public override InterfaceType: Type {
        get { typeof(IOEmbed) }
    }

    public this(data: ModuleData = null) {
        Log.i("Starting OEmbed module... (data: {0})", data);
    }

    public getEmbed(_: OEMB): string {
        | LINK(_) => {
            "" // not really sure what to do here...
        }
        | PHOTO(u, _, _) => {
            def c = Consumer.[Photo]();
            "<img src='" + c.GetObject(u).Url + "'></img>";
        }
        | RICH(u) => {
            def c = Consumer.[Rich]();
            c.GetObject(u).Html;
        }
        | VIDEO(u, _, _) => {
            def c = Consumer.[Video]();
            c.GetObject(u).Html;
        }
    }
}


} // namespace mod
} // namespace httplib
