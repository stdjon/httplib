using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Reflection;
using System.Text.RegularExpressions;

using CsQuery;

using OEmbed.Net;
using OEmbed.Net.Domain;


namespace httplib.mod {

//------------------------------------------------------------------------------
// "compiled" information about providers

[HasLogging]
public class ProviderBuilder {

    public Name: string { get; private set; }
    public Type: EmbedType { get; private set; }
    public Endpoint: string { get; private set; }
    public ExtraParams: string { get; private set; }
    public Patterns: List[Regex] { get; private set; }

    public this(
        name: string, type: string,
        endpoint: string, extra: string, patterns: List[string], self: OEmbed) {

        Name = name;
        Type = self.Types[type];
        Endpoint = endpoint;
        ExtraParams = extra;
        Patterns = List();

        foreach(p in patterns) {
            Patterns.Add(Regex(p));
        }
    }

    public virtual isMatch(url: string): bool {
        mutable result = false;
        exit: {
            foreach(p in Patterns) {
                when(p.IsMatch(url)) {
                    result = true;
                    exit();
                }
            }
        }
        result;
    }

    public load(url: string): Provider {
        def assembly = Assembly.LoadFrom(Type.Assembly);
        def type = assembly.GetType(Type.Typename);

        Log.d("ProviderBuilder.load({0}): [{1}] {2}", url, type, assembly);

        def data = ProviderData(url, Endpoint, ExtraParams);
        Activator.CreateInstance(type, data) :> Provider;
    }
}


//------------------------------------------------------------------------------

[Record]
public class ProviderData {

    public Url: string { get; private set; }
    public Endpoint: string { get; private set; }
    public ExtraParams: string { get; private set; }
}

//------------------------------------------------------------------------------
// Base class for providers

[HasLogging]
public class Provider {

    public Url: string { get; private set; }
    public Endpoint: string { get; private set; }
    public ExtraParams: string { get; private set; }

    public this(data: ProviderData) {
        Url = data.Url;
        Endpoint = data.Endpoint;
        ExtraParams = data.ExtraParams
    }

    public virtual transform(): string {
        Url;
    }

    // Converts a bare URL to <a href="URL">URL</a>
    public virtual makeUrl(title: string = null): string {
        def t = title ? title : Url;
        $"<a href='$Url' rel='nofollow'>$t</a>";
    }
}


public type Providers = List[Provider];


//------------------------------------------------------------------------------
// Default URL Provider

public class DefaultUrlProvider: Provider {
    public this(data: ProviderData) {
        base(data);
    }

    public override transform(): string {
        makeUrl();
    }
}


//------------------------------------------------------------------------------
// Image URL Provider

public class ImageUrlProvider: Provider {
    public this(data: ProviderData) {
        base(data);
    }

    public override transform(): string {
        makeUrl($"<img src='$Url' style='max-width: 320px; max-height: 240px'/>");
    }
}


//------------------------------------------------------------------------------
// OEmbed providers (photo, video)

public class OEmbedProvider: Provider {

    public virtual OEmbedUrl: string { get; private set; }

    public this(data: ProviderData) {
        base(data);

        def fmt = Endpoint.Contains(".json") ?
            "" : "&format=json";
        def ext = String.IsNullOrEmpty(ExtraParams) ?
            "" : $"&$ExtraParams";

        //TODO: configure maxwidth/maxheight
        OEmbedUrl =
            $"$(Endpoint)?url=$(Uri.EscapeDataString(Url))$fmt$ext"
            "&maxwidth=320&maxheight=240";

        Log.t("OEmbedProvider: url={0}", OEmbedUrl);
    }
}


public class OEmbedPhotoProvider: OEmbedProvider {

    public this(data: ProviderData) {
        base(data);
    }

    public override transform(): string {
        def o = Consumer.[Photo]();
        def d = o.GetObject(OEmbedUrl);
        $"<img src='$(d.Url)' height='$(d.Height)' width='$(d.Width)'></img>";
    }
}


public class OEmbedRichProvider: OEmbedProvider {

    public this(data: ProviderData) {
        base(data);
    }

    public override transform(): string {
        def o = Consumer.[Rich]();
        def d = o.GetObject(OEmbedUrl);
        d.Html;
    }
}


public class OEmbedVideoProvider: OEmbedProvider {

    public this(data: ProviderData) {
        base(data);
    }

    public override transform(): string {
        def o = Consumer.[Video]();
        def d = o.GetObject(OEmbedUrl);
        d.Html;
    }
}


//------------------------------------------------------------------------------
// Makes a generic HTTP GET request and allows CsQueries on the response data.

public class HttpQueryProvider: Provider {

    public Query: CQ { get; private set; }

    public this(data: ProviderData) {
        base(data);

        def request = WebRequest.Create(Url) :> HttpWebRequest;
        def response = request.GetResponse() :> HttpWebResponse;
        def stream = response.GetResponseStream();
        // The weird syntax on the next line is us telling NCC that we want to
        // use the single-argument version of CQ.Create(stream), which for some
        // reason, it is unable to deduce...
        Query = (CQ.Create: Stream -> CQ)(stream);
    }

    public virtual query(selector: string): string {
        Query.Select(selector).SelectionHtml(true);
    }
}


} // namespace httplib.mod
