using System;
using System.Security.Cryptography;

using httplib;


namespace httplib.mod {

/** This interface describes a PBKDF2-based Authentication module based in part
 *  on Taylor Hornby's implementation in C#, available at:
 *  https://crackstation.net/hashing-security.htm#aspsourcecode */
public interface IPbkdf2Auth: IAuth {
}


[HasLogging]
public class Pbkdf2Auth: Module, IPbkdf2Auth {

    public override InterfaceType: Type {
        get { typeof(IPbkdf2Auth) }
    }

    Salt: RNGCryptoServiceProvider { get; private set; }

    public IterationCount: int { get; private set; }
    public HashLength: int { get; private set; }

    public this() {
        initialize();
    }

    public this(conf: ModuleData) {
        initialize(conf);
    }

    initialize(conf: ModuleData = null): void {
        Log.i("Starting Pbkdf2Auth module... (conf: {0})", conf);
        Salt = RNGCryptoServiceProvider();
        IterationCount = 12500;
        HashLength = 40;

        when(conf != null) {
            mutable probe;
            when(conf.TryGetValue("IterationCount", out probe)) {
                IterationCount = Int32.Parse(probe);
            }
            when(conf.TryGetValue("HashLength", out probe)) {
                HashLength = Int32.Parse(probe);
            }
        }
    }

    public createSalt(): array[byte] {
        mutable result: array[byte] = array(HashLength);
        Salt.GetBytes(result);
        result;
    }

    public hashPassword(
        pw: string, salt: array[byte], iter: int, length: int): array[byte] {

        def pbkdf2 = Rfc2898DeriveBytes(pw, salt);
        pbkdf2.IterationCount = iter;
        pbkdf2.GetBytes(length);
    }

    public createPasswordRecord(pw: string): string {
        def salt = createSalt();
        def hash = hashPassword(pw, salt, IterationCount, HashLength);
        "PBKDF2|" + IterationCount + "|" + HashLength + "|" +
        Convert.ToBase64String(salt) + "|" + Convert.ToBase64String(hash);
    }

    public validatePassword(pw: string, record: string): bool {
        def split = record.Split(array['|']);
        def algo = split[0];
        def iter = Int32.Parse(split[1]);
        def len = Int32.Parse(split[2]);
        def salt = Convert.FromBase64String(split[3]);
        def hash = Convert.FromBase64String(split[4]);
        def test = hashPassword(pw, salt, iter, len);

        compareHashes(hash, test) && ("PBKDF2" == algo);
    }

    public compareHashes(a: array[byte], b: array[byte]): bool {
        mutable cmp: int = a.Length ^ b.Length;
        for(mutable i = 0; i < HashLength; i++) {
            def ca = a[i % a.Length];
            def cb = b[i % b.Length];
            cmp |= ca ^ cb;
        }
        cmp == 0;
    }
}


} // namespace httplib.mod
