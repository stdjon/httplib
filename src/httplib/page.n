using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;

using Nemerle.IO;


namespace httplib {

//------------------------------------------------------------------------------
// Page

[Record]
public class Page {

    type Dict[T] = Dictionary[string, T];
    public type PartialsType = Dict[string];
    public type ObjectsType = Dict[object];

    public Path: string { get; set; }
    public Metas: List[string] { get; set; }
    public Title: string { get; set; }
    public Stylesheets: List[string] { get; set; }
    public Content: string { get; set; }
    public Partials: PartialsType { get; set; }
    public Objects: ObjectsType { get; set; }
    public Template: string { get; set; }

    public this() {}

    public virtual render(data: ObjectsType = null, parts: PartialsType = null): string {
        def title =
            if(!String.IsNullOrEmpty(Title)) {
                $"\n<title>$Title</title>";
            } else {
                "";
            }

        mutable meta = "";
        foreach(m in Metas) {
            when(!String.IsNullOrEmpty(m)) {
                meta += $"\n<meta $m>"
            }
        }

        mutable stylesheet = "";
        foreach(s in Stylesheets) {
            when(!String.IsNullOrEmpty(s)) {
                stylesheet += $"\n<link href='$s' rel='stylesheet'>"
            }
        }

        def content = renderContent(data, parts);

        $"<html>\n<head>$meta$title$stylesheet\n</head>\n"
        $"<body>\n$content</body>\n</html>";
    }

    public virtual renderContent(
        _data: ObjectsType = null, _parts: PartialsType = null): string {

        Content;
    }

    public merge(other: Page): void {
        when(Title == null) {
            Title = other.Title;
        }
        when(Content == null) {
            Content = other.Content;
        }
        Metas = mergeLists(other.Metas, Metas);
        Stylesheets = mergeLists(other.Stylesheets, Stylesheets);
        Partials = mergeDicts(other.Partials, Partials);
        Objects = mergeDicts(other.Objects, Objects);
    }

    protected static mergeLists(
        a: List[string], b: List[string]): List[string] {
        mutable result = List();

        when(a != null) {
            foreach(m in a) {
                result.Add(m);
            }
        }
        when(b != null) {
            foreach(m in b) {
                result.Add(m);
            }
        }
        result;
    }

    protected static mergeDicts[T](a: Dict[T], b: Dict[T]): Dict[T] {
        mutable result = Dict();

        when(a != null) {
            foreach(m in a) {
                result.Add(m.Key, m.Value);
            }
        }
        when(b != null) {
            foreach(m in b) {
                result[m.Key] = m.Value;
            }
        }
        result;
    }
}


} // namespace httplib
