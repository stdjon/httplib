using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;

using YamlDotNet.Serialization;


namespace httplib {

//------------------------------------------------------------------------------
// FileType

public type FileType = FILE;
public enum FILE {
    | JS
    | CSS
}


public type JoinType = JOIN;
public enum JOIN {
    | CAT
    | MIN
}


public module FileTypeExtensions {

    public extension(this ft: FileType): string {
        match(ft) {
            | JS => "js"
            | CSS => "css"
        }
    }
    public rename(this ft: FileType, path: string): string {
        Path.ChangeExtension(path, ft.extension());
    }
}


//------------------------------------------------------------------------------
// Page

[YamlRecord]
[HasLogging]
public class Page {

    type Dict[T] = Dictionary[string, T];
    public type PartialsType = Dict[string];
    public type ObjectsType = Dict[object];

    static yaml_deserializer = Deserializer();

    public Path: string { get; set; }
    public Lang: string { get; set; }
    public Metas: List[string] { get; set; }
    public Title: string { get; set; }
    public Stylesheets: List[string] { get; set; }
    public Scripts: List[string] { get; set; }
    public BodyAttributes: List[string] { get; set; }
    public Content: string { get; set; }
    public Partials: PartialsType { get; set; }
    public Objects: ObjectsType { get; set; }
    public Template: string { get; set; }

    [YamlIgnore] public Server: Server { get; set; }
    [YamlIgnore] public Consolidation: Consolidation { get; set; }

    internal static load(path: string, stream: Stream,
        type: Type, server: Server, use_template: bool): Page {

        mutable result = null;
        using(reader = StreamReader(stream)) {
            result = yaml_deserializer.Deserialize(reader, type) :> Page;
        }

        result.Path = path;
        result.Server = server;
        result.Consolidation = server.Configuration.Consolidation;

        when(use_template && !String.IsNullOrEmpty(result.Template)) {
            def fs = server.openLocalFile(result.Template);
            def template = load(path, fs, type, server, false);
            result.merge(template);
        }

        result;
    }

    public virtual render(
        data: ObjectsType = null, parts: PartialsType = null): string {

        def lang =
            !String.IsNullOrEmpty(Lang) ? $" lang='$Lang'" : "";

        def t = renderTitle(data);
        def title =
            !String.IsNullOrEmpty(t) ? $"\n<title>$t</title>" : "";

        mutable meta = "";
        when(Metas != null) {
            foreach(m in Metas) {
                when(!String.IsNullOrEmpty(m)) {
                    meta += $"\n<meta $(renderString(m, data))>"
                }
            }
        }

        when(Consolidation != null) {
            def conf = Consolidation.Types;
            mutable probe;
            when(conf.TryGetValue("Scripts", out probe)) {
                when("cat" == probe) {
                    consolidateScripts(JOIN.CAT);
                }
            }

            when(conf.TryGetValue("Stylesheets", out probe)) {
                when("cat" == probe) {
                    consolidateStylesheets(JOIN.CAT);
                }
            }
        }

        def stylesheet = renderFileElementList(
            Stylesheets, "link/href/rel='stylesheet'", data);
        def script = renderFileElementList(Scripts, "script/src", data);

        mutable body_attrs = "";
        when(BodyAttributes != null) {
            foreach(b in BodyAttributes) {
                when(!String.IsNullOrEmpty(b)) {
                    body_attrs += $" $b";
                }
            }
        }

        // insert "_Scripts" into partial data for content render, so client has
        // control over where scripts are placed within a page.
        mutable pd = PartialsType();
        pd["_Scripts"] = script;
        pd = mergeDicts(parts, pd);

        def content = renderContent(data, pd);

        $"<!DOCTYPE html>\n<html$lang>\n"
        $"<head>$meta$title$stylesheet\n</head>\n"
        $"<body$body_attrs>\n$content</body>\n</html>";
    }

    public virtual renderContent(
        data: ObjectsType = null, parts: PartialsType = null): string {

        renderString(Content, data, parts);
    }

    public virtual renderTitle(data: ObjectsType = null): string {

        renderString(Title, data, null);
    }

    protected virtual renderString(template: string,
        _data: ObjectsType, _parts: PartialsType = null): string {

        template;
    }

    protected virtual renderFileElementList(
        paths: List[string], template: string, data: ObjectsType = null): string {

        mutable result = "";
        def split = template.Split(array['/'], 3);
        def (tag, loc, add) =
            (split[0], split[1], (split.Length > 2 ? $" $(split[2]) " : " "));

        when(paths != null) {
            foreach(p in paths) {
                // It's occasionally useful to have a file element which has an
                // associated id attribute. If a file path contains a '#'
                // character, we will use everything after it as the id name:
                // - /path/to/file.ext#file-id
                when(!String.IsNullOrEmpty(p)) {
                    def f = filePath(p);
                    def attrs =
                        if(hasId(p)) {
                            def id = fileId(p);
                            $"$loc='$(renderString(f, data))' id='$id'";
                        } else {
                            $"$loc='$(renderString(f, data))'";
                        };
                    result += $"\n<$tag$add$attrs></$tag>"
                }
            }
        }
        result;
    }

    public consolidateScripts(type: JoinType = JOIN.CAT): void {
        def (ok, files) = consolidateFiles(FILE.JS, type, Scripts);
        when(ok) {
            Scripts = files;
        }
    }

    public consolidateStylesheets(type: JoinType = JOIN.CAT): void {
        def (ok, files) = consolidateFiles(FILE.CSS, type, Stylesheets);
        when(ok) {
            Stylesheets = files;
        }
    }

    protected consolidateFiles(
        ftype: FileType, _jtype: JoinType, files: List[string]): bool * List[string] {

        mutable ok = false;
        mutable result = List();
        def path = Path.Replace('/', '_').Replace('\\', '_');
        def output = ftype.rename($"/_$path");
        def canonical_path = Server.canonicalPath(Consolidation.CachePath);
        def outpath = $"$canonical_path$output";

        using(ostream = FileStream(outpath, FileMode.Create, FileAccess.Write)) {
            when(ostream != null) {
                foreach(f in files) {
                    def p = filePath(f);
                    if(standalone(f)) {
                        result.Add(p);
                    } else {
                        def g = ('/' == p[0]) ? p.Substring(1) : p;
                        using(istream = Server.openLocalFile(g)) {
                            if(istream != null) {
                                istream.CopyTo(ostream);
                            } else {
                                result.Add(p);
                            }
                        }
                    }
                }
                ok = true;
            }
        }
        when(ok) {
            result.Add(output);
        }

        (ok, result);
    }

    // merging

    public merge(other: Page): void {
        when(Lang == null) {
            Lang = other.Lang;
        }
        when(Title == null) {
            Title = other.Title;
        }
        when(Content == null) {
            Content = other.Content;
        }
        Metas = mergeLists(other.Metas, Metas);
        Stylesheets = mergeLists(other.Stylesheets, Stylesheets);
        Scripts = mergeLists(other.Scripts, Scripts);
        BodyAttributes = mergeLists(other.BodyAttributes, BodyAttributes);
        Partials = mergeDicts(other.Partials, Partials);
        Objects = mergeDicts(other.Objects, Objects);
    }

    protected static mergeLists(
        a: List[string], b: List[string]): List[string] {
        mutable result = List();

        when(a != null) {
            foreach(m in a) {
                result.Add(m);
            }
        }
        when(b != null) {
            foreach(m in b) {
                result.Add(m);
            }
        }
        result;
    }

    protected static mergeDicts[T](a: Dict[T], b: Dict[T]): Dict[T] {
        mutable result = Dict();

        when(a != null) {
            foreach(m in a) {
                result.Add(m.Key, m.Value);
            }
        }
        when(b != null) {
            foreach(m in b) {
                result[m.Key] = m.Value;
            }
        }
        result;
    }

    // path utils

    protected static filePath(path: string): string {
        path.Split(array['#', '*'])[0];
    }

    protected static standalone(path: string): bool {
        path.Contains("*");
    }

    protected static hasId(path: string): bool {
        path.Contains("#");
    }

    protected static fileId(path: string): string {
        mutable result = null;
        when(hasId(path)) {
            result = path.Split(array['#'], 2)[1];
        }
        result;
    }
}


} // namespace httplib
