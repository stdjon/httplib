using System;
using Image = System.Drawing.Image;
using Stream = System.IO.Stream;


namespace httplib {

/** Interface for user authentication modules */
public interface IAuth: IModuleInterface {

    /** Number of PBKDF2 iterations to run when generating passwords. */
    IterationCount: int { get }

    /** Length of password hashes and salts. */
    HashLength: int { get }

    /** Generate a new unique salt value. */
    createSalt(): array[byte];

    /** Generate a PBKDF2 hash of a user-supplied password. */
    hashPassword(
        pw: string, salt: array[byte], iter: int, length: int): array[byte];

    /** Given a user-supplied password, return a pipe-delimited record which
     *  specifies the password hash, and the parameters used to generate it
     *  (salt, iterations, hash length, algorithm(=PBKDF2) etc...) */
    createPasswordRecord(pw: string): string;

    /** Validate a user-supplied password against the record generated by
     *  createPasswordRecord(). */
    validatePassword(pw: string, record: string): bool;

    /** Compare password hashes in constant time. Attempts to avoid 'leaking'
     *  timing information. */
    compareHashes(a: array[byte], b: array[byte]): bool;
}


/** Interface for image transformations */
public interface IImageTransform: IModuleInterface {

    load(path: string): bool;
    load(stream: Stream): bool;
    save(path: string): bool;
    save(stream: Stream): bool;
    transform(transform: string): Image;
}


/** Interface for text transformations */
public interface ITextTransform: IModuleInterface {

    transform(input: string): string;
}


}
