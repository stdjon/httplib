---
# The following 3 meta tags *must* come first in the head; any other head content
# must come *after* these tags
Metas:
  - charset="utf-8"
  - http-equiv="X-UA-Compatible" content="IE=edge"
  - name="viewport" content="width=device-width, initial-scale=1"
Stylesheets:
  - /bootstrap-3.3.4-dist/css/bootstrap.css
  - /font-awesome-4.3.0/css/font-awesome.css
Title: Edit
Content: |
  <style>
    div pre, div textarea { margin-top: 10px; margin-bottom: 10px; }
  </style>
  <div class="container">
    <h1>Text edit example</h1>
    <p>Type some stuff into the editor, check out the preview...</p>
    <div class="col-md-6" style="background-color: #bdf; height: 250px;">
      <textarea autofocus id="input" style="width: 350px;"></textarea>
    </div>
    <div class="col-md-6" style="background-color: #dfb; height: 50px;">
      <pre><span id="transit"></span></pre>
    </div>
    <div class="col-md-6" style="background-color: #fdb; height: 200px;">
      <pre><span id="preview"></span></pre>
    </div>
  </div>
  <script src="/jquery-1.11.2/jquery-1.11.2.js"></script>
  <script src="/bootstrap-3.3.4-dist/js/bootstrap.js"></script>
  <script>
    function textUpdate(text, oldText) {
      var result = {};
      if(oldText != text) {
        var obj = {};
        var i = 0, k = -1;
        var l = text.length;
        var oL = oldText.length;
        var needFullCheck = true;

        if(l - oL == 1) {
          // check for single char insertion
          while(i < oL && text[i] == oldText[i]) {
            i++;
          }

          if((i == oL) || (text[i + 1] === oldText[i])) {
            result.a = i;
            result.b = i;
            result.s = text[i];
            needFullCheck = false;
          } else {
            k = i;
          }
        } else if (oL - l == 1) {
          // check for single char deletion
          while(i < l && text[i] == oldText[i]) {
            i++;
          }

          if((i == l) || (oldText[i + 1] == text[i])) {
            result.a = i;
            result.b = i + 1;
            result.s = '';
            needFullCheck = false;
          } else {
            k = i;
          }
        }
        if(needFullCheck) {
          if(k >= 0) {
            i = k;
          } else {
            while(i < l && text[i] == oldText[i]) {
              i++;
            }
          }
          var j = 0;
          while(j < oL && text[l - j] == oldText[oL - j]) {
            j++;
          }
          var adj = (oL > l) ? 2 : 1;
          var b =  (oL - j) + adj;
          if(b > oL) {
            b = oL;
          }
          result.a = i;
          result.b = b;
          result.s = text.slice(i, (l - j) + adj);
        }
      }
      return result;
    }
    var oldText = "";
    function postText(e) {
      var text = $(this).val();
      if(text != oldText) {
        var obj = textUpdate(text, oldText);
        $("#transit").html(JSON.stringify(obj));

        $.ajax({
          type: 'POST',
          dataType: 'text',
          global: false,
          url: '/edit-do',
          data: 'a=' + obj.a + '&b=' + obj.b + '&s='+encodeURIComponent(obj.s),
          success: function(data) {
            $("#preview").html(data);
          }
        });
        oldText = text;
      }
    }
    $("#input").on("input", postText);
    $.ajax({
      type: 'POST',
      dataType: 'text',
      global: false,
      url: '/edit-do',
      data: 'a=0&b=0&s=',
      success: function(data) {
        $("#preview").html(data);
      }
    });
  </script>
Partials:
Objects:
