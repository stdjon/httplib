using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;

using Nemerle.Extensions;
using Nemerle.IO;
using Nemerle.Utility;

using httplib;


//------------------------------------------------------------------------------
// MyServerConfiguration

[Record]
class MyServerConfiguration: ServerConfiguration {
    public this() {}
}


//------------------------------------------------------------------------------
// MyServer

class MyServer: Server {

    type NustacheTable = Dictionary[string, object];

    public new Configuration: MyServerConfiguration {
        get { base.Configuration :> MyServerConfiguration }
    }

    public this(path: string) {
        def config = loadConfiguration.[MyServerConfiguration](path);
        base(config);
    }

    public this(config: MyServerConfiguration) {
        base(config);
    }

    public doMagic(
        _ctx: Context, request: Request, response: Response, template: string): void {

        def nustache_table = NustacheTable() <- [
            "RawPath" = request.RawPath,
            "Path" = request.Path.toSystemType(),
        ];

        mutable vars: array[string] = array(0);
        mutable qs: array[string] = array(0);
        mutable hdrs: array[string] = array(0);
        mutable i = 0;
        request.Vars.forEach((k, v) => {
            System.Array.Resize(ref vars, i + 1);
            vars[i] = ($"$k = $v").ToString();
            i++;
        });
        nustache_table.Add("Vars", vars);

        i = 0;
        request.QueryString.forEach((k, v) => {
            System.Array.Resize(ref qs, i + 1);
            qs[i] = ($"$k = $v").ToString();
            i++;
        });
        nustache_table.Add("QueryString", qs);

        i = 0;
        request.Headers.forEach((k, v) => {
            System.Array.Resize(ref hdrs, i + 1);
            hdrs[i] = ($"$k = $v").ToString();
            i++;
        });
        nustache_table.Add("Headers", hdrs);

        when(request.Vars["name"] != null) {
            nustache_table.Add("name", request.Vars["name"]);
        }

        def output = renderPage(template, nustache_table);
        response.append(output);
        response.setCookie("CookieTestName", "CookieTestValue");
        response.Status = (200, "OK");
    }

    protected override notFoundRespose(
        _context: Context, request: Request, response: Response): void {
        def data = PageData() <- [
            "PATH" = request.RawUrl.ToString(),
        ];
        def output = renderPage("404.nyml", data);
        response.append(output);
        response.Status = (404, "Not Found");
    }

    // overridden 500 error response...
    protected override internalServerErrorResponse(
        _context: Context, request: Request, response: Response): void {

        def data = PageData() <- [
            "PATH" = request.RawUrl.ToString(),
        ];
        def output = renderPage("500.nyml", data);
        response.append(output);
        response.Status = (500, "Internal Server Error");
    }

    protected override internalServerError(ex: Exception): void {
        print("INTERNAL SERVER ERROR!\n"
            $"$(ex.Message)\n"
            $"$(ex.StackTrace)\n");
    }
}


module Test {
    Main(_args: array[string]): void {

        mutable running = true;
        def config_path = "src/myserver/config.yml";
        print("ServerConfiguration: $config_path\n");

        using(mutable my_server = MyServer(config_path)) {

            my_server.route(HTTP.GET, "/a/{{b}}/{{c}}", (ctx, req, res) => {
                my_server.doMagic(ctx, req, res, "magic.nyml");
            });

            my_server.route(HTTP.GET, "/order/{{number:[0-9]+}}",
                my_server.doMagic(_, _, _, "magic.nyml"));

            my_server.route(HTTP.GET, "/post/{{name}}",
                my_server.doMagic(_, _, _, "test1.nyml"));

            my_server.route(HTTP.POST, "/form{{_check}}",
                my_server.doMagic(_, _, _, "magic.nyml"));

            // redirection test...
            my_server.route(HTTP.GET, "/redir{{aim:.*}}", (_ctx, req, res) => {
                res["Location"] = req.Vars["aim"];
                res.Status = (302, "Moved Permanently");
            });

            my_server.route(HTTP.GET, "/", (_ctx, _req, res) => {
                res.append(my_server.renderPage("index.yml"));
                res.Status = (200, "OK");
            });

            my_server.context(HTTP.GET, ".*", PageData() <- [ "MAGIC" = 1 ]);

            while(running) {
                my_server.update();
                Thread.Sleep(1000);
            }
        }
    }
}


