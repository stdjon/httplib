using System.IO;
using System.Threading;

using Nemerle.IO;
using Nemerle.Utility;

using httplib;


[Record]
class MyServerConfiguration: ServerConfiguration {
}

class MyServer: Server {

    public new Configuration: MyServerConfiguration {
        get { base.Configuration :> MyServerConfiguration }
    }

    public this(config: MyServerConfiguration) {
        base(config);
    }

    doMagic(request: Request, response: Response): void {
        response.append(
            "<html><body>",
            "<h1>httplib \"Magic\" Response</h1>",
            $"<p>RawPath: $(request.RawPath)</p>",
            "<p>QueryString:<ol>");

        request.QueryString.forEach((k, v) => {
            response.append($"<li>$k = $v</li>");
        });

        response.append("</ol></p><p>Path:<ol>");

        request.Path.forEach(p => {
            response.append($"<li>$p</li>");
        });

        response.append("</ol></p></body></html>");
    }

    defaultResponse(request: Request, response: Response): void {

        response.append(
            "<html><body>",
            "<h1>httplib Default Response</h1>",
            $"<p>Url: $(request.Url)</p>",
            $"<p>RawUrl: $(request.RawUrl)</p>",
            $"<p>HttpMethod: $(request.HttpMethod)</p>"
            $"<p>Extension: $(request.Extension)</p>",
            $"<p>RawPath: $(request.RawPath)</p>",
            "<p>Headers:<ol>");

        request.Headers.forEach((k, v) => {
            response.append($"<li>$k = $v</li>");
        });

        response.append("</ol></p><p>QueryString:<ol>");

        request.QueryString.forEach((k, v) => {
            response.append($"<li>$k = $v</li>");
        });

        response.append("</ol></p><p>Path:<ol>");

        request.Path.forEach(p => {
            response.append($"<li>$p</li>");
        });

        response.append("</ol></p></body></html>");
    }

    protected override callback(request: Request, response: Response): void {

        if("" == request.Extension) {
            doMagic(request, response);
        } else {
            defaultResponse(request, response);
        }
    }
}


module Test {

    Main(_args: array[string]): void {
        mutable running = true;
        def serverConfig = MyServerConfiguration(
                array["http://localhost:8080/"], // Prefixes
                800, //OutputLength
                Directory.GetCurrentDirectory(), //Root
                1024 //FileChunkLength
            );
            print("ServerConfiguration: $serverConfig\n");

        using(mutable my_server = MyServer(serverConfig)) {

            while(running) {
                my_server.update();
                Thread.Sleep(1000);
                //print("tick...\n");
            }
        }
    }
}


