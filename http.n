using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;

using Nemerle.Extensions;
using Nemerle.IO;
using Nemerle.Utility;

using httplib;


//------------------------------------------------------------------------------
// MyServerConfiguration

[Record]
class MyServerConfiguration: ServerConfiguration {
    [Accessor(flags = WantSetter)] mutable file_chunk_length: int;
}


//------------------------------------------------------------------------------
// MyServer

class MyServer: Server {

    type NustacheObject = Dictionary[string, object];

    public new Configuration: MyServerConfiguration {
        get { base.Configuration :> MyServerConfiguration }
    }

    public this(config: MyServerConfiguration) {
        base(config);
    }

    public doMagic(request: Request, response: Response, template: string): void {

        def nustache_table = NustacheObject() <- [
            "RawPath" = request.RawPath,
            "Path" = request.Path.toSystemType(),
        ];

        mutable vars: array[string] = array(0);
        mutable qs: array[string] = array(0);
        mutable i = 0;
        request.Vars.forEach((k, v) => {
            System.Array.Resize(ref vars, i + 1);
            vars[i] = ($"$k = $v").ToString();
            i++;
        });
        nustache_table.Add("Vars", vars);

        i = 0;
        request.QueryString.forEach((k, v) => {
            System.Array.Resize(ref qs, i + 1);
            qs[i] = ($"$k = $v").ToString();
            i++;
        });
        nustache_table.Add("QueryString", qs);

        when(request.Vars["name"] != null) {
            nustache_table.Add("name", request.Vars["name"]);
        }

        def page = Page.load(template);
        def nustache_output = page.render(nustache_table);

        response.append(nustache_output);

        response.setCookie("CookieTestName", "CookieTestValue");
        response.Status = (200, "OK");
    }

    notFoundRespose(request: Request, response: Response): void {
        def nustache_table = NustacheObject() <- [
            "PATH" = request.RawUrl.ToString(),
        ];
        def page = Page.load("www/404.yml");
        def nustache_output = page.render(nustache_table);

        response.append(nustache_output);
        response.Status = (404, "Not Found");
    }

/*
    defaultResponse(request: Request, response: Response): void {

        response.append(
            "<html><body>",
            "<h1>httplib Default Response</h1>",
            $"<p>Url: $(request.Url)</p>",
            $"<p>RawUrl: $(request.RawUrl)</p>",
            $"<p>HttpMethod: $(request.HttpMethod)</p>"
            $"<p>Extension: $(request.Extension)</p>",
            $"<p>RawPath: $(request.RawPath)</p>",
            $"<p>UserAgent: $(request.UserAgent)</p>",
            $"<p>IsAuthenticated: $(request.IsAuthenticated)</p>",
            $"<p>IsSecure: $(request.IsSecure)</p>",
            $"<p>HttpVersion: $(request.HttpVersion)</p>",
            "<p>Headers:<ol>");

        request.Headers.forEach((k, v) => {
            response.append($"<li>$k = $v</li>");
        });

        response.append("</ol></p><p>QueryString:<ol>");

        request.QueryString.forEach((k, v) => {
            response.append($"<li>$k = $v</li>");
        });

        response.append("</ol></p><p>Path:<ol>");

        request.Path.forEach(p => {
            response.append($"<li>$p</li>");
        });

        response.append("</ol></p><p>Accept:<ol>");

        request.Accept.forEach(p => {
            response.append($"<li>$p</li>");
        });

        response.append("</ol></p><p>Cookies:<ol>");

        request.Cookies.forEach((k, v) => {
            response.append($"<li>$k = $v</li>");
        });

        response.append("</ol></p></body></html>");
        response.Status = (200, "OK");
    }
*/

    serveFileResponse(request: Request, response: Response): void {

        using(def reader = BinaryReader(request.FileStream)) {
            mutable continue = true;

            while(continue) {
                def data = reader.ReadBytes(Configuration.FileChunkLength);
                response.appendBytes(data);
                continue = (data.Length == Configuration.FileChunkLength);
            }
        }
        response.ContentType = extensionToMimeType(request.Extension);
        response.Status = (200, "OK");
    }

    protected override callback(request: Request, response: Response): void {

        // If the request.SearchedForFileStream is true, it means that the
        // request.FileStream was found by searching via the ImplicitExtensions
        if( (request.FileStream != null) &&
            !request.SearchedForFileStream ) {
            serveFileResponse(request, response);
        } else {
            notFoundRespose(request, response);
        }
    }

    static protected extensionToMimeType(ext: string): string {
        match(ext) {
            | "js" => "application/javascript"
            | "json" => "application/json"
            | "html" => "text/html"
            | "css" => "text/css"
            | "ttf" => "application/x-font-ttf"
            | "woff" => "application/x-font-woff"
            | "woff2" => "application/octet-stream"
            | _ => "text/plain"
        }
    }
}


module Test {
    Main(_args: array[string]): void {

        mutable running = true;
        def serverConfig = MyServerConfiguration(
            // Prefixes
            array[
                "http://localhost:8080/",
                "https://localhost:8443/",
            ],
            800, //OutputLength
            Path.Combine(Directory.GetCurrentDirectory(), "www"), //Root
            array["yml"], //ImplicitExtensions
            1024, //FileChunkLength
        );
        print("ServerConfiguration: $serverConfig\n");

        using(mutable my_server = MyServer(serverConfig)) {

            my_server.route(HTTP.GET, "/a/{{b}}/{{c}}", (req, res) => {
                my_server.doMagic(req, res, "www/magic.yml");
            });

            my_server.route(HTTP.GET, "/order/{{number:[0-9]+}}",
                my_server.doMagic(_, _, "www/magic.yml"));

            my_server.route(HTTP.GET, "/post/{{name}}",
                my_server.doMagic(_, _, "www/test1.yml"));

            my_server.route(HTTP.POST, "/form{{_check}}",
                my_server.doMagic(_, _, "www/magic.yml"));

            my_server.route(HTTP.GET, "/magic", (req, res) => {
                print("here... $(req.FileStream.ToString())\n");
                print("FS: $(req.FileStream.ToString())\n");
                def page = Page.load(req.FileStream);
                res.append(page.render());
                res.Status = (200, "OK");
            });

            while(running) {
                my_server.update();
                Thread.Sleep(1000);
                //print("tick...\n");
            }
        }
    }
}


