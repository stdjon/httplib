using System.IO;
using System.Threading;

using Nemerle.IO;
using Nemerle.Utility;

using Nustache.Core;

using httplib;


[Record]
class MyServerConfiguration: ServerConfiguration {
}


class MyServer: Server {

    public new Configuration: MyServerConfiguration {
        get { base.Configuration :> MyServerConfiguration }
    }

    public this(config: MyServerConfiguration) {
        base(config);
    }

    public doMagic(request: Request, response: Response): void {
        def nustache_template: string = "<html><body>"
            "<h1>httplib \"Magic\" Response</h1>"
            "<p>RawPath: {{RawPath}}</p>"
            "<p>QueryString:<ol>{{#QueryString}}<li>{{.}}</li>{{/QueryString}}</ol></p>"
            "<p>Path:<ol>{{#Path}}<li>{{.}}</li>{{/Path}}</ol></p>"
            "<p>Vars:<ol>{{#Vars}}<li>{{.}}</li>{{/Vars}}</ol></p>"
            "</body></html>";

        def nustache_table: System.Collections.Generic.Dictionary[string, object] = 
            System.Collections.Generic.Dictionary();
        nustache_table.Add("RawPath", request.RawPath);
        nustache_table.Add("Path", request.Path.toSystemType());
        mutable vars: array[string] = array(0);
        mutable qs: array[string] = array(0);
        mutable i = 0;
        request.Vars.forEach((k, vv) => {
            System.Array.Resize(ref vars, i + 1);
            vars[i] = ($"$k = $vv").ToString();
            i++;
        });

        nustache_table.Add("Vars", vars);
        i = 0;
        request.QueryString.forEach((k, vv) => {
            System.Array.Resize(ref qs, i + 1);
            qs[i] = ($"$k = $vv").ToString();
            i++;
        });

        nustache_table.Add("QueryString", qs);

        def nustache_output =
            Render.StringToString(nustache_template, nustache_table);

        response.append(nustache_output);
    /*
        response.append(
            "<html><body>",
            "<h1>httplib \"Magic\" Response</h1>",
            $"<p>RawPath: $(request.RawPath)</p>",
            "<p>QueryString:<ol>");

        request.QueryString.forEach((k, v) => {
            response.append($"<li>$k = $v</li>");
        });

        response.append("</ol></p><p>Path:<ol>");

        request.Path.forEach(p => {
            response.append($"<li>$p</li>");
        });

        response.append("</ol></p><p>Vars:<ol>");

        request.Vars.forEach((k, v) => {
            response.append($"<li>$k = $v</li>");
        });

        response.append("</ol></p></body></html>");
    */
    }

    defaultResponse(request: Request, response: Response): void {

        response.append(
            "<html><body>",
            "<h1>httplib Default Response</h1>",
            $"<p>Url: $(request.Url)</p>",
            $"<p>RawUrl: $(request.RawUrl)</p>",
            $"<p>HttpMethod: $(request.HttpMethod)</p>"
            $"<p>Extension: $(request.Extension)</p>",
            $"<p>RawPath: $(request.RawPath)</p>",
            "<p>Headers:<ol>");

        request.Headers.forEach((k, v) => {
            response.append($"<li>$k = $v</li>");
        });

        response.append("</ol></p><p>QueryString:<ol>");

        request.QueryString.forEach((k, v) => {
            response.append($"<li>$k = $v</li>");
        });

        response.append("</ol></p><p>Path:<ol>");

        request.Path.forEach(p => {
            response.append($"<li>$p</li>");
        });

        response.append("</ol></p></body></html>");
    }

    protected override callback(request: Request, response: Response): void {

        defaultResponse(request, response);
    }
}


module Test {

    Main(_args: array[string]): void {

        mutable running = true;
        def serverConfig = MyServerConfiguration(
                array["http://localhost:8080/"], // Prefixes
                800, //OutputLength
                Directory.GetCurrentDirectory(), //Root
                1024 //FileChunkLength
            );
            print("ServerConfiguration: $serverConfig\n");

        using(mutable my_server = MyServer(serverConfig)) {

            my_server.route("/a/{{b}}/{{c}}", (req, res) => {
                my_server.doMagic(req, res);
            });

            my_server.route("/order/{{number:[0-9]+}}", my_server.doMagic);

            while(running) {
                my_server.update();
                Thread.Sleep(1000);
                //print("tick...\n");
            }
        }
    }
}


