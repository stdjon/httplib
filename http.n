using System.IO;
using System.Threading;

using Nemerle.IO;

using httplib;


class MyServer: Server {

    /*[Accessor]*/ root: string;

    public this(params prefixes: array[string]) {
        base(prefixes);
        root = Directory.GetCurrentDirectory();

    }

    extensionToMimeType(ext: string): string {
        match(ext) {
            | "js" => "application/javascript"
            | "json" => "application/json"
            | "html" => "text/html"
            | "css" => "text/css"
            | "ttf" => "application/x-font-ttf"
            | "woff" => "application/x-font-woff"
            | "woff2" => "application/octet-stream"
            | _ => "text/plain"
        }
    }

    doMagic(request: Request, response: Response): void {
        response.append(
            "<html><body>",
            "<h1>httplib \"Magic\" Response</h1>",
            $"<p>RawPath: $(request.RawPath)</p>",
            "<p>QueryString:<ol>");

        request.QueryString.forEach((k, v) => {
            response.append($"<li>$k = $v</li>");
        });

        response.append("</ol></p><p>Path:<ol>");

        request.Path.forEach(p => {
            response.append($"<li>$p</li>");
        });

        response.append("</ol></p></body></html>");
    }

    defaultResponse(request: Request, response: Response): void {

        response.append(
            "<html><body>",
            "<h1>httplib Default Response</h1>",
            $"<p>Url: $(request.Url)</p>",
            $"<p>RawUrl: $(request.RawUrl)</p>",
            $"<p>HttpMethod: $(request.HttpMethod)</p>"
            $"<p>Extension: $(request.Extension)</p>",
            $"<p>RawPath: $(request.RawPath)</p>",
            "<p>Headers:<ol>");

        request.Headers.forEach((k, v) => {
            response.append($"<li>$k = $v</li>");
        });

        response.append("</ol></p><p>QueryString:<ol>");

        request.QueryString.forEach((k, v) => {
            response.append($"<li>$k = $v</li>");
        });

        response.append("</ol></p><p>Path:<ol>");

        request.Path.forEach(p => {
            response.append($"<li>$p</li>");
        });

        response.append("</ol></p></body></html>");
    }

    protected override callback(request: Request, response: Response): void {

        def path = Path.Combine(root, request.RawPath);
        def exists = File.Exists(path);

        print("File \"$(path)\" $(if(exists) {\"does\"} else {\"doesn't\"}) exist\n");

        if(exists) {
            // If the file exists on disk, serve its contents with an
            // appropriate MIME type
            using(def reader = BinaryReader(File.Open(path, FileMode.Open))) {

                mutable continue = true;

                while(continue) {
                    def data = reader.ReadBytes(400);
                    response.appendBytes(data);
                    continue = (data.Length == 400);
                }
                response.ContentType = extensionToMimeType(request.Extension);
                print("Extension $(request.Extension) => ContentType $(response.ContentType)\n");
            }
        } else if("" == request.Extension) {
            doMagic(request, response);
        } else {
            defaultResponse(request, response);
        }
    }
}


module Test {

    Main(_args: array[string]): void {
        mutable running = true;

        using(mutable my_server = MyServer("http://localhost:8080/")) {

            while(running) {
                my_server.update();
                Thread.Sleep(1000);
                //print("tick...\n");
            }
        }
    }
}


