using System.Threading;

using httplib;


class MyServer: Server {

    public this(params prf: array[string]) {
        base(prf);
    }

    protected override callback(request: Request, response: Response): void {

        response.append(
            "<html><body>",
            "<h1>Hello World!</h1>",
            $"<p>Url: $(request.Url)</p>",
            $"<p>RawUrl: $(request.RawUrl)</p>",
            $"<p>HttpMethod: $(request.HttpMethod)</p>"
            $"<p>Extension: $(request.Extension)</p>"
            "<p>Headers:<ol>");

        request.Headers.forEach((k, v) => {
            response.append($"<li>$k = $v</li>");
        });

        response.append("</ol></p><p>QueryString:<ol>");

        request.QueryString.forEach((k, v) => {
            response.append($"<li>$k = $v</li>");
        });

        response.append("</ol></p><p>Path:<ol>");

        request.Path.forEach(p => {
            response.append($"<li>$p</li>");
        });

        response.append("</ol></p></body></html>");
    }
}


module Test {

    Main(_args: array[string]): void {
        mutable running = true;

        using(mutable my_server = MyServer("http://localhost:8080/")) {

            while(running) {
                my_server.update();
                Thread.Sleep(1000);
                //print("tick...\n");
            }
        }
    }
}


