using System.Collections.Generic;
using System.IO;
using System.Threading;

using Nemerle.Extensions;
using Nemerle.IO;
using Nemerle.Utility;

using Nustache.Core;

using YamlDotNet.Serialization;

using httplib;


//------------------------------------------------------------------------------
// Page

[Record]
public class Page {

    public Path: string { get; set; }
    public Content: string { get; set; }
    public Partials: Dictionary[string, string] { get; set; }
    public Objects: Dictionary[string, object] { get; set; }

    public this() {}

    public static load(path: string): Page {
        def deserializer = Deserializer();
        mutable result = deserializer.Deserialize.[Page](StreamReader(path));
        result.Path = path;
        result;
    }

    public render(data: Dictionary[string, object] = null): string {
        def objects =
            if(data != null) {
                data
            } else {
                Objects
            };

        Render.StringToString(Content, objects, templateLocator);
    }

    public templateLocator(template: string): Template {
        mutable result: Template = null;
        when(Partials.ContainsKey(template)) {
            result = Template(template);
            using(def reader = StringReader(Partials[template])) {
                result.Load(reader);
            }
        }
        result;
    }
}


//------------------------------------------------------------------------------
// MyServerConfiguration

[Record]
class MyServerConfiguration: ServerConfiguration {
}


//------------------------------------------------------------------------------
// MyServer

class MyServer: Server {

    public new Configuration: MyServerConfiguration {
        get { base.Configuration :> MyServerConfiguration }
    }

    public this(config: MyServerConfiguration) {
        base(config);
    }

    public doMagic(request: Request, response: Response): void {

        def nustache_table: Dictionary[string, object] = Dictionary();

        nustache_table.Add("RawPath", request.RawPath);
        nustache_table.Add("Path", request.Path.toSystemType());
        mutable vars: array[string] = array(0);
        mutable qs: array[string] = array(0);
        mutable i = 0;
        request.Vars.forEach((k, vv) => {
            System.Array.Resize(ref vars, i + 1);
            vars[i] = ($"$k = $vv").ToString();
            i++;
        });
        nustache_table.Add("Vars", vars);

        i = 0;
        request.QueryString.forEach((k, vv) => {
            System.Array.Resize(ref qs, i + 1);
            qs[i] = ($"$k = $vv").ToString();
            i++;
        });
        nustache_table.Add("QueryString", qs);

        def page = Page.load("www/magic.yml");
        def nustache_output = page.render(nustache_table);

        response.append(nustache_output);
    }

    defaultResponse(request: Request, response: Response): void {

        response.append(
            "<html><body>",
            "<h1>httplib Default Response</h1>",
            $"<p>Url: $(request.Url)</p>",
            $"<p>RawUrl: $(request.RawUrl)</p>",
            $"<p>HttpMethod: $(request.HttpMethod)</p>"
            $"<p>Extension: $(request.Extension)</p>",
            $"<p>RawPath: $(request.RawPath)</p>",
            "<p>Headers:<ol>");

        request.Headers.forEach((k, v) => {
            response.append($"<li>$k = $v</li>");
        });

        response.append("</ol></p><p>QueryString:<ol>");

        request.QueryString.forEach((k, v) => {
            response.append($"<li>$k = $v</li>");
        });

        response.append("</ol></p><p>Path:<ol>");

        request.Path.forEach(p => {
            response.append($"<li>$p</li>");
        });

        response.append("</ol></p></body></html>");
    }

    protected override callback(request: Request, response: Response): void {

        defaultResponse(request, response);
    }
}


module Test {
    Main(_args: array[string]): void {

// TEST
        def test1 = Page.load("www/test1.yml");

        mutable _str = test1.render();
        print("output: = $_str\n");

        _str = test1.render(Dictionary() <- [
            "name" = "Bob"
        ]);
        print("output: = $_str\n");
// /TEST

        mutable running = true;
        def serverConfig = MyServerConfiguration(
            array["http://localhost:8080/"], // Prefixes
            800, //OutputLength
            Directory.GetCurrentDirectory(), //Root
            1024 //FileChunkLength
        );
        print("ServerConfiguration: $serverConfig\n");

        using(mutable my_server = MyServer(serverConfig)) {

            my_server.route("/a/{{b}}/{{c}}", (req, res) => {
                my_server.doMagic(req, res);
            });

            my_server.route("/order/{{number:[0-9]+}}", my_server.doMagic);

            while(running) {
                my_server.update();
                Thread.Sleep(1000);
                //print("tick...\n");
            }
        }
    }
}


